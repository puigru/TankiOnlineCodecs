# Codec definitions autogenerated on Fri, 22 Oct 2021 04:19:30 GMT
# Decompiler: JPEXS Free Flash Decompiler v.11.3.0
# game-27ec036615f5121410ffb990f712ecc3.swf
# entrance-59353605d5b48cef0130d430c2173c75.swf
from alternativa.model import Codec
from alternativa import protocol

class AchievementCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(packet.readInt())
        data['activeAchievements'] = items
        return data

class AchievementPanelModelBase_activateAchievement(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['achievement'] = packet.readInt()
        return data

class AchievementPanelModelBase_completeAchievement(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['achievement'] = packet.readInt()
        data['message'] = packet.readString()
        data['prize'] = packet.readInt()
        return data

class ActiveAfterDeathCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['enabled'] = bool(packet.readByte())
        return data

class ShopAbonementsCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(packet.readLong())
        data['categoriesWithBonus'] = items
        return data

class AdShowModelBase(Codec):
    pass

class AdShowModelServer_logAdShow(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['duration'] = packet.readDouble()
        data['provider'] = packet.readString()
        data['origin'] = packet.readString()
        return data

class AlertModelBase(Codec):
    pass

class AlertModelBase_show(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['text'] = packet.readString()
        return data

class AlipayPaymentModelBase(Codec):
    pass

class PaymentRequestVariable(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['value'] = packet.readString()
        data['variable'] = packet.readString()
        return data

class PaymentRequestUrl(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['encodeParameters'] = bool(packet.readByte())
        data['getRequest'] = bool(packet.readByte())
        data['host'] = packet.readString()
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(PaymentRequestVariable().read(packet, optional))
        data['parameters'] = items
        return data

class AlipayPaymentModelBase_receiveUrl(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['url'] = PaymentRequestUrl().read(packet, optional)
        return data

class AlipayPaymentModelServer_getPaymentUrl(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['shopItemId'] = packet.readLong()
        return data

class AndroidAppRatingModelBase(Codec):
    pass

class AndroidAppRatingModelBase_showDialogAppRating(Codec):
    pass

class AndroidAppRatingModelServer_goToMarket(Codec):
    pass

class AndroidAppRatingModelServer_setAppRating(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['rating'] = packet.readInt()
        return data

class AndroidBannerModelCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['buttonIcon'] = None if optional.next() else packet.readLong()
        data['cooldownTimeInHour'] = packet.readInt()
        data['order'] = packet.readInt()
        data['type'] = packet.readInt()
        return data

class AndroidOffersRankModelBase(Codec):
    pass

class AndroidPayModelBase(Codec):
    pass

class AndroidPayModelBase_consume(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['token'] = packet.readString()
        return data

class PurchaseData(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['currency'] = packet.readString()
        data['itemId'] = packet.readString()
        data['token'] = packet.readString()
        return data

class AndroidPayModelServer_checkForConsumeTokens(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['purchaseData'] = PurchaseData().read(packet, optional)
        return data

class AndroidPayModelServer_consumeSuccess(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['tokenId'] = packet.readString()
        return data

class AndroidPayModelServer_makePayment(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['tokenId'] = packet.readString()
        data['itemId'] = packet.readLong()
        data['currency'] = packet.readString()
        return data

class AndroidPurchaseOfUpgradesModelBase(Codec):
    pass

class AndroidPurchaseOfUpgradesUserModelBase(Codec):
    pass

class AndroidPurchaseOfUpgradesUserModelBase_changeLevel(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['itemId'] = packet.readLong()
        data['newLevel'] = packet.readInt()
        return data

class AndroidPurchaseOfUpgradesUserModelServer_purchaseOfUpgrades(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['itemId'] = packet.readLong()
        return data

class AndroidRenameCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['renameEnabled'] = bool(packet.readByte())
        return data

class AndroidRenameModelBase_renameFail(Codec):
    pass

class AndroidRenameModelBase_renameSuccessful(Codec):
    pass

class AndroidRenameModelServer_rename(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['uid'] = packet.readString()
        return data

class AndroidSpecialOfferModelCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['oldPrice'] = packet.readDouble()
        data['price'] = packet.readDouble()
        data['saleInPercent'] = packet.readInt()
        data['timeLeftInSec'] = packet.readInt()
        data['timeLimited'] = bool(packet.readByte())
        return data

class AntiAddictionAlertModelBase(Codec):
    pass

class AntiAddictionAlertModelBase_realNameAndIDNumberSetError(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['errorMessage'] = packet.readString()
        return data

class AntiAddictionAlertModelBase_realNameAndIDNumberSetSuccesfully(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['message'] = packet.readString()
        return data

class AntiAddictionAlertModelBase_showAntiAddictionAlert(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['minutesPlayedToday'] = packet.readInt()
        data['isCurrentIDNumberCorrect'] = bool(packet.readByte())
        return data

class AntiAddictionAlertModelServer_setRealNameAndIDNumber(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['realName'] = packet.readString()
        data['idNumber'] = packet.readString()
        return data

class ParticleEffectItem(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['effect'] = packet.readLong()
        data['name'] = packet.readString()
        return data

class ParticleEffectsEntity(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(ParticleEffectItem().read(packet, optional))
        data['effects'] = items
        return data

class AresUltimateCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['activationSound'] = packet.readLong()
        data['cancelSound'] = packet.readLong()
        data['particleEffects'] = None if optional.next() else ParticleEffectsEntity().read(packet, optional)
        data['recoilForce'] = packet.readFloat()
        data['shotDelayMs'] = packet.readInt()
        data['shotSound'] = packet.readLong()
        return data

class AresUltimateModelBase_activate(Codec):
    pass

class AresUltimateModelBase_cancel(Codec):
    pass

class Vector3d(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['x'] = packet.readFloat()
        data['y'] = packet.readFloat()
        data['z'] = packet.readFloat()
        return data

class AresUltimateModelServer_shotCommand(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['clientTime'] = packet.readInt()
        data['shotDirection'] = Vector3d().read(packet, optional)
        return data

class SplashParams(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['criticalSplashDamageRadius'] = packet.readFloat()
        data['firstDiminutionSplashDamagePercent'] = packet.readFloat()
        data['minSplashDamagePercent'] = packet.readFloat()
        data['radiusOfFirstDiminutionSplashDamage'] = packet.readFloat()
        data['radiusOfMaxSplashDamage'] = packet.readFloat()
        data['splashDamageRadius'] = packet.readFloat()
        data['splashImpactForce'] = packet.readFloat()
        return data

class LightEffectItem(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['attenuationBegin'] = packet.readFloat()
        data['attenuationEnd'] = packet.readFloat()
        data['color'] = packet.readString()
        data['intensity'] = packet.readFloat()
        data['time'] = packet.readInt()
        return data

class LightingEffectEntity(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['effectName'] = packet.readString()
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(LightEffectItem().read(packet, optional))
        data['items'] = items
        return data

class LightingSFXEntity(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(LightingEffectEntity().read(packet, optional))
        data['effects'] = items
        return data

class AresUltimateProjectileCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['damageSound'] = packet.readLong()
        data['endPosition'] = None if optional.next() else Vector3d().read(packet, optional)
        data['explosionSound'] = packet.readLong()
        data['flightSound'] = packet.readLong()
        data['healSound'] = packet.readLong()
        data['hitZoneRadius'] = packet.readFloat()
        data['lightningTexture'] = None if optional.next() else packet.readLong()
        data['noiseTexture'] = None if optional.next() else packet.readLong()
        data['particleEffects'] = None if optional.next() else ParticleEffectsEntity().read(packet, optional)
        data['position'] = None if optional.next() else Vector3d().read(packet, optional)
        data['simplifiedDamageHitTexture'] = None if optional.next() else packet.readLong()
        data['simplifiedExplosionTexture'] = None if optional.next() else packet.readLong()
        data['simplifiedHealHitTexture'] = None if optional.next() else packet.readLong()
        data['simplifiedLightingSFXEntity'] = None if optional.next() else LightingSFXEntity().read(packet, optional)
        data['simplifiedProjectileResource'] = None if optional.next() else packet.readLong()
        data['simplifiedShockWaveTexture'] = None if optional.next() else packet.readLong()
        data['speed'] = packet.readFloat()
        data['splashParams'] = SplashParams().read(packet, optional)
        return data

class AresUltimateProjectileModelBase_damageDischarge(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(packet.readLong())
        data['targetIds'] = items
        return data

class AresUltimateProjectileModelBase_explode(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['position'] = Vector3d().read(packet, optional)
        return data

class AresUltimateProjectileModelBase_healDischarge(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(packet.readLong())
        data['targetIds'] = items
        return data

class AresUltimateProjectileModelBase_shoot(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['startPosition'] = Vector3d().read(packet, optional)
        data['endPosition'] = Vector3d().read(packet, optional)
        return data

class ArmorGamesLoginModelBase(Codec):
    pass

class ArmsRaceUserProgress(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['level'] = packet.readInt()
        data['levelTimestamp'] = packet.readLong()
        data['user'] = packet.readLong()
        return data

class LevelDescription(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['droneId'] = None if optional.next() else packet.readLong()
        data['hullId'] = packet.readLong()
        data['killsToLevelUp'] = packet.readInt()
        data['levelEnterInfoMessage'] = None if optional.next() else packet.readString()
        data['levelEnterInfoMessageThreshold'] = None if optional.next() else packet.readInt()
        data['levelEnterMessage'] = None if optional.next() else packet.readString()
        data['levelPrepareMessage'] = None if optional.next() else packet.readString()
        data['weaponId'] = packet.readLong()
        return data

class ArmsRaceCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(LevelDescription().read(packet, optional))
        data['levels'] = items
        data['newLevelEnemySound'] = None if optional.next() else packet.readLong()
        data['newLevelSound'] = None if optional.next() else packet.readLong()
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(ArmsRaceUserProgress().read(packet, optional))
        data['userProgress'] = items
        return data

class ArmsRaceModelBase_levelUpUserPrepare(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['tankId'] = packet.readLong()
        data['newLevelIndex'] = packet.readInt()
        return data

class ArmsRaceModelBase_levelUpUserSpawned(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['tankId'] = packet.readLong()
        data['newLevelIndex'] = packet.readInt()
        data['placeInRace'] = packet.readInt()
        return data

class ArmsRaceModelBase_setUserLevelSilently(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['tankId'] = packet.readLong()
        data['level'] = packet.readInt()
        return data

class ArtilleryElevatingBarrelCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['control'] = packet.readByte()
        data['elevation'] = packet.readFloat()
        return data

class BarrelElevationCommand(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['control'] = packet.readByte()
        data['elevation'] = packet.readFloat()
        return data

class ArtilleryElevatingBarrelModelBase_update(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['barrelState'] = BarrelElevationCommand().read(packet, optional)
        return data

class ArtilleryElevatingBarrelModelServer_update(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['clientTime'] = packet.readInt()
        data['incarnationId'] = packet.readShort()
        data['barrelState'] = BarrelElevationCommand().read(packet, optional)
        return data

class ArtilleryCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['chargingTime'] = packet.readFloat()
        data['initialTurretAngle'] = packet.readFloat()
        data['maxShellSpeed'] = packet.readFloat()
        data['minShellSpeed'] = packet.readFloat()
        data['shellGravityCoef'] = packet.readFloat()
        data['shellRadius'] = packet.readFloat()
        data['speedsCount'] = packet.readInt()
        return data

class ArtilleryRotatingTurretModelBase(Codec):
    pass

class ArtillerySfxCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['chargingSound'] = packet.readLong()
        data['explosionSound'] = packet.readLong()
        data['explosionTexture'] = packet.readLong()
        data['farShotSound'] = packet.readLong()
        data['flameTexture'] = packet.readLong()
        data['flyBySound'] = packet.readLong()
        data['lightingSFXEntity'] = LightingSFXEntity().read(packet, optional)
        data['markTexture'] = packet.readLong()
        data['reloadSound'] = packet.readLong()
        data['shot1Sound'] = packet.readLong()
        data['shot2Sound'] = packet.readLong()
        data['shot3Sound'] = packet.readLong()
        data['shot4Sound'] = packet.readLong()
        data['smokeTexture'] = packet.readLong()
        data['streamTexture'] = packet.readLong()
        data['trailTexture'] = packet.readLong()
        return data

class AsiasoftLoginCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['facebookIcon'] = packet.readLong()
        data['googleIcon'] = packet.readLong()
        data['initialUrl'] = packet.readString()
        data['playIdIcon'] = packet.readLong()
        return data

class AsiasoftLoginModelBase_gotoInitialUrl(Codec):
    pass

class AsiasoftLoginModelBase_gotoUrl(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['url'] = packet.readString()
        return data

class AsiasoftLoginModelServer_initAuth(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['authMethod'] = packet.readString()
        data['url'] = packet.readString()
        return data

class AsiasoftPaymentModelBase(Codec):
    pass

class AsiasoftPaymentModelBase_proceedToPayment(Codec):
    pass

class AsiasoftPaymentModelBase_showAccountBalance(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['amountInAtc'] = packet.readInt()
        data['enoughMoney'] = bool(packet.readByte())
        return data

class AsiasoftPaymentModelServer_checkBalance(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['shopItem'] = packet.readLong()
        return data

class AsiasoftPaymentModelServer_requestPayment(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['shopItemId'] = packet.readLong()
        return data

class AssaultSoundFX(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['flagDropSound'] = packet.readLong()
        data['flagReturnSound'] = packet.readLong()
        data['flagTakeSound'] = packet.readLong()
        data['winSound'] = packet.readLong()
        return data

class PointResources(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['bluePedestalTexture'] = packet.readLong()
        data['greenPedestalTexture'] = packet.readLong()
        data['neutralPedestalTexture'] = packet.readLong()
        data['pedestal'] = packet.readLong()
        data['ray'] = packet.readLong()
        data['rayTip'] = packet.readLong()
        data['redPedestalTexture'] = packet.readLong()
        data['upperDevice'] = packet.readLong()
        return data

class AssaultCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['blueFlagAndPedestalTexture'] = None if optional.next() else packet.readLong()
        data['blueFlagPedestalModel'] = None if optional.next() else packet.readLong()
        data['bluePointBigMarker'] = None if optional.next() else packet.readLong()
        data['bluePointSmallMarker'] = None if optional.next() else packet.readLong()
        data['flagModel'] = None if optional.next() else packet.readLong()
        data['flagSprite'] = None if optional.next() else packet.readLong()
        data['greenFlagAndPedestalTexture'] = None if optional.next() else packet.readLong()
        data['newPedestalModel'] = None if optional.next() else packet.readLong()
        data['pointResources'] = PointResources().read(packet, optional)
        data['redFlagAndPedestalTexture'] = None if optional.next() else packet.readLong()
        data['redFlagPedestalModel'] = None if optional.next() else packet.readLong()
        data['redPointBigMarker'] = None if optional.next() else packet.readLong()
        data['redPointSmallMarker'] = None if optional.next() else packet.readLong()
        data['sounds'] = AssaultSoundFX().read(packet, optional)
        return data

class AsyncUrlModelBase(Codec):
    pass

class AsyncUrlModelBase_receiveUrl(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['url'] = PaymentRequestUrl().read(packet, optional)
        return data

class AsyncUrlModelBase_showErrorUrlReceived(Codec):
    pass

class AsyncUrlModelServer_getUrl(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['shopItem'] = packet.readLong()
        return data

class AutoSupplyRestrictionCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['allowed'] = bool(packet.readByte())
        return data

class AutoSupplyRestrictionModelBase_setAllowed(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['allowed'] = bool(packet.readByte())
        return data

class AvailableDevicesModelBase(Codec):
    pass

class AvailableDevicesModelBase_devicesLoaded(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(packet.readLong())
        data['devices'] = items
        data['mountedDevice'] = None if optional.next() else packet.readLong()
        return data

class AvailableDevicesModelServer_loadAvailableDevices(Codec):
    pass

class AvailableItemsModelBase(Codec):
    pass

class GarageItemInfo(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['category'] = packet.readInt()
        data['garageItemId'] = packet.readLong()
        data['item'] = packet.readLong()
        data['itemViewCategory'] = packet.readInt()
        data['modificationIndex'] = packet.readInt()
        data['mounted'] = bool(packet.readByte())
        data['name'] = packet.readString()
        data['position'] = packet.readInt()
        data['premiumItem'] = bool(packet.readByte())
        data['preview'] = packet.readLong()
        data['remaingTimeInMS'] = packet.readInt()
        return data

class AvailableItemsModelBase_showAvailableItems(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(GarageItemInfo().read(packet, optional))
        data['items'] = items
        return data

class AvailableItemsModelServer_select(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['item'] = packet.readLong()
        return data

class AvailableShotSkinsCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(packet.readLong())
        data['skins'] = items
        return data

class AvailableSkinsCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(packet.readLong())
        data['skins'] = items
        return data

class BallExplosionCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['explosionSound'] = packet.readLong()
        data['explosionTexture'] = packet.readLong()
        data['lightingSFXEntity'] = LightingSFXEntity().read(packet, optional)
        data['smokeTextureId'] = packet.readLong()
        return data

class BattleARModelBase(Codec):
    pass

class BattleChatModelBase(Codec):
    pass

class BattleChatModelBase_addMessage(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['userId'] = packet.readLong()
        data['message'] = packet.readString()
        data['team'] = packet.readInt()
        return data

class BattleChatModelBase_addSpectatorTeamMessage(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['uid'] = packet.readString()
        data['message'] = packet.readString()
        return data

class BattleChatModelBase_addSystemMessage(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['message'] = packet.readString()
        data['personal'] = bool(packet.readByte())
        return data

class BattleChatModelBase_addTeamMessage(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['userId'] = packet.readLong()
        data['message'] = packet.readString()
        data['team'] = packet.readInt()
        return data

class BattleChatModelBase_updateTeamHeader(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['header'] = packet.readString()
        return data

class BattleChatModelServer_sendMessage(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['message'] = packet.readString()
        data['teamOnly'] = bool(packet.readByte())
        return data

class BattleChatModelServer_spectatorTeamMessage(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['message'] = packet.readString()
        data['team'] = packet.readInt()
        return data

class Range(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['max'] = packet.readInt()
        data['min'] = packet.readInt()
        return data

class BattleLimits(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['scoreLimit'] = packet.readInt()
        data['timeLimitInSec'] = packet.readInt()
        return data

class BattleCreateCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['battleCreationDisabled'] = bool(packet.readByte())
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(BattleLimits().read(packet, optional))
        data['battlesLimits'] = items
        data['defaultRange'] = Range().read(packet, optional)
        data['maxRange'] = Range().read(packet, optional)
        data['maxRangeLength'] = packet.readInt()
        data['minRankForProBattle'] = packet.readInt()
        data['ultimatesEnabled'] = bool(packet.readByte())
        return data

class BattleCreateModelBase_createFailedBattleCreateDisabled(Codec):
    pass

class BattleCreateModelBase_createFailedServerIsHalting(Codec):
    pass

class BattleCreateModelBase_createFailedTooManyBattlesFromYou(Codec):
    pass

class BattleCreateModelBase_createFailedYouAreBanned(Codec):
    pass

class BattleCreateModelBase_setFilteredBattleName(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['filteredName'] = packet.readString()
        return data

class BattleCreateModelServer_checkBattleNameForForbiddenWords(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['battleName'] = packet.readString()
        return data

class BattleCreateParameters(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['autoBalance'] = bool(packet.readByte())
        data['battleMode'] = packet.readInt()
        data['battleModeForMatchmaking'] = None if optional.next() else packet.readInt()
        data['clanBattle'] = bool(packet.readByte())
        data['dependentCooldownEnabled'] = bool(packet.readByte())
        data['equipmentConstraintsMode'] = None if optional.next() else packet.readString()
        data['friendlyFire'] = bool(packet.readByte())
        data['goldBoxesEnabled'] = bool(packet.readByte())
        data['limits'] = BattleLimits().read(packet, optional)
        data['mapId'] = packet.readLong()
        data['maxPeopleCount'] = packet.readByte()
        data['name'] = None if optional.next() else packet.readString()
        data['parkourMode'] = bool(packet.readByte())
        data['privateBattle'] = bool(packet.readByte())
        data['proBattle'] = bool(packet.readByte())
        data['rankRange'] = Range().read(packet, optional)
        data['reArmorEnabled'] = bool(packet.readByte())
        data['theme'] = packet.readInt()
        data['ultimatesEnabled'] = bool(packet.readByte())
        data['uniqueUsersBattle'] = bool(packet.readByte())
        data['withoutBonuses'] = bool(packet.readByte())
        data['withoutDevices'] = bool(packet.readByte())
        data['withoutDrones'] = bool(packet.readByte())
        data['withoutSupplies'] = bool(packet.readByte())
        data['withoutUpgrades'] = bool(packet.readByte())
        return data

class BattleCreateModelServer_createBattle(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['params'] = BattleCreateParameters().read(packet, optional)
        return data

class BattleInfoUser(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['clanId'] = packet.readLong()
        data['score'] = packet.readInt()
        data['suspicious'] = bool(packet.readByte())
        data['suspiciousByIp'] = bool(packet.readByte())
        data['user'] = packet.readLong()
        return data

class BattleDMInfoCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(BattleInfoUser().read(packet, optional))
        data['users'] = items
        return data

class BattleDMInfoModelBase_addUser(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['infoUser'] = BattleInfoUser().read(packet, optional)
        return data

class BattleDMInfoModelBase_removeUser(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['userId'] = packet.readLong()
        return data

class BattleDMInfoModelBase_updateUserScore(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['userId'] = packet.readLong()
        data['kills'] = packet.readInt()
        return data

class BattleDMModelBase(Codec):
    pass

class BattleDebugModelBase(Codec):
    pass

class BattleDebugModelBase_addFrame(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['size'] = packet.readFloat()
        data['color'] = packet.readInt()
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(Vector3d().read(packet, optional))
        data['debugFrame'] = items
        data['timeout'] = packet.readInt()
        return data

class BattleDebugModelBase_addGizmo(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['size'] = packet.readFloat()
        data['color'] = packet.readInt()
        data['point'] = Vector3d().read(packet, optional)
        data['direction'] = Vector3d().read(packet, optional)
        data['timeout'] = packet.readInt()
        return data

class BattleDebugModelBase_addMarker(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['size'] = packet.readFloat()
        data['color'] = packet.readInt()
        data['point'] = Vector3d().read(packet, optional)
        data['timeout'] = packet.readInt()
        return data

class BattleDebugModelBase_clear(Codec):
    pass

class BattleEntranceModelBase(Codec):
    pass

class BattleEntranceModelBase_enterToBattleFailed(Codec):
    pass

class BattleEntranceModelBase_equipmentNotMatchConstraints(Codec):
    pass

class BattleEntranceModelBase_fightFailedServerIsHalting(Codec):
    pass

class BattleEntranceModelServer_fight(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['team'] = packet.readInt()
        return data

class BattleEntranceModelServer_joinAsSpectator(Codec):
    pass

class BattleFacilitiesModelBase(Codec):
    pass

class BattleGearScoreCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['score'] = packet.readInt()
        return data

class BattleGearScoreModelBase_setGearScore(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['score'] = packet.readInt()
        return data

class BattleGoldBonusCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['sound'] = packet.readLong()
        data['sprite'] = packet.readLong()
        return data

class BattleGoldBonusesModelBase_goldTaken(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['user'] = packet.readLong()
        return data

class BattleInfoCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['roundStarted'] = bool(packet.readByte())
        data['suspicionLevel'] = packet.readInt()
        data['timeLeftInSec'] = packet.readInt()
        return data

class BattleInfoModelBase_resetBattleName(Codec):
    pass

class BattleInfoModelBase_roundFinished(Codec):
    pass

class BattleInfoModelBase_roundStarted(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['timeLeftInSec'] = packet.readInt()
        return data

class BattleInfoModelBase_setBattleName(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['name'] = packet.readString()
        return data

class BattleInfoModelBase_updateSuspicion(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['suspicionLevel'] = packet.readInt()
        return data

class BattleInfoModelBase_updateUserSuspiciousState(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['userId'] = packet.readLong()
        data['suspicious'] = bool(packet.readByte())
        data['suspiciousByIp'] = bool(packet.readByte())
        return data

class BattleInviteCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['soundNotification'] = None if optional.next() else packet.readLong()
        return data

class BattleInviteModelBase_accepted(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['user'] = packet.readLong()
        return data

class BattleInfoData(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['battleId'] = packet.readLong()
        data['inGroup'] = bool(packet.readByte())
        data['mapName'] = None if optional.next() else packet.readString()
        data['mode'] = None if optional.next() else packet.readInt()
        data['privateBattle'] = bool(packet.readByte())
        data['proBattle'] = bool(packet.readByte())
        data['range'] = None if optional.next() else Range().read(packet, optional)
        return data

class BattleInviteMessage(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['availableSlot'] = bool(packet.readByte())
        data['battleData'] = BattleInfoData().read(packet, optional)
        return data

class BattleInviteModelBase_notify(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['user'] = packet.readLong()
        data['data'] = BattleInviteMessage().read(packet, optional)
        return data

class BattleInviteModelBase_rejected(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['user'] = packet.readLong()
        return data

class BattleInviteModelBase_rejectedBattleNotFound(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['user'] = packet.readLong()
        return data

class BattleInviteModelBase_rejectedInvitationToBattleDisabled(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['user'] = packet.readLong()
        return data

class BattleInviteModelBase_rejectedPanelNotLoaded(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['user'] = packet.readLong()
        return data

class BattleInviteModelBase_rejectedUserAlreadyInBattle(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['user'] = packet.readLong()
        return data

class BattleInviteModelBase_rejectedUserInMatchBattle(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['user'] = packet.readLong()
        return data

class BattleInviteModelBase_rejectedUserOffline(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['user'] = packet.readLong()
        return data

class BattleInviteModelServer_accept(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['sender'] = packet.readLong()
        return data

class BattleInviteModelServer_invite(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['receiver'] = packet.readLong()
        data['battleId'] = packet.readLong()
        return data

class BattleInviteModelServer_reject(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['sender'] = packet.readLong()
        return data

class BattleJGRModelBase(Codec):
    pass

class TerrainTexture(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['offsetX'] = packet.readInt()
        data['offsetY'] = packet.readInt()
        data['texture'] = packet.readLong()
        data['tilingX'] = packet.readInt()
        data['tilingY'] = packet.readInt()
        return data

class Terrain(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['enabled'] = bool(packet.readByte())
        data['object3d'] = packet.readLong()
        data['positionX'] = packet.readFloat()
        data['positionY'] = packet.readFloat()
        data['positionZ'] = packet.readFloat()
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(TerrainTexture().read(packet, optional))
        data['textures'] = items
        return data

class SkyboxSides(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['back'] = packet.readLong()
        data['bottom'] = packet.readLong()
        data['front'] = packet.readLong()
        data['left'] = packet.readLong()
        data['right'] = packet.readLong()
        data['top'] = packet.readLong()
        return data

class FogParams(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['alpha'] = packet.readFloat()
        data['color'] = packet.readInt()
        data['farLimit'] = packet.readFloat()
        data['nearLimit'] = packet.readFloat()
        return data

class DynamicShadowParams(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['angleX'] = packet.readFloat()
        data['angleZ'] = packet.readFloat()
        data['lightColor'] = packet.readInt()
        data['shadowColor'] = packet.readInt()
        return data

class DustParams(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['alpha'] = packet.readFloat()
        data['density'] = packet.readFloat()
        data['dustFarDistance'] = packet.readFloat()
        data['dustNearDistance'] = packet.readFloat()
        data['dustParticle'] = packet.readLong()
        data['dustSize'] = packet.readFloat()
        return data

class BattleMapCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['dustParams'] = DustParams().read(packet, optional)
        data['dynamicShadowParams'] = DynamicShadowParams().read(packet, optional)
        data['environmentSound'] = packet.readLong()
        data['fogParams'] = FogParams().read(packet, optional)
        data['gravity'] = packet.readFloat()
        data['mapResource'] = packet.readLong()
        data['skyBoxRevolutionAxis'] = Vector3d().read(packet, optional)
        data['skyBoxRevolutionSpeed'] = packet.readFloat()
        data['skyboxSides'] = SkyboxSides().read(packet, optional)
        data['ssaoColor'] = packet.readInt()
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(Terrain().read(packet, optional))
        data['terrains'] = items
        return data

class BattleMine(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['activated'] = bool(packet.readByte())
        data['expirationMine'] = bool(packet.readByte())
        data['expirationTaskId'] = packet.readLong()
        data['mineId'] = packet.readLong()
        data['ownerId'] = packet.readLong()
        data['position'] = Vector3d().read(packet, optional)
        return data

class BattleMineCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['activateSound'] = packet.readLong()
        data['activateTimeMsec'] = packet.readInt()
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(BattleMine().read(packet, optional))
        data['battleMines'] = items
        data['blueMineTexture'] = packet.readLong()
        data['deactivateSound'] = packet.readLong()
        data['enemyMineTexture'] = packet.readLong()
        data['explosionMarkTexture'] = packet.readLong()
        data['explosionSound'] = packet.readLong()
        data['farVisibilityRadius'] = packet.readFloat()
        data['friendlyMineTexture'] = packet.readLong()
        data['idleExplosionTexture'] = packet.readLong()
        data['impactForce'] = packet.readFloat()
        data['mainExplosionTexture'] = packet.readLong()
        data['minDistanceFromBase'] = packet.readFloat()
        data['model3ds'] = packet.readLong()
        data['nearVisibilityRadius'] = packet.readFloat()
        data['radius'] = packet.readFloat()
        data['redMineTexture'] = packet.readLong()
        data['triggerHeight'] = packet.readFloat()
        return data

class BattleMinesModelBase_activateMine(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['mineId'] = packet.readLong()
        return data

class BattleMinesModelBase_explodeMine(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['mineId'] = packet.readLong()
        data['targetId'] = packet.readLong()
        data['dummy'] = bool(packet.readByte())
        return data

class BattleMinesModelBase_putMine(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['mineId'] = packet.readLong()
        data['x'] = packet.readFloat()
        data['y'] = packet.readFloat()
        data['z'] = packet.readFloat()
        data['userId'] = packet.readLong()
        return data

class BattleMinesModelBase_removeAllMines(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['ownerId'] = packet.readLong()
        return data

class BattleMinesModelBase_removeMines(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['ownerId'] = packet.readLong()
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(packet.readLong())
        data['mineIds'] = items
        return data

class ModerationToolInteropCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['battleUrlTemplate'] = packet.readString()
        data['moderationMode'] = bool(packet.readByte())
        data['userCarmaUrlTemplate'] = packet.readString()
        return data

class InformatorRecord(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['id'] = packet.readLong()
        data['uid'] = packet.readString()
        return data

class BonusRecord(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['name'] = packet.readString()
        data['value'] = packet.readInt()
        return data

class ArchiveUserInfo(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(BonusRecord().read(packet, optional))
        data['collectedBonuses'] = items
        data['deaths'] = packet.readInt()
        data['enterBattleTime'] = packet.readInt()
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(InformatorRecord().read(packet, optional))
        data['informators'] = items
        data['kills'] = packet.readInt()
        data['leaveBattleTime'] = packet.readInt()
        data['rankIndex'] = packet.readInt()
        data['suspicious'] = bool(packet.readByte())
        data['suspiciousByIp'] = bool(packet.readByte())
        data['userIP'] = None if optional.next() else packet.readString()
        data['userId'] = packet.readLong()
        data['userName'] = packet.readString()
        return data

class UserInfo(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['chatModeratorLevel'] = packet.readInt()
        data['clanTag'] = None if optional.next() else packet.readString()
        data['deaths'] = packet.readShort()
        data['hasPremium'] = bool(packet.readByte())
        data['killScore'] = packet.readShort()
        data['kills'] = packet.readShort()
        data['rank'] = packet.readByte()
        data['score'] = packet.readInt()
        data['uid'] = packet.readString()
        data['user'] = packet.readLong()
        return data

class BattleInfo(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['battleId'] = packet.readLong()
        data['battleModeName'] = packet.readString()
        data['creatorId'] = packet.readLong()
        data['creatorName'] = None if optional.next() else packet.readString()
        data['creatorRankIndex'] = packet.readInt()
        data['customBattleName'] = None if optional.next() else packet.readString()
        data['mapName'] = packet.readString()
        data['serverName'] = packet.readString()
        data['serverNumber'] = packet.readInt()
        data['suspiciousBattle'] = bool(packet.readByte())
        data['suspiciousByIpBattle'] = bool(packet.readByte())
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(UserInfo().read(packet, optional))
        data['users'] = items
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(ArchiveUserInfo().read(packet, optional))
        data['usersArchive'] = items
        return data

class BattleModerationModelBase_battleInfo(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['info'] = BattleInfo().read(packet, optional)
        return data

class BattleModerationModelBase_userFound(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['id'] = packet.readLong()
        data['uid'] = packet.readString()
        data['rank'] = packet.readInt()
        return data

class BattleModerationModelBase_userNotFound(Codec):
    pass

class BattleModerationModelServer_findUser(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['uid'] = packet.readString()
        return data

class BattleNotifierModelBase(Codec):
    pass

class BattleNotifierModelBase_leaveBattle(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['userId'] = packet.readLong()
        return data

class BattleNotifierModelBase_leaveGroup(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['userId'] = packet.readLong()
        return data

class BattleNotifierData(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['battleData'] = BattleInfoData().read(packet, optional)
        data['userId'] = packet.readLong()
        return data

class BattleNotifierModelBase_setBattle(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(BattleNotifierData().read(packet, optional))
        data['users'] = items
        return data

class BattleParamInfoCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['creatorId'] = packet.readLong()
        data['map'] = packet.readLong()
        data['params'] = BattleCreateParameters().read(packet, optional)
        return data

class BattlePassPackageCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['description'] = packet.readString()
        data['name'] = packet.readString()
        return data

class BattlePassPurchaseNotifierCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['purchased'] = bool(packet.readByte())
        return data

class BattlePassPurchaseNotifierModelBase_battlePassPurchased(Codec):
    pass

class BattleSelectModelBase(Codec):
    pass

class BattleSelectModelBase_battleItemsPacketJoinSuccess(Codec):
    pass

class BattleSelectModelBase_select(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['item'] = packet.readLong()
        return data

class BattleSelectModelServer_onSelect(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['battle'] = packet.readLong()
        return data

class BattleSelectModelServer_search(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['battleId'] = packet.readLong()
        return data

class BattleTDMModelBase(Codec):
    pass

class BattleTJRModelBase(Codec):
    pass

class BattleUltimateRadarCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['blueTankMarker'] = packet.readLong()
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(packet.readLong())
        data['discoveredTanksIds'] = items
        data['farMarkerDistance'] = packet.readFloat()
        data['nearMarkerDistance'] = packet.readFloat()
        data['neutralTankMarker'] = packet.readLong()
        data['redTankMarker'] = packet.readLong()
        return data

class BattleUltimateRadarModelBase_updateDiscoveredTanksList(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(packet.readLong())
        data['discoveredTanks'] = items
        return data

class BonusSpawnData(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['battleBonusObject'] = packet.readLong()
        data['bonusId'] = packet.readLong()
        data['lifeTime'] = packet.readInt()
        data['spawnPosition'] = Vector3d().read(packet, optional)
        return data

class BattlefieldBonusesCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['bonusFallSpeed'] = packet.readFloat()
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(BonusSpawnData().read(packet, optional))
        data['bonuses'] = items
        return data

class BattlefieldBonusesModelBase_attemptToTakeBonusFailedTankNotActive(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['bonusId'] = packet.readLong()
        return data

class BattlefieldBonusesModelBase_bonusTaken(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['bonusId'] = packet.readLong()
        return data

class BattlefieldBonusesModelBase_removeBonuses(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(packet.readLong())
        data['bonusIds'] = items
        return data

class BattlefieldBonusesModelBase_spawnBonuses(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(BonusSpawnData().read(packet, optional))
        data['spawnData'] = items
        return data

class BattlefieldBonusesModelBase_spawnBonusesOnGround(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(BonusSpawnData().read(packet, optional))
        data['spawnData'] = items
        return data

class BattlefieldBonusesModelServer_attemptToTakeBonus(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['bonusId'] = packet.readLong()
        return data

class BattlefieldSounds(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['battleFinishSound'] = packet.readLong()
        data['killSound'] = packet.readLong()
        return data

class BattlefieldCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['active'] = bool(packet.readByte())
        data['battleDebug'] = bool(packet.readByte())
        data['battleId'] = packet.readLong()
        data['battlefieldSounds'] = BattlefieldSounds().read(packet, optional)
        data['colorTransformMultiplier'] = packet.readFloat()
        data['idleKickPeriodMsec'] = packet.readInt()
        data['map'] = packet.readLong()
        data['mineExplosionLighting'] = LightingSFXEntity().read(packet, optional)
        data['proBattle'] = bool(packet.readByte())
        data['range'] = Range().read(packet, optional)
        data['reArmorEnabled'] = bool(packet.readByte())
        data['respawnDuration'] = packet.readInt()
        data['shadowMapCorrectionFactor'] = packet.readFloat()
        data['showAddressLink'] = bool(packet.readByte())
        data['spectator'] = bool(packet.readByte())
        data['withoutBonuses'] = bool(packet.readByte())
        data['withoutDrones'] = bool(packet.readByte())
        data['withoutSupplies'] = bool(packet.readByte())
        return data

class BattlefieldModelBase_battleFinish(Codec):
    pass

class BattlefieldModelBase_battleRestart(Codec):
    pass

class BattleRoundParameters(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['reArmorEnabled'] = bool(packet.readByte())
        return data

class BattlefieldModelBase_battleStart(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['params'] = BattleRoundParameters().read(packet, optional)
        return data

class HitTraceData(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['armorPreEffectDamage'] = packet.readFloat()
        data['colorResistDamage'] = packet.readFloat()
        data['hullResistDamage'] = packet.readFloat()
        data['killerTurretName'] = packet.readString()
        data['origDamage'] = packet.readFloat()
        data['postHealth'] = packet.readFloat()
        data['targetHealth'] = packet.readFloat()
        data['targetHullName'] = packet.readString()
        data['weaponEffectsDamage'] = packet.readFloat()
        return data

class BattlefieldModelBase_traceHit(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['hitTraceData'] = HitTraceData().read(packet, optional)
        return data

class BattlefieldModelServer_dg(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(packet.readInt())
        data['deltas'] = items
        return data

class BattlefieldModelServer_kd(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['type'] = packet.readInt()
        return data

class BattlefieldModelServer_sendTimeStatisticsCommand(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['statisticType'] = packet.readInt()
        data['averageFPS'] = packet.readFloat()
        return data

class BattlefieldModelServer_xc(Codec):
    pass

class BillboardImageCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['image'] = packet.readLong()
        return data

class BillboardCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['defaultBillboardImage'] = packet.readLong()
        return data

class BlockValidatorModelBase(Codec):
    pass

class BlockValidatorModelBase_youAreBlocked(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['reasonForUser'] = packet.readString()
        return data

class BlockValidatorModelBase_youWereKicked(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['reasonForUser'] = packet.readString()
        data['minutes'] = packet.readInt()
        data['hours'] = packet.readInt()
        data['days'] = packet.readInt()
        return data

class BonkWeaponCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['chargingHoldingTime'] = packet.readInt()
        data['chargingSound'] = packet.readLong()
        data['chargingTime'] = packet.readInt()
        data['explosionTexture'] = packet.readLong()
        data['flameSmokeTexture'] = packet.readLong()
        data['flameTexture'] = packet.readLong()
        data['lightingSFXEntity'] = LightingSFXEntity().read(packet, optional)
        data['maxHitPointDownOffset'] = packet.readFloat()
        data['maxHitPointUpOffset'] = packet.readFloat()
        data['preHitSound'] = packet.readLong()
        data['reloadingCompleteSound'] = packet.readLong()
        data['reloadingSound'] = packet.readLong()
        data['risingHoldingTime'] = packet.readInt()
        data['risingTime'] = packet.readInt()
        data['staticHitSound'] = packet.readLong()
        data['tankHitSound'] = packet.readLong()
        return data

class BonkWeaponModelBase_preCharge(Codec):
    pass

class BonkWeaponModelBase_staticHit(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['hitPoint'] = Vector3d().read(packet, optional)
        return data

class BonkWeaponModelBase_tankHit(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['target'] = packet.readLong()
        data['hitPointLocal'] = Vector3d().read(packet, optional)
        data['directionWorld'] = Vector3d().read(packet, optional)
        return data

class BonkWeaponModelServer_charge(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['time'] = packet.readInt()
        return data

class BonkWeaponModelServer_dummyHit(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['time'] = packet.readInt()
        return data

class BonkWeaponModelServer_preCharge(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['time'] = packet.readInt()
        return data

class BonkWeaponModelServer_staticHit(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['time'] = packet.readInt()
        data['hitPointWorld'] = Vector3d().read(packet, optional)
        return data

class BonkWeaponModelServer_tankHit(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['time'] = packet.readInt()
        data['hitPointWorld'] = Vector3d().read(packet, optional)
        data['hitPointLocal'] = Vector3d().read(packet, optional)
        data['directionWorld'] = Vector3d().read(packet, optional)
        data['target'] = packet.readLong()
        data['targetPosition'] = Vector3d().read(packet, optional)
        return data

class BonusCatchDailyQuestModelBase(Codec):
    pass

class BonusCommonCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['boxResource'] = packet.readLong()
        data['cordResource'] = packet.readLong()
        data['parachuteInnerResource'] = packet.readLong()
        data['parachuteResource'] = packet.readLong()
        data['pickupSoundResource'] = packet.readLong()
        return data

class BonusImageCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['image'] = packet.readLong()
        return data

class BonusInfoCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['bottomText'] = None if optional.next() else packet.readString()
        data['image'] = None if optional.next() else packet.readLong()
        data['topText'] = None if optional.next() else packet.readString()
        return data

class BonusItemCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['count'] = packet.readInt()
        data['resource'] = packet.readLong()
        return data

class BonusItemsShowingCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(packet.readLong())
        data['bonuses'] = items
        return data

class BonusLightCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['attenuationBegin'] = packet.readFloat()
        data['attenuationEnd'] = packet.readFloat()
        data['intensity'] = packet.readFloat()
        data['lightColor'] = packet.readString()
        return data

class NotificationBonusCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['notificationMessage'] = None if optional.next() else packet.readString()
        data['notificationMessageContainsUid'] = None if optional.next() else packet.readString()
        data['soundNotification'] = None if optional.next() else packet.readLong()
        return data

class BonusRegionData(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['position'] = Vector3d().read(packet, optional)
        data['regionType'] = packet.readInt()
        data['rotation'] = Vector3d().read(packet, optional)
        return data

class BonusRegionResource(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['dropZoneResource'] = packet.readLong()
        data['regionType'] = packet.readInt()
        return data

class BonusRegionsCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(BonusRegionResource().read(packet, optional))
        data['bonusRegionResources'] = items
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(BonusRegionData().read(packet, optional))
        data['bonusRegions'] = items
        return data

class BossStateCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['enabled'] = bool(packet.readByte())
        data['hullId'] = packet.readLong()
        data['local'] = bool(packet.readByte())
        data['role'] = packet.readInt()
        data['weaponId'] = packet.readLong()
        return data

class BossStateModelBase_changeRole(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['newRole'] = packet.readInt()
        return data

class BottomDescriptionCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['description'] = None if optional.next() else packet.readString()
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(packet.readLong())
        data['images'] = items
        return data

class BuyProAbonementModelBase(Codec):
    pass

class BuyProAbonementModelServer_selectProBattlePass(Codec):
    pass

class BuyableCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['buyable'] = bool(packet.readByte())
        data['currencyId'] = packet.readInt()
        data['priceWithoutDiscount'] = packet.readInt()
        return data

class CaptchaCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(packet.readInt())
        data['stateWithCaptcha'] = items
        return data

class CaptchaModelBase_captchaCorrect(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['state'] = packet.readInt()
        return data

class CaptchaModelBase_captchaFailed(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['state'] = packet.readInt()
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(packet.readByte())
        data['newCaptcha'] = items
        return data

class CaptchaModelBase_showCaptcha(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['state'] = packet.readInt()
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(packet.readByte())
        data['captcha'] = items
        return data

class CaptchaModelServer_checkCaptcha(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['location'] = packet.readInt()
        data['answer'] = packet.readString()
        return data

class CaptchaModelServer_getNewCaptcha(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['location'] = packet.readInt()
        return data

class CaptureGoalDailyQuestModelBase(Codec):
    pass

class CaptureGoalWithEquipDailyQuestModelBase(Codec):
    pass

class CaptureTheFlagSoundFX(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['enemiesWinSound'] = None if optional.next() else packet.readLong()
        data['flagDropSound'] = packet.readLong()
        data['flagDroppedByEnemiesSound'] = None if optional.next() else packet.readLong()
        data['flagReturnSound'] = packet.readLong()
        data['flagReturnedByEnemiesSound'] = None if optional.next() else packet.readLong()
        data['flagTakeSound'] = packet.readLong()
        data['flagTakenByEnemiesSound'] = None if optional.next() else packet.readLong()
        data['winSound'] = packet.readLong()
        return data

class CaptureTheFlagCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['blueFlagAndPedestalTexture'] = None if optional.next() else packet.readLong()
        data['blueFlagSprite'] = None if optional.next() else packet.readLong()
        data['bluePedestalModel'] = None if optional.next() else packet.readLong()
        data['flagModel'] = None if optional.next() else packet.readLong()
        data['greenFlagAndPedestalTexture'] = None if optional.next() else packet.readLong()
        data['greenFlagSprite'] = None if optional.next() else packet.readLong()
        data['greenPedestalModel'] = None if optional.next() else packet.readLong()
        data['newPedestalModel'] = None if optional.next() else packet.readLong()
        data['redFlagAndPedestalTexture'] = None if optional.next() else packet.readLong()
        data['redFlagSprite'] = None if optional.next() else packet.readLong()
        data['redPedestalModel'] = None if optional.next() else packet.readLong()
        data['sounds'] = CaptureTheFlagSoundFX().read(packet, optional)
        return data

class ChallengeShopItemsCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['shopBattlePass'] = packet.readLong()
        data['shopBattlePassId'] = packet.readLong()
        return data

class ChallengeShopItemsModelBase_itemsLoaded(Codec):
    pass

class TierItem(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['amount'] = packet.readInt()
        data['name'] = packet.readString()
        data['preview'] = packet.readLong()
        data['received'] = bool(packet.readByte())
        return data

class Tier(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['battlePassItem'] = None if optional.next() else TierItem().read(packet, optional)
        data['freeItem'] = None if optional.next() else TierItem().read(packet, optional)
        data['needShowBattlePassItem'] = bool(packet.readByte())
        data['stars'] = packet.readInt()
        return data

class ChallengeRewardsCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(Tier().read(packet, optional))
        data['tiers'] = items
        return data

class ChallengesRewardingModelBase_sendTiersInfo(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(Tier().read(packet, optional))
        data['tiers'] = items
        return data

class ChallengesRewardingModelServer_requestTiersInfo(Codec):
    pass

class ChallengesRewardingUserModelBase(Codec):
    pass

class ChallengesRewardingUserModelBase_rewardNotify(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['tierStars'] = packet.readInt()
        return data

class ChallengesTimeCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['timeLeftSec'] = packet.readInt()
        return data

class ChangeUidModelBase(Codec):
    pass

class ChangeUidModelBase_parametersIncorrect(Codec):
    pass

class ChangeUidModelBase_passwordIncorrect(Codec):
    pass

class ChangeUidModelBase_startChangingUid(Codec):
    pass

class ChangeUidModelBase_startChangingUidViaPartner(Codec):
    pass

class ChangeUidModelBase_uidChanged(Codec):
    pass

class ChangeUidModelBase_uidIncorrect(Codec):
    pass

class ChangeUidModelServer_changeUid(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['email'] = packet.readString()
        data['hash'] = packet.readString()
        data['newUid'] = packet.readString()
        return data

class ChangeUidModelServer_changeUidAndPassword(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['email'] = packet.readString()
        data['hash'] = packet.readString()
        data['newUid'] = packet.readString()
        data['password'] = packet.readString()
        return data

class ChangeUidModelServer_changeUidViaPartner(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['newUid'] = packet.readString()
        return data

class ChangeUidModelServer_checkChangeUidParams(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['changeUidHash'] = packet.readString()
        data['email'] = packet.readString()
        return data

class ChatCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['admin'] = bool(packet.readByte())
        data['antifloodEnabled'] = bool(packet.readByte())
        data['bufferSize'] = packet.readInt()
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(packet.readString())
        data['channels'] = items
        data['chatEnabled'] = bool(packet.readByte())
        data['chatModeratorLevel'] = packet.readInt()
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(packet.readString())
        data['linksWhiteList'] = items
        data['minChar'] = packet.readInt()
        data['minWord'] = packet.readInt()
        data['privateMessagesEnabled'] = bool(packet.readByte())
        data['selfName'] = packet.readString()
        data['showLinks'] = bool(packet.readByte())
        data['typingSpeedAntifloodEnabled'] = bool(packet.readByte())
        return data

class ChatModelBase_cleanUsersMessages(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['uid'] = packet.readString()
        return data

class UserStatus(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['chatModeratorLevel'] = packet.readInt()
        data['ip'] = packet.readString()
        data['rankIndex'] = packet.readInt()
        data['uid'] = packet.readString()
        data['userId'] = packet.readLong()
        return data

class BattleChatLink(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['battleIdHex'] = packet.readString()
        data['battleMode'] = packet.readString()
        data['battleName'] = packet.readString()
        data['link'] = None if optional.next() else packet.readString()
        return data

class ChatMessage(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['addressMode'] = packet.readInt()
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(BattleChatLink().read(packet, optional))
        data['battleLinks'] = items
        data['channel'] = None if optional.next() else packet.readString()
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(packet.readString())
        data['links'] = items
        data['messageType'] = packet.readInt()
        data['sourceUser'] = None if optional.next() else UserStatus().read(packet, optional)
        data['targetUser'] = None if optional.next() else UserStatus().read(packet, optional)
        data['text'] = packet.readString()
        data['timePassedInSec'] = packet.readInt()
        return data

class ChatModelBase_showMessages(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(ChatMessage().read(packet, optional))
        data['messages'] = items
        return data

class ChatModelBase_updateTypingSpeedAntifloodParams(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['symbolCost'] = packet.readInt()
        data['enterCost'] = packet.readInt()
        return data

class ChatModelServer_changeChannel(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['channel'] = packet.readString()
        return data

class ChatModelServer_sendMessage(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['targetUserName'] = packet.readString()
        data['addressMode'] = packet.readInt()
        data['channel'] = packet.readString()
        data['text'] = packet.readString()
        return data

class China3rdPlatformLoginModelBase(Codec):
    pass

class China3rdPlatformPaymentModelBase(Codec):
    pass

class China3rdPlatformPaymentModelBase_receiveUrl(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['url'] = PaymentRequestUrl().read(packet, optional)
        return data

class China3rdPlatformPaymentModelServer_getPaymentUrl(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['shopItemId'] = packet.readLong()
        return data

class ChinaSDKEntranceModelBase(Codec):
    pass

class ChinaSDKEntranceModelBase_expiredToken(Codec):
    pass

class ChinaSDKEntranceModelServer_login(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['token'] = packet.readString()
        return data

class ChinaSDKUserModelBase(Codec):
    pass

class ContainerCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(packet.readLong())
        data['objects'] = items
        return data

class ClanAcceptedModelBase(ContainerCC):
    pass

class ClanAcceptedModelBase_onAdding(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['userId'] = packet.readLong()
        return data

class ClanAcceptedModelBase_onRemoved(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['userId'] = packet.readLong()
        return data

class ClanAcceptedNotificatorModelBase(ContainerCC):
    pass

class ClanAcceptedNotificatorModelBase_onAdding(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['userId'] = packet.readLong()
        return data

class ClanAcceptedNotificatorModelBase_onRemoved(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['userId'] = packet.readLong()
        return data

class ClanAcceptedNotificatorModelServer_remove(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['userId'] = packet.readLong()
        return data

class ClanBlockModelBase(Codec):
    pass

class ClanBlockModelBase_clanBaned(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['reason'] = packet.readString()
        return data

class ClanChatCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['inClan'] = bool(packet.readByte())
        data['selfName'] = packet.readString()
        return data

class ClanChatModelBase_receiveMessage(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['message'] = ChatMessage().read(packet, optional)
        return data

class ClanChatModelBase_showMessagesHistory(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(ChatMessage().read(packet, optional))
        data['chatMessages'] = items
        return data

class ClanChatModelServer_sendMessage(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['targetUserName'] = packet.readString()
        data['text'] = packet.readString()
        return data

class ClanCreateCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['minRankForCreateClan'] = packet.readInt()
        return data

class ClanCreateModelBase_alreadyInClan(Codec):
    pass

class ClanCreateModelBase_correctName(Codec):
    pass

class ClanCreateModelBase_correctTag(Codec):
    pass

class ClanCreateModelBase_nameIsIncorrect(Codec):
    pass

class ClanCreateModelBase_notUniqueName(Codec):
    pass

class ClanCreateModelBase_notUniqueTag(Codec):
    pass

class ClanCreateModelBase_otherError(Codec):
    pass

class ClanCreateModelBase_tagIsIncorrect(Codec):
    pass

class ClanCreateModelServer_createClan(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['name'] = packet.readString()
        data['tag'] = packet.readString()
        data['flagId'] = packet.readLong()
        return data

class ClanCreateModelServer_validateName(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['name'] = packet.readString()
        return data

class ClanCreateModelServer_validateTag(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['tag'] = packet.readString()
        return data

class ClanFriendsCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(packet.readLong())
        data['users'] = items
        return data

class ClanFriendsModelBase_onUserAdd(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['id'] = packet.readLong()
        return data

class ClanFriendsModelBase_onUserRemove(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['id'] = packet.readLong()
        return data

class ClanFriendsModelBase_userJoinClan(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(packet.readLong())
        data['usersId'] = items
        return data

class UserData(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['dateInClanInSec'] = packet.readInt()
        data['deaths'] = packet.readInt()
        data['kills'] = packet.readInt()
        data['lastVisitTime'] = packet.readLong()
        data['permission'] = None if optional.next() else packet.readInt()
        data['score'] = packet.readInt()
        data['userId'] = packet.readLong()
        return data

class ClanIncmingCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(UserData().read(packet, optional))
        data['users'] = items
        return data

class ClanIncomingModelBase_onAdding(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['userData'] = UserData().read(packet, optional)
        return data

class ClanIncomingModelBase_onRemoved(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['userId'] = packet.readLong()
        return data

class ClanIncomingNotificatorModelBase(ContainerCC):
    pass

class ClanIncomingNotificatorModelBase_onAdding(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['userId'] = packet.readLong()
        return data

class ClanIncomingNotificatorModelBase_onRemoved(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['userId'] = packet.readLong()
        return data

class ClanIncomingNotificatorModelServer_remove(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['userId'] = packet.readLong()
        return data

class ClanInfoCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['blocked'] = bool(packet.readByte())
        data['createTime'] = packet.readLong()
        data['creatorId'] = packet.readLong()
        data['description'] = None if optional.next() else packet.readString()
        data['flagId'] = packet.readLong()
        data['incomingRequestEnabled'] = bool(packet.readByte())
        data['maxCharactersDescription'] = packet.readInt()
        data['maxMembers'] = packet.readInt()
        data['minRankForAddClan'] = packet.readInt()
        data['name'] = packet.readString()
        data['reasonForBlocking'] = None if optional.next() else packet.readString()
        data['self'] = bool(packet.readByte())
        data['tag'] = packet.readString()
        data['timeBlocking'] = packet.readLong()
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(packet.readLong())
        data['users'] = items
        return data

class ClanInfoModelServer_buyAdditionalPlace(Codec):
    pass

class ClanInfoModelServer_changeMinRankForAddClan(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['rankIndex'] = packet.readInt()
        return data

class ClanInfoModelServer_incomingRequestEnable(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['enabled'] = bool(packet.readByte())
        return data

class ClanInfoModelServer_makeUserClanOwner(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['userId'] = packet.readLong()
        return data

class ClanInfoModelServer_updateClan(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['name'] = None if optional.next() else packet.readString()
        data['tag'] = None if optional.next() else packet.readString()
        data['flagId'] = None if optional.next() else packet.readLong()
        data['description'] = None if optional.next() else packet.readString()
        return data

class ClanLoadingPanelCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['clanButtonVisible'] = bool(packet.readByte())
        data['minRankForCreateClan'] = packet.readInt()
        return data

class ClanLoadingPanelModelServer_showClan(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['clanId'] = packet.readLong()
        return data

class ClanMembersCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(UserData().read(packet, optional))
        data['users'] = items
        return data

class ClanMembersDataModelBase_sendData(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['userData'] = UserData().read(packet, optional)
        return data

class ClanModelBase(Codec):
    pass

class ClanModelBase_alreadyInAccepted(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['uid'] = packet.readString()
        return data

class ClanModelBase_alreadyInClan(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['uid'] = packet.readString()
        return data

class ClanModelBase_alreadyInClanIncoming(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['uid'] = packet.readString()
        data['userId'] = packet.readLong()
        return data

class ClanModelBase_alreadyInClanOutgoing(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['uid'] = packet.readString()
        return data

class ClanModelBase_alreadyInUserOutgoing(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['uid'] = packet.readString()
        data['id'] = packet.readLong()
        return data

class ClanModelBase_maxMembers(Codec):
    pass

class ClanModelBase_userExist(Codec):
    pass

class ClanModelBase_userLowRank(Codec):
    pass

class ClanModelBase_userNotExist(Codec):
    pass

class ClanModelServer_accept(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['userId'] = packet.readLong()
        return data

class ClanModelServer_add(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['userId'] = packet.readLong()
        return data

class ClanModelServer_addInClanByUid(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['uid'] = packet.readString()
        return data

class ClanModelServer_checkUid(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['uid'] = packet.readString()
        return data

class ClanModelServer_reject(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['userId'] = packet.readLong()
        return data

class ClanModelServer_rejectAll(Codec):
    pass

class ClanModelServer_removeUserFromClan(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['userId'] = packet.readLong()
        return data

class ClanModelServer_revoke(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['userId'] = packet.readLong()
        return data

class ClanModelServer_userLeavesClan(Codec):
    pass

class ClanNotifierData(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(packet.readInt())
        data['clanAction'] = items
        data['clanId'] = packet.readLong()
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(packet.readLong())
        data['clanIncoming'] = items
        data['clanMember'] = bool(packet.readByte())
        data['clanName'] = None if optional.next() else packet.readString()
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(packet.readLong())
        data['clanOutgoing'] = items
        data['clanTag'] = None if optional.next() else packet.readString()
        data['creatorId'] = packet.readLong()
        data['description'] = None if optional.next() else packet.readString()
        data['flagId'] = packet.readLong()
        data['incomingRequestEnabled'] = bool(packet.readByte())
        data['maxMembers'] = packet.readInt()
        data['minRankForJoinClan'] = packet.readInt()
        data['restrictionTimeJoinClan'] = packet.readLong()
        data['userId'] = packet.readLong()
        return data

class ClanNotifierModelBase_sendData(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(ClanNotifierData().read(packet, optional))
        data['userData'] = items
        return data

class ClanOutgoingCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(UserData().read(packet, optional))
        data['users'] = items
        return data

class ClanOutgoingModelBase_onAdding(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['userData'] = UserData().read(packet, optional)
        return data

class ClanOutgoingModelBase_onRemoved(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['userId'] = packet.readLong()
        return data

class ClanPanelModelBase(Codec):
    pass

class ClanPanelModelServer_sendInviteToClan(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['userId'] = packet.readLong()
        return data

class ClanPanelNotificationCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['newAcceptedUser'] = packet.readInt()
        data['newClanInvite'] = packet.readInt()
        data['newIncomingUser'] = packet.readInt()
        data['restrictionTimeJoinClanInSec'] = packet.readInt()
        return data

class ClanPanelNotificationModelBase_newAcceptedUser(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['count'] = packet.readInt()
        return data

class ClanPanelNotificationModelBase_newClanInvite(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['count'] = packet.readInt()
        return data

class ClanPanelNotificationModelBase_newIncomingUser(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['count'] = packet.readInt()
        return data

class ClanPanelNotificationModelBase_updateRestrictionTimeJoinClan(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['restrictionTimeJoinClanInSec'] = packet.readInt()
        return data

class ClanPermissionsCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(packet.readInt())
        data['actions'] = items
        return data

class ClanPermissionsModelBase_updateActions(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(packet.readInt())
        data['actions'] = items
        return data

class ClanPermissionsModelServer_setPermissionForUser(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['userId'] = packet.readLong()
        data['permission'] = packet.readInt()
        return data

class ClanUserAcceptedModelBase(ContainerCC):
    pass

class ClanUserAcceptedModelBase_onAdding(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['userId'] = packet.readLong()
        return data

class ClanUserAcceptedModelBase_onRemoved(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['userId'] = packet.readLong()
        return data

class ClanUserAcceptedNotificatorModelBase(ContainerCC):
    pass

class ClanUserAcceptedNotificatorModelBase_onAdding(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['clanId'] = packet.readLong()
        return data

class ClanUserAcceptedNotificatorModelBase_onRemoved(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['clanId'] = packet.readLong()
        return data

class ClanUserAcceptedNotificatorModelServer_removeNotification(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['clanId'] = packet.readLong()
        return data

class ClanUserIncomingModelBase(ContainerCC):
    pass

class ClanUserIncomingModelBase_onAdding(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['userId'] = packet.readLong()
        return data

class ClanUserIncomingModelBase_onRemoved(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['userId'] = packet.readLong()
        return data

class ClanUserIncomingNotificatorModelBase(ContainerCC):
    pass

class ClanUserIncomingNotificatorModelBase_onAdding(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['clanId'] = packet.readLong()
        return data

class ClanUserIncomingNotificatorModelBase_onRemoved(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['clanId'] = packet.readLong()
        return data

class ClanUserIncomingNotificatorModelServer_removeNotification(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['clanId'] = packet.readLong()
        return data

class ClanUserLoaderModelBase(Codec):
    pass

class ClanUserLoaderModelBase_showWindow(Codec):
    pass

class ClanUserLoaderModelServer_hideClan(Codec):
    pass

class ClanUserLoaderModelServer_showClan(Codec):
    pass

class ClanUserCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['clan'] = bool(packet.readByte())
        data['giveBonusesClan'] = bool(packet.readByte())
        data['loadingInServiceSpace'] = bool(packet.readByte())
        data['restrictionTimeJoinClanInSec'] = packet.readInt()
        data['showBuyLicenseButton'] = bool(packet.readByte())
        data['showOtherClan'] = bool(packet.readByte())
        return data

class ClanUserModelBase_alreadyInAccepted(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['name'] = packet.readString()
        return data

class ClanUserModelBase_alreadyInClan(Codec):
    pass

class ClanUserModelBase_alreadyInClanOutgoing(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['name'] = packet.readString()
        data['lightClan'] = packet.readLong()
        return data

class ClanUserModelBase_alreadyInIncoming(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['name'] = packet.readString()
        data['clan'] = packet.readLong()
        return data

class ClanUserModelBase_alreadyInOutgoing(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['name'] = packet.readString()
        return data

class ClanUserModelBase_clanBlocked(Codec):
    pass

class ClanUserModelBase_clanExist(Codec):
    pass

class ClanUserModelBase_clanIncomingRequestDisabled(Codec):
    pass

class ClanUserModelBase_clanNotExist(Codec):
    pass

class ClanUserModelBase_creatorLeaveOfClanIfEmptyClan(Codec):
    pass

class ClanUserModelBase_joinClan(Codec):
    pass

class ClanUserModelBase_leftClan(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['restrictionTimeInSec'] = packet.readInt()
        return data

class ClanUserModelBase_removeClanBonuses(Codec):
    pass

class ClanUserModelBase_showAlertFullClan(Codec):
    pass

class ClanUserModelBase_updateStatusBonusesClan(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['canGiveBonusesClan'] = bool(packet.readByte())
        return data

class ClanUserModelBase_userLowRank(Codec):
    pass

class ClanUserModelServer_accept(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['lightClan'] = packet.readLong()
        return data

class ClanUserModelServer_add(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['lightClan'] = packet.readLong()
        return data

class ClanUserModelServer_addInClanByName(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['name'] = packet.readString()
        return data

class ClanUserModelServer_addInClanByTag(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['tag'] = packet.readString()
        return data

class ClanUserModelServer_checkClanName(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['name'] = packet.readString()
        return data

class ClanUserModelServer_checkClanTag(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['tag'] = packet.readString()
        return data

class ClanUserModelServer_reject(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['lightClan'] = packet.readLong()
        return data

class ClanUserModelServer_rejectAll(Codec):
    pass

class ClanUserModelServer_revoke(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['lightClan'] = packet.readLong()
        return data

class ClanUserModelServer_revokeAll(Codec):
    pass

class ClanUserOutgoingModelBase(ContainerCC):
    pass

class ClanUserOutgoingModelBase_onAdding(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['userId'] = packet.readLong()
        return data

class ClanUserOutgoingModelBase_onRemoved(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['userId'] = packet.readLong()
        return data

class CoinInfoCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['coins'] = packet.readInt()
        return data

class CoinInfoModelBase_changeBy(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['delta'] = packet.readInt()
        return data

class CoinPackageCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['amount'] = packet.readInt()
        return data

class ColorAdjustParams(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['alphaMultiplier'] = packet.readFloat()
        data['alphaOffset'] = packet.readFloat()
        data['blueMultiplier'] = packet.readFloat()
        data['blueOffset'] = packet.readFloat()
        data['greenMultiplier'] = packet.readFloat()
        data['greenOffset'] = packet.readFloat()
        data['redMultiplier'] = packet.readFloat()
        data['redOffset'] = packet.readFloat()
        return data

class ColorAdjustCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['frostParamsHW'] = ColorAdjustParams().read(packet, optional)
        data['frostParamsSoft'] = ColorAdjustParams().read(packet, optional)
        data['heatParamsHW'] = ColorAdjustParams().read(packet, optional)
        data['heatParamsSoft'] = ColorAdjustParams().read(packet, optional)
        return data

class ColorTransformStruct(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['alphaMultiplier'] = packet.readFloat()
        data['alphaOffset'] = packet.readShort()
        data['blueMultiplier'] = packet.readFloat()
        data['blueOffset'] = packet.readShort()
        data['greenMultiplier'] = packet.readFloat()
        data['greenOffset'] = packet.readShort()
        data['redMultiplier'] = packet.readFloat()
        data['redOffset'] = packet.readShort()
        data['t'] = packet.readFloat()
        return data

class ColorTransformCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(ColorTransformStruct().read(packet, optional))
        data['colorTransforms'] = items
        return data

class ColoringCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['animatedColoring'] = None if optional.next() else packet.readLong()
        data['coloring'] = None if optional.next() else packet.readLong()
        return data

class CommonFacilityCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['facilityObject'] = packet.readLong()
        data['facilityTeam'] = packet.readInt()
        data['facilityTexture'] = packet.readLong()
        data['localCenter'] = Vector3d().read(packet, optional)
        data['ownerId'] = packet.readLong()
        data['position'] = Vector3d().read(packet, optional)
        data['rotation'] = Vector3d().read(packet, optional)
        data['useLight'] = bool(packet.readByte())
        data['useShadows'] = bool(packet.readByte())
        return data

class CommonFacilityModelBase_markAsDispelled(Codec):
    pass

class CommunicationPanelModelBase(Codec):
    pass

class CompositePartnerCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['forceSocialNetwork'] = None if optional.next() else packet.readString()
        return data

class CompositePartnerModelBase_linkAlreadyExists(Codec):
    pass

class CompositePartnerModelBase_loginBy2FaHashFailed(Codec):
    pass

class CompositePartnerModelBase_loginFailed(Codec):
    pass

class CompositePartnerModelBase_request2FaCode(Codec):
    pass

class CompositePartnerModelBase_request2FaHash(Codec):
    pass

class CompositePartnerModelBase_setPartnerObject(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['partnerObject'] = packet.readLong()
        return data

class CompositePartnerModelBase_showTutorial(Codec):
    pass

class CompositePartnerModelBase_startPartnerRegistration(Codec):
    pass

class CompositePartnerModelBase_wrong2FaCode(Codec):
    pass

class CompositePartnerModelBase_wrongPassword(Codec):
    pass

class CompositePartnerModelServer_bindAccount(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['uidOrEmail'] = packet.readString()
        data['password'] = packet.readString()
        return data

class CompositePartnerModelServer_finishRegistration(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['uid'] = packet.readString()
        data['domain'] = packet.readString()
        return data

class CompositePartnerModelServer_loadPartnerObjectOnClient(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['partnerId'] = packet.readString()
        return data

class CompositePartnerModelServer_login2FA(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['code'] = packet.readString()
        data['remember'] = bool(packet.readByte())
        return data

class CompositePartnerModelServer_loginViaPartner(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['partnerId'] = packet.readString()
        return data

class CompositePartnerModelServer_socialNetworkAssociations(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['socialNetworkAssociations'] = packet.readString()
        return data

class CompositePartnerModelServer_validateHash(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['hash'] = packet.readString()
        return data

class ContainerOpeningCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(packet.readInt())
        data['buttons'] = items
        data['hasOpenAllButton'] = bool(packet.readByte())
        return data

class ContainerResourceCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['fiveBoxImage'] = None if optional.next() else packet.readLong()
        data['fiveBoxLightImage'] = None if optional.next() else packet.readLong()
        data['fiveBoxOpenedImage'] = None if optional.next() else packet.readLong()
        data['oneBoxImage'] = packet.readLong()
        data['oneBoxLightImage'] = packet.readLong()
        data['oneBoxOpenedImage'] = packet.readLong()
        data['threeBoxImage'] = None if optional.next() else packet.readLong()
        data['threeBoxLightImage'] = None if optional.next() else packet.readLong()
        data['threeBoxOpenedImage'] = None if optional.next() else packet.readLong()
        return data

class ContainerTypeCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['type'] = packet.readInt()
        return data

class ContinueBattleModelBase(Codec):
    pass

class ContinueBattleModelServer_continueBattle(Codec):
    pass

class ControlPointsModelBase(Codec):
    pass

class CountableItemCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['count'] = packet.readInt()
        data['hideIfCountEqualZero'] = bool(packet.readByte())
        return data

class CreatorTagCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['creatorTag'] = None if optional.next() else packet.readString()
        return data

class CreatorTagModelServer_resetCreatorTag(Codec):
    pass

class CreatorTagModelServer_setCreatorTag(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['tag'] = packet.readString()
        return data

class CreatorTagsCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(packet.readString())
        data['creatorTags'] = items
        return data

class CrisisSoundCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['damageModeSound'] = None if optional.next() else packet.readLong()
        data['protectionModeSound'] = None if optional.next() else packet.readLong()
        data['speedModeSound'] = None if optional.next() else packet.readLong()
        return data

class CrisisSoundModelBase_playDamageModeSound(Codec):
    pass

class CrisisSoundModelBase_playProtectionModeSound(Codec):
    pass

class CrisisSoundModelBase_playSpeedModeSound(Codec):
    pass

class CrusaderTankHitModelBase(Codec):
    pass

class CrusaderTankHitModelServer_hitTargetCommand(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['facility'] = packet.readLong()
        data['clientTime'] = packet.readInt()
        data['target'] = packet.readLong()
        data['targetPosition'] = Vector3d().read(packet, optional)
        data['hitPointWorld'] = Vector3d().read(packet, optional)
        return data

class CrusaderUltimateProjectileCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['endPosition'] = None if optional.next() else Vector3d().read(packet, optional)
        data['explosionSound'] = packet.readLong()
        data['flightSound'] = packet.readLong()
        data['particleEffects'] = None if optional.next() else ParticleEffectsEntity().read(packet, optional)
        data['position'] = None if optional.next() else Vector3d().read(packet, optional)
        data['shellRadius'] = packet.readFloat()
        data['simplifiedExplosionTexture'] = None if optional.next() else packet.readLong()
        data['simplifiedLightingSFXEntity'] = None if optional.next() else LightingSFXEntity().read(packet, optional)
        data['simplifiedProjectileResource'] = None if optional.next() else packet.readLong()
        data['simplifiedShockWaveTexture'] = None if optional.next() else packet.readLong()
        data['speed'] = packet.readFloat()
        data['splashParams'] = SplashParams().read(packet, optional)
        return data

class CrusaderUltimateProjectileModelBase_explode(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['position'] = Vector3d().read(packet, optional)
        return data

class CrusaderUltimateProjectileModelBase_shoot(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['startPosition'] = Vector3d().read(packet, optional)
        data['endPosition'] = Vector3d().read(packet, optional)
        return data

class CrystalPackageCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['crystals'] = packet.readInt()
        return data

class DailyQuestShowingCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['hasNewQuests'] = bool(packet.readByte())
        data['timeToNextQuest'] = packet.readInt()
        return data

class QuestPrizeInfo(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['count'] = packet.readInt()
        data['name'] = packet.readString()
        data['preview'] = None if optional.next() else packet.readLong()
        data['prizeObject'] = packet.readLong()
        return data

class DailyQuestInfo(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['canSkipForFree'] = bool(packet.readByte())
        data['description'] = packet.readString()
        data['finishCriteria'] = packet.readInt()
        data['image'] = packet.readLong()
        data['level'] = packet.readInt()
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(QuestPrizeInfo().read(packet, optional))
        data['prizes'] = items
        data['progress'] = packet.readInt()
        data['questId'] = packet.readLong()
        data['skipCost'] = packet.readInt()
        return data

class DailyQuestShowingModelBase_openDailyQuest(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(DailyQuestInfo().read(packet, optional))
        data['info'] = items
        return data

class DailyQuestShowingModelBase_prizeGiven(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['questClassId'] = packet.readLong()
        return data

class DailyQuestShowingModelBase_skipQuest(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['skippedQuestId'] = packet.readLong()
        data['newQuest'] = DailyQuestInfo().read(packet, optional)
        return data

class DailyQuestShowingModelServer_givePrize(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['questClassId'] = packet.readLong()
        return data

class DailyQuestShowingModelServer_openWindow(Codec):
    pass

class DailyQuestShowingModelServer_skipQuestForCrystals(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['questClassId'] = packet.readLong()
        data['skipPrice'] = packet.readInt()
        return data

class DailyQuestShowingModelServer_skipQuestForFree(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['questClassId'] = packet.readLong()
        return data

class DailyQuestShowingModelServer_skipQuestForShowedAds(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['questClassId'] = packet.readLong()
        return data

class DamageIndicatorCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['critMarkEnemy'] = packet.readLong()
        data['critMarkPlayer'] = packet.readLong()
        data['fragMarkEnemy'] = packet.readLong()
        data['hitMarkEnemy'] = packet.readLong()
        data['hitMarkPlayer'] = packet.readLong()
        return data

class DamageIndicatorModelBase_hit(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['critical'] = bool(packet.readByte())
        return data

class TargetTankDamage(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['critical'] = bool(packet.readByte())
        data['damageAmount'] = packet.readFloat()
        data['damageIndicatorType'] = packet.readInt()
        data['debugInfo'] = None if optional.next() else packet.readString()
        data['fatal'] = bool(packet.readByte())
        data['target'] = packet.readLong()
        return data

class DamageIndicatorModelBase_showDamageForShooter(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(TargetTankDamage().read(packet, optional))
        data['damages'] = items
        return data

class DataOwnerCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['dataOwnerId'] = packet.readLong()
        return data

class DelayMountCategoryCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['delayMountArmorInSec'] = packet.readInt()
        data['delayMountDroneInSec'] = packet.readInt()
        data['delayMountResistanceInSec'] = packet.readInt()
        data['delayMountWeaponInSec'] = packet.readInt()
        return data

class DescriptionModelCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['description'] = None if optional.next() else packet.readString()
        data['name'] = None if optional.next() else packet.readString()
        return data

class DescriptionModelBase(DescriptionModelCC):
    pass

class DetachModelBase(Codec):
    pass

class DetachModelServer_detach(Codec):
    pass

class DevicePropertyEntity(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['operation'] = packet.readInt()
        data['property'] = packet.readInt()
        data['value'] = packet.readFloat()
        return data

class DevicePropertiesCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(DevicePropertyEntity().read(packet, optional))
        data['properties'] = items
        return data

class DictatorUltimateCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['activationSound'] = packet.readLong()
        data['beam'] = packet.readLong()
        data['beamScale'] = packet.readDouble()
        data['secondaryBeamScale'] = packet.readDouble()
        data['star'] = packet.readLong()
        data['wave'] = packet.readLong()
        data['waveSize'] = packet.readDouble()
        return data

class DictatorUltimateModelBase_showUltimateUsed(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(packet.readLong())
        data['tanksInspired'] = items
        return data

class DiscountCollectorModelBase(Codec):
    pass

class DiscountForUpgradeModelBase(Codec):
    pass

class DiscountCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['discount'] = packet.readFloat()
        data['timeLeftInSeconds'] = packet.readInt()
        data['timeToStartInSeconds'] = packet.readInt()
        return data

class ShotCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['reloadMsec'] = packet.readInt()
        return data

class DiscreteShotModelBase_reconfigureWeapon(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['reloadTime'] = packet.readInt()
        return data

class DiscreteWeaponCommunicationModelBase(Codec):
    pass

class TargetHit(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['direction'] = Vector3d().read(packet, optional)
        data['localHitPoint'] = Vector3d().read(packet, optional)
        data['numberHits'] = packet.readByte()
        data['target'] = packet.readLong()
        return data

class DiscreteWeaponCommunicationModelBase_shoot(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['shooter'] = packet.readLong()
        data['direction'] = Vector3d().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(TargetHit().read(packet, optional))
        data['targets'] = items
        return data

class DiscreteWeaponCommunicationModelServer_tryToDummyShoot(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['clientTime'] = packet.readInt()
        data['direction'] = Vector3d().read(packet, optional)
        return data

class TargetPosition(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['orientation'] = Vector3d().read(packet, optional)
        data['position'] = Vector3d().read(packet, optional)
        data['target'] = packet.readLong()
        data['turretAngle'] = packet.readFloat()
        return data

class DiscreteWeaponCommunicationModelServer_tryToShoot(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['clientTime'] = packet.readInt()
        data['direction'] = Vector3d().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(TargetPosition().read(packet, optional))
        data['targets'] = items
        return data

class DispatcherModelBase(Codec):
    pass

class ObjectsDependencies(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['callbackId'] = packet.readInt()
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(packet.readLong())
        data['resources'] = items
        return data

class DispatcherModelBase_loadDependencies(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['dependencies'] = ObjectsDependencies().read(packet, optional)
        return data

class ModelData(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['id'] = packet.readLong()
        return data

class ObjectsData(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(ModelData().read(packet, optional))
        data['modelsData'] = items
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(packet.readLong())
        data['objects'] = items
        return data

class DispatcherModelBase_loadObjectsData(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['objectsData'] = ObjectsData().read(packet, optional)
        return data

class DispatcherModelBase_unloadObjects(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(packet.readLong())
        data['objects'] = items
        return data

class DispatcherModelServer_dependeciesLoaded(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['callbackId'] = packet.readInt()
        return data

class DominationSounds(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['pointActivationSound'] = None if optional.next() else packet.readLong()
        data['pointCaptureStartNegativeSound'] = packet.readLong()
        data['pointCaptureStartPositiveSound'] = packet.readLong()
        data['pointCaptureStopNegativeSound'] = packet.readLong()
        data['pointCaptureStopPositiveSound'] = packet.readLong()
        data['pointCapturedNegativeSound'] = packet.readLong()
        data['pointCapturedPositiveSound'] = packet.readLong()
        data['pointNeutralizedNegativeSound'] = packet.readLong()
        data['pointNeutralizedPositiveSound'] = packet.readLong()
        data['pointScoreDecreasingSound'] = packet.readLong()
        data['pointScoreIncreasingSound'] = packet.readLong()
        return data

class DominationResources(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['bigLetters'] = None if optional.next() else packet.readLong()
        data['bigLettersTexture'] = None if optional.next() else packet.readLong()
        data['blueCircle'] = None if optional.next() else packet.readLong()
        data['blueCircleTexture'] = None if optional.next() else packet.readLong()
        data['blueRay'] = None if optional.next() else packet.readLong()
        data['blueRayTip'] = None if optional.next() else packet.readLong()
        data['greenCircle'] = None if optional.next() else packet.readLong()
        data['greenRay'] = None if optional.next() else packet.readLong()
        data['greenRayTip'] = None if optional.next() else packet.readLong()
        data['neutralCircle'] = None if optional.next() else packet.readLong()
        data['neutralCircleTexture'] = None if optional.next() else packet.readLong()
        data['pointResources'] = PointResources().read(packet, optional)
        data['redCircle'] = None if optional.next() else packet.readLong()
        data['redCircleTexture'] = None if optional.next() else packet.readLong()
        data['redRay'] = packet.readLong()
        data['redRayTip'] = packet.readLong()
        return data

class ClientPointData(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['active'] = bool(packet.readByte())
        data['id'] = packet.readInt()
        data['name'] = packet.readString()
        data['position'] = Vector3d().read(packet, optional)
        data['score'] = packet.readFloat()
        data['scoreChangeRate'] = packet.readFloat()
        data['state'] = packet.readInt()
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(packet.readLong())
        data['tankIds'] = items
        return data

class DominationCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['keypointTriggerRadius'] = packet.readFloat()
        data['keypointVisorHeight'] = packet.readFloat()
        data['minesRestrictionRadius'] = packet.readFloat()
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(ClientPointData().read(packet, optional))
        data['points'] = items
        data['resources'] = DominationResources().read(packet, optional)
        data['sounds'] = DominationSounds().read(packet, optional)
        return data

class DominationModelBase_onPointActiveStateChanged(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['id'] = packet.readInt()
        data['active'] = bool(packet.readByte())
        data['immediately'] = bool(packet.readByte())
        return data

class DominationModelBase_pointCaptureStarted(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['team'] = packet.readInt()
        return data

class DominationModelBase_pointCaptureStopped(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['team'] = packet.readInt()
        return data

class DominationModelBase_setPointProgress(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['pointId'] = packet.readInt()
        data['progress'] = packet.readFloat()
        data['progressSpeed'] = packet.readFloat()
        return data

class DominationModelBase_setPointState(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['pointId'] = packet.readInt()
        data['state'] = packet.readInt()
        return data

class DominationModelBase_stopBattle(Codec):
    pass

class DominationModelBase_tankEnteredPointZone(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['pointId'] = packet.readInt()
        data['tankId'] = packet.readLong()
        return data

class DominationModelBase_tankLeftPointZone(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['pointId'] = packet.readInt()
        data['tankId'] = packet.readLong()
        return data

class DominationModelServer_forceUpdatePoint(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['pointId'] = packet.readInt()
        return data

class DonationAlertCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['imageWithEmail'] = packet.readLong()
        data['imageWithoutEmail'] = packet.readLong()
        data['message'] = packet.readString()
        return data

class GoodsInfoData(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['color'] = packet.readInt()
        data['count'] = packet.readInt()
        data['id'] = packet.readLong()
        data['name'] = packet.readString()
        data['preview'] = None if optional.next() else packet.readLong()
        return data

class DonationData(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(GoodsInfoData().read(packet, optional))
        data['goods'] = items
        data['time'] = packet.readLong()
        return data

class DonationAlertModelBase_showDonationAlert(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['data'] = DonationData().read(packet, optional)
        return data

class DonationAlertModelBase_showDonationAlertWithEmailBlock(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['data'] = DonationData().read(packet, optional)
        return data

class DonationAlertModelBase_showEmailIsBusy(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['email'] = packet.readString()
        return data

class DonationAlertModelBase_showEmailIsForbidden(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['email'] = packet.readString()
        return data

class DonationAlertModelBase_showEmailIsFree(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['email'] = packet.readString()
        return data

class DonationAlertModelServer_confirm(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['time'] = packet.readLong()
        return data

class DonationAlertModelServer_confirmWithEmail(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['time'] = packet.readLong()
        data['email'] = packet.readString()
        return data

class DonationAlertModelServer_validateEmail(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['email'] = packet.readString()
        return data

class DonationProfileCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['donator'] = bool(packet.readByte())
        return data

class DroneExplosionCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['explosionTexture'] = packet.readLong()
        return data

class DroneExplosionModelBase_addExplosionEffect(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['position'] = Vector3d().read(packet, optional)
        data['radius'] = packet.readFloat()
        return data

class DroneIndicatorCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['batteryAmount'] = packet.readInt()
        data['canOverheal'] = bool(packet.readByte())
        data['droneReady'] = bool(packet.readByte())
        data['radius'] = packet.readFloat()
        data['timeToReloadMs'] = packet.readInt()
        return data

class DroneIndicatorModelBase_notReady(Codec):
    pass

class DroneIndicatorModelBase_ready(Codec):
    pass

class DroneIndicatorModelBase_reload(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['durationMs'] = packet.readInt()
        return data

class DroneIndicatorModelBase_setBatteriesAmount(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['amount'] = packet.readInt()
        return data

class DroneModelBase(Codec):
    pass

class DroneSFXCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['activationSound'] = packet.readLong()
        return data

class DroppableGoldItemCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['showDroppableGoldAuthor'] = bool(packet.readByte())
        return data

class DroppableGoldItemModelServer_setShowGoldAuthor(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['show'] = bool(packet.readByte())
        return data

class DurationCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['durationTimeInMs'] = packet.readInt()
        data['infinite'] = bool(packet.readByte())
        return data

class EffectDescriptionCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['category'] = packet.readInt()
        data['index'] = packet.readInt()
        data['tank'] = packet.readLong()
        return data

class EffectDescriptionModelBase_activated(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['leftTimeInMs'] = packet.readInt()
        return data

class EffectDescriptionModelBase_deactivated(Codec):
    pass

class EffectDescriptionModelBase_merged(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['leftTimeInMs'] = packet.readInt()
        return data

class EffectLevelCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['effectLevel'] = packet.readInt()
        return data

class EmailConfirmModelBase(Codec):
    pass

class EmailConfirmModelBase_confirmEmailStatus(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['status'] = packet.readInt()
        return data

class EmailConfirmModelServer_confirmEmail(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['email'] = packet.readString()
        data['emailConfirmHash'] = packet.readString()
        return data

class EmailRegistrationModelBase(Codec):
    pass

class EmailRegistrationModelBase_emailDomainIsForbidden(Codec):
    pass

class EmailRegistrationModelBase_emailIsBusy(Codec):
    pass

class EmailRegistrationModelBase_emailIsFree(Codec):
    pass

class EmailRegistrationModelBase_emailIsInvalid(Codec):
    pass

class EmailRegistrationModelBase_emailWithPasswordSuccessfullySent(Codec):
    pass

class EmailRegistrationModelServer_checkEmail(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['email'] = packet.readString()
        return data

class EmailRegistrationModelServer_registerUserRequiredEmail(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['userUid'] = packet.readString()
        data['email'] = packet.readString()
        data['registeredUrl'] = packet.readString()
        data['referralHash'] = None if optional.next() else packet.readString()
        data['realName'] = packet.readString()
        data['idNumber'] = packet.readString()
        return data

class EmailRequiredCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['emailRequired'] = bool(packet.readByte())
        return data

class EmissionColorCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['emissionColor'] = packet.readInt()
        return data

class EngineCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['engineIdleSound'] = packet.readLong()
        data['engineMovingSound'] = packet.readLong()
        data['engineStartMovingSound'] = packet.readLong()
        data['engineStartSound'] = None if optional.next() else packet.readLong()
        data['engineStopMovingSound'] = None if optional.next() else packet.readLong()
        return data

class EntranceAlertModelBase(Codec):
    pass

class EntranceAlertModelBase_showAlert(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['image'] = packet.readLong()
        data['header'] = packet.readString()
        data['text'] = packet.readString()
        return data

class EntranceModelCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['antiAddictionEnabled'] = bool(packet.readByte())
        return data

class EntranceObjectDetachModelBase(Codec):
    pass

class EntranceObjectDetachModelBase_objectDetach(Codec):
    pass

class EquipmentConstraintsModeInfo(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['index'] = packet.readInt()
        data['mode'] = packet.readString()
        data['name'] = packet.readString()
        return data

class EquipmentConstraintsCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(EquipmentConstraintsModeInfo().read(packet, optional))
        data['equipmentConstraintsModeInfos'] = items
        return data

class ErrorsDescriptionModelBase(Codec):
    pass

class ErrorsDescriptionModelBase_showError(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['msg'] = packet.readString()
        return data

class ShopItemOneTimePurchaseCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['oneTimePurchase'] = bool(packet.readByte())
        data['triedToBuy'] = bool(packet.readByte())
        return data

class EventOneTimePurchaseModelBase(ShopItemOneTimePurchaseCC):
    pass

class ExternalAuthApiModelBase(Codec):
    pass

class ExternalAuthApiModelServer_authorize(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['snId'] = packet.readString()
        return data

class SocialNetworkEntranceParams(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['authorizationUrl'] = None if optional.next() else packet.readString()
        data['enabled'] = None if optional.next() else bool(packet.readByte())
        data['snId'] = packet.readString()
        return data

class ExternalEntranceCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(SocialNetworkEntranceParams().read(packet, optional))
        data['socialNetworkParams'] = items
        return data

class ExternalEntranceModelBase_linkAlreadyExists(Codec):
    pass

class ExternalEntranceModelBase_request2FaCode(Codec):
    pass

class ExternalEntranceModelBase_validationFailed(Codec):
    pass

class ExternalEntranceModelBase_validationSuccess(Codec):
    pass

class ExternalEntranceModelBase_wrong2FaCode(Codec):
    pass

class ExternalEntranceModelBase_wrongPassword(Codec):
    pass

class ExternalEntranceModelServer_createLinkForExistingUser(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['uidOrEmail'] = packet.readString()
        data['password'] = packet.readString()
        return data

class ExternalEntranceModelServer_login2FA(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['code'] = packet.readString()
        return data

class ExternalEntranceModelServer_registerNewUser(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['uid'] = packet.readString()
        data['referralHash'] = None if optional.next() else packet.readString()
        return data

class ExternalEntranceModelServer_setLoginData(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['rememberMe'] = bool(packet.readByte())
        data['domain'] = packet.readString()
        return data

class FacebookInternalLoginModelBase(Codec):
    pass

class FacebookPaymentModelBase(Codec):
    pass

class FacebookPaymentModelBase_receivePaymentTransaction(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['shopItemId'] = packet.readLong()
        data['transactionId'] = packet.readString()
        return data

class FacebookPaymentModelServer_getPaymentTransaction(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['shopItemId'] = packet.readLong()
        return data

class FacilitySphericalZoneCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['centerOffsetZ'] = packet.readFloat()
        data['radius'] = packet.readFloat()
        return data

class FakePartnerLoginModelBase(Codec):
    pass

class FirebasePushNotificationPanelUserProfileModelBase(Codec):
    pass

class FirebasePushNotificationPanelUserProfileModelServer_storeToken(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['platform'] = packet.readInt()
        data['token'] = packet.readString()
        return data

class FirstPurchaseBonusCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['coinPurchased'] = bool(packet.readByte())
        return data

class FirstPurchaseBonusModelBase_rewardGiven(Codec):
    pass

class FlameThrowerCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['coneAngle'] = packet.readFloat()
        data['range'] = packet.readFloat()
        return data

class FlameThrowerModelBase_startFire(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['shooter'] = packet.readLong()
        return data

class FlameThrowerModelBase_stopFire(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['shooter'] = packet.readLong()
        return data

class FlameThrowerModelServer_dryShot(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['time'] = packet.readInt()
        return data

class FlameThrowerModelServer_hitCommand(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['time'] = packet.readInt()
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(packet.readLong())
        data['targets'] = items
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(packet.readShort())
        data['incarnations'] = items
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(Vector3d().read(packet, optional))
        data['targetPositions'] = items
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(Vector3d().read(packet, optional))
        data['hitPointsWorld'] = items
        return data

class FlameThrowerModelServer_startFireCommand(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['time'] = packet.readInt()
        return data

class FlameThrowerModelServer_stopFireCommand(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['time'] = packet.readInt()
        return data

class FlameThrowingSFXCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['buffedFireSparksTexture'] = packet.readLong()
        data['fireTexture'] = packet.readLong()
        data['flameSound'] = packet.readLong()
        data['lightingSFXEntity'] = LightingSFXEntity().read(packet, optional)
        data['muzzlePlaneTexture'] = packet.readLong()
        return data

class FlashDeathModelBase(Codec):
    pass

class FlashDeathModelBase_goToLink(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['htmlLink'] = packet.readString()
        return data

class FlashDeathModelBase_showDialog(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['downloadLink'] = packet.readString()
        return data

class FlashDeathModelServer_requestHtmlLink(Codec):
    pass

class ClanFlag(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['flagImage'] = packet.readLong()
        data['id'] = packet.readLong()
        data['name'] = packet.readString()
        return data

class ForeignClanCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(ClanFlag().read(packet, optional))
        data['flags'] = items
        return data

class ForeignClanModelBase_alreadyInClanOutgoing(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['clanName'] = packet.readString()
        return data

class ForeignClanModelBase_alreadyInIncoming(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['clanName'] = packet.readString()
        return data

class ForeignClanModelBase_clanBlocked(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['reason'] = packet.readString()
        return data

class ForeignClanModelBase_onJoinClan(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['clanName'] = packet.readString()
        return data

class ForeignClanData(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['blocked'] = bool(packet.readByte())
        data['createTime'] = packet.readLong()
        data['creatorId'] = packet.readLong()
        data['description'] = None if optional.next() else packet.readString()
        data['flagId'] = packet.readLong()
        data['incomingRequestEnabled'] = bool(packet.readByte())
        data['lightClanId'] = packet.readLong()
        data['maxMembers'] = packet.readInt()
        data['memberClan'] = bool(packet.readByte())
        data['minRankForAddClan'] = packet.readInt()
        data['name'] = packet.readString()
        data['reasonForBlocking'] = None if optional.next() else packet.readString()
        data['requestInIncoming'] = bool(packet.readByte())
        data['requestInOutgoing'] = bool(packet.readByte())
        data['tag'] = packet.readString()
        data['timeBlocking'] = packet.readLong()
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(UserData().read(packet, optional))
        data['users'] = items
        return data

class ForeignClanModelBase_showForeignClan(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['clanData'] = ForeignClanData().read(packet, optional)
        return data

class ForeignClanModelBase_userSmallRankForAddClan(Codec):
    pass

class ForeignClanModelServer_acceptRequest(Codec):
    pass

class ForeignClanModelServer_rejectRequest(Codec):
    pass

class ForeignClanModelServer_revokeRequest(Codec):
    pass

class ForeignClanModelServer_sendRequest(Codec):
    pass

class FpsStatisticsModelBase(Codec):
    pass

class FpsStatisticsModelServer_collectStatistics(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['numTicks'] = packet.readInt()
        data['duration'] = packet.readInt()
        data['settings'] = packet.readInt()
        return data

class FreezeCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['damageAreaConeAngle'] = packet.readFloat()
        data['damageAreaRange'] = packet.readFloat()
        return data

class FreezeModelBase_startFire(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['shooter'] = packet.readLong()
        return data

class FreezeModelBase_stopFire(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['shooter'] = packet.readLong()
        return data

class FreezeModelServer_dryShot(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['time'] = packet.readInt()
        return data

class FreezeModelServer_hitCommand(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['time'] = packet.readInt()
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(packet.readLong())
        data['targets'] = items
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(packet.readShort())
        data['incarnations'] = items
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(Vector3d().read(packet, optional))
        data['positions'] = items
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(Vector3d().read(packet, optional))
        data['hitPointsWorld'] = items
        return data

class FreezeModelServer_startFireCommand(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['time'] = packet.readInt()
        return data

class FreezeModelServer_stopFireCommand(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['time'] = packet.readInt()
        return data

class FreezeSFXCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['buffedShardsTextureResource'] = packet.readLong()
        data['lightingSFXEntity'] = LightingSFXEntity().read(packet, optional)
        data['particleSpeed'] = packet.readFloat()
        data['particleTextureResource'] = packet.readLong()
        data['planeTextureResource'] = packet.readLong()
        data['shotSoundResource'] = packet.readLong()
        return data

class UserContainerCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(packet.readLong())
        data['users'] = items
        return data

class FriendsAcceptedModelBase(UserContainerCC):
    pass

class FriendsAcceptedModelBase_onAdding(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['userId'] = packet.readLong()
        return data

class FriendsAcceptedModelBase_onRemoved(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['userId'] = packet.readLong()
        return data

class FriendsAcceptedNotificatorModelBase(UserContainerCC):
    pass

class FriendsAcceptedNotificatorModelBase_onAdding(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['userId'] = packet.readLong()
        return data

class FriendsAcceptedNotificatorModelBase_onRemoved(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['userId'] = packet.readLong()
        return data

class FriendsAcceptedNotificatorModelServer_remove(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['userId'] = packet.readLong()
        return data

class FriendsIncomingModelBase(UserContainerCC):
    pass

class FriendsIncomingModelBase_onAdding(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['userId'] = packet.readLong()
        return data

class FriendsIncomingModelBase_onRemoved(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['userId'] = packet.readLong()
        return data

class FriendsIncomingNotificatorModelBase(UserContainerCC):
    pass

class FriendsIncomingNotificatorModelBase_onAdding(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['userId'] = packet.readLong()
        return data

class FriendsIncomingNotificatorModelBase_onRemoved(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['userId'] = packet.readLong()
        return data

class FriendsIncomingNotificatorModelServer_remove(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['userId'] = packet.readLong()
        return data

class FriendsLoaderModelBase(Codec):
    pass

class FriendsLoaderModelBase_onUsersLoaded(Codec):
    pass

class FriendsLoaderModelServer_show(Codec):
    pass

class FriendsCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['acceptedLimit'] = packet.readInt()
        data['incomingLimit'] = packet.readInt()
        data['local'] = bool(packet.readByte())
        return data

class FriendsModelBase_acceptSuccess(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['userId'] = packet.readLong()
        return data

class FriendsModelBase_acceptedLimitExceeded(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['uid'] = packet.readString()
        data['userId'] = packet.readLong()
        return data

class FriendsModelBase_alreadyInAcceptedFriends(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['uid'] = packet.readString()
        data['userId'] = packet.readLong()
        return data

class FriendsModelBase_alreadyInIncomingFriends(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['uid'] = packet.readString()
        data['userId'] = packet.readLong()
        return data

class FriendsModelBase_alreadyInOutgoingFriends(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['uid'] = packet.readString()
        data['userId'] = packet.readLong()
        return data

class FriendsModelBase_friendRequestSent(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['uid'] = packet.readString()
        data['userId'] = packet.readLong()
        return data

class FriendsModelBase_incomingLimitExceeded(Codec):
    pass

class FriendsModelBase_yourAcceptedLimitExceeded(Codec):
    pass

class FriendsModelServer_accept(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['userId'] = packet.readLong()
        return data

class FriendsModelServer_add(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['userId'] = packet.readLong()
        return data

class FriendsModelServer_addByUid(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['uid'] = packet.readString()
        return data

class FriendsModelServer_breakItOff(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['userId'] = packet.readLong()
        return data

class FriendsModelServer_reject(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['userId'] = packet.readLong()
        return data

class FriendsModelServer_rejectAll(Codec):
    pass

class GPUDetectorModelBase(Codec):
    pass

class GPUDetectorModelServer_detectionGPUcompleted(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['gpuEnabled'] = bool(packet.readByte())
        return data

class KitItem(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['count'] = packet.readInt()
        data['item'] = packet.readLong()
        data['mount'] = bool(packet.readByte())
        return data

class GarageKitCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['discountInPercent'] = packet.readInt()
        data['image'] = packet.readLong()
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(KitItem().read(packet, optional))
        data['kitItems'] = items
        return data

class GarageModelCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['cameraAltitude'] = packet.readFloat()
        data['cameraDistance'] = packet.readFloat()
        data['cameraFov'] = packet.readFloat()
        data['cameraPitch'] = packet.readFloat()
        data['garageBox'] = packet.readLong()
        data['hideLinks'] = bool(packet.readByte())
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(packet.readInt())
        data['mountableCategories'] = items
        data['skyboxBackSide'] = packet.readLong()
        data['skyboxBottomSide'] = packet.readLong()
        data['skyboxFrontSide'] = packet.readLong()
        data['skyboxLeftSide'] = packet.readLong()
        data['skyboxRightSide'] = packet.readLong()
        data['skyboxTopSide'] = packet.readLong()
        return data

class GarageModelBase_initDepot(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(packet.readLong())
        data['itemsOnDepot'] = items
        return data

class GarageModelBase_initMarket(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(packet.readLong())
        data['itemsOnMarket'] = items
        return data

class GarageModelBase_initMounted(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(packet.readLong())
        data['mountedItems'] = items
        return data

class GarageModelBase_reloadGarage(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['message'] = packet.readString()
        data['totalCrystals'] = packet.readInt()
        return data

class GarageModelBase_removeDepotItem(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['item'] = packet.readLong()
        return data

class GarageModelBase_select(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['itemToSelect'] = packet.readLong()
        return data

class GarageModelBase_selectFirstItemInDepot(Codec):
    pass

class GarageModelBase_showCategory(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['viewCategory'] = packet.readInt()
        return data

class GarageModelBase_unmountDrone(Codec):
    pass

class GarageModelBase_updateDepotItem(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['item'] = packet.readLong()
        data['count'] = packet.readInt()
        return data

class GarageModelBase_updateMountedItems(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(packet.readLong())
        data['mountedItems'] = items
        return data

class GarageModelBase_updateTemporaryItem(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['item'] = packet.readLong()
        data['remainingTimeSeconds'] = packet.readInt()
        return data

class GarageModelServer_itemMounted(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['item'] = packet.readLong()
        return data

class GarageModelServer_itemUnmounted(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['item'] = packet.readLong()
        return data

class GarageModelServer_readyToReload(Codec):
    pass

class GarageNotifierModelBase(Codec):
    pass

class GarageNotifierModelBase_notifyDiscountsInGarage(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(packet.readInt())
        data['categories'] = items
        return data

class GaragePreviewModelCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['cameraAltitude'] = packet.readFloat()
        data['cameraDistance'] = packet.readFloat()
        data['cameraFov'] = packet.readFloat()
        data['cameraPitch'] = packet.readFloat()
        data['garageBox'] = packet.readLong()
        data['hasBatteries'] = bool(packet.readByte())
        data['skyboxFrontSide'] = packet.readLong()
        return data

class GaragePreviewModelBase_initMountedItemsProperties(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(packet.readInt())
        data['properties'] = items
        return data

class GaragePreviewModelBase_setHasBatteries(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['hasBatteries'] = bool(packet.readByte())
        return data

class SplashCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['impactForce'] = packet.readFloat()
        data['minSplashDamagePercent'] = packet.readFloat()
        data['radiusOfMaxSplashDamage'] = packet.readFloat()
        data['splashDamageRadius'] = packet.readFloat()
        return data

class GaussCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['aimedShotImpact'] = packet.readFloat()
        data['aimedShotKickback'] = packet.readFloat()
        data['aimingGracePeriod'] = packet.readInt()
        data['aimingTime'] = packet.readInt()
        data['powerShotReloadDurationMs'] = packet.readInt()
        data['primaryShellRadius'] = packet.readFloat()
        data['primaryShellSpeed'] = packet.readFloat()
        data['secondarySplashParams'] = SplashCC().read(packet, optional)
        data['shotRange'] = packet.readFloat()
        return data

class GaussModelBase_aimingFailed(Codec):
    pass

class GaussModelBase_dummyShot(Codec):
    pass

class GaussModelBase_primaryShot(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['shotId'] = packet.readInt()
        data['shotDirection'] = Vector3d().read(packet, optional)
        return data

class GaussModelBase_secondaryHitTargetCommand(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['target'] = packet.readLong()
        data['relativeHitPoint'] = Vector3d().read(packet, optional)
        return data

class GaussModelBase_startAiming(Codec):
    pass

class GaussModelBase_stopAiming(Codec):
    pass

class GaussModelServer_dummyShotCommand(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['clientTime'] = packet.readInt()
        return data

class GaussModelServer_primaryHitStaticCommand(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['clientTime'] = packet.readInt()
        data['shotId'] = packet.readInt()
        data['hitPointWorld'] = Vector3d().read(packet, optional)
        return data

class GaussModelServer_primaryHitTargetCommand(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['clientTime'] = packet.readInt()
        data['shotId'] = packet.readInt()
        data['target'] = packet.readLong()
        data['targetPosition'] = Vector3d().read(packet, optional)
        data['hitPointWorld'] = Vector3d().read(packet, optional)
        return data

class GaussModelServer_primaryShotCommand(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['clientTime'] = packet.readInt()
        data['shotId'] = packet.readInt()
        data['shotDirection'] = Vector3d().read(packet, optional)
        return data

class GaussModelServer_secondaryHitTargetCommand(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['clientTime'] = packet.readInt()
        data['target'] = packet.readLong()
        data['targetPosition'] = Vector3d().read(packet, optional)
        data['localHitPosition'] = Vector3d().read(packet, optional)
        data['worldHitPosition'] = Vector3d().read(packet, optional)
        return data

class GaussModelServer_startAiming(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['clientTime'] = packet.readInt()
        return data

class GaussModelServer_stopAiming(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['clientTime'] = packet.readInt()
        return data

class GaussSFXCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['antennaDownSound'] = packet.readLong()
        data['antennaUpSound'] = packet.readLong()
        data['electroTexture'] = packet.readLong()
        data['explosionElectroTexture'] = packet.readLong()
        data['explosionTexture'] = packet.readLong()
        data['fireTexture'] = packet.readLong()
        data['flameTexture'] = packet.readLong()
        data['hitMarkerTexture'] = packet.readLong()
        data['lightingSFXEntity'] = LightingSFXEntity().read(packet, optional)
        data['lightningTexture'] = packet.readLong()
        data['powerShotFarSound1'] = packet.readLong()
        data['powerShotFarSound2'] = packet.readLong()
        data['powerShotFarSound3'] = packet.readLong()
        data['primaryHitSound'] = packet.readLong()
        data['primaryShellFlightSound'] = packet.readLong()
        data['primaryShotSound'] = packet.readLong()
        data['secondaryHitSound'] = packet.readLong()
        data['secondaryShotSound'] = packet.readLong()
        data['shell'] = packet.readLong()
        data['shellTexture'] = packet.readLong()
        data['smokeTexture'] = packet.readLong()
        data['startAimingSound'] = packet.readLong()
        data['targetLockSound'] = packet.readLong()
        data['targetLostSound'] = packet.readLong()
        data['tracerTexture'] = packet.readLong()
        data['trailTexture'] = packet.readLong()
        return data

class GlobeLightningCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['checkZoneRadius'] = packet.readFloat()
        data['explosionSound'] = packet.readLong()
        data['flightSound'] = packet.readLong()
        data['justCreated'] = bool(packet.readByte())
        data['particleEffects'] = None if optional.next() else ParticleEffectsEntity().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(Vector3d().read(packet, optional))
        data['positions'] = items
        data['shotSound'] = packet.readLong()
        data['simplifiedExplosionTexture'] = None if optional.next() else packet.readLong()
        data['simplifiedProjectileResource'] = None if optional.next() else packet.readLong()
        data['simplifiedShockWaveTexture'] = None if optional.next() else packet.readLong()
        data['speed'] = packet.readFloat()
        data['splashParams'] = SplashParams().read(packet, optional)
        data['timePassed'] = packet.readInt()
        return data

class GlobeLightningModelBase_explode(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['position'] = Vector3d().read(packet, optional)
        return data

class GlobeLightningModelBase_shoot(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(Vector3d().read(packet, optional))
        data['positions'] = items
        return data

class GoToUrlPaymentModelBase(Codec):
    pass

class GoToUrlPaymentModelBase_receiveUrl(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['url'] = PaymentRequestUrl().read(packet, optional)
        return data

class GoToUrlPaymentModelServer_getPaymentUrl(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['shopItemId'] = packet.readLong()
        return data

class GoldBonusCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(BonusRegionData().read(packet, optional))
        data['regionsData'] = items
        return data

class GoldBonusesModelBase_hideDropZone(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['bonusRegionData'] = BonusRegionData().read(packet, optional)
        return data

class GoldBonusesModelBase_notificationBonus(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['battleObject'] = packet.readLong()
        data['bonusRegionData'] = BonusRegionData().read(packet, optional)
        return data

class GoldBonusesModelBase_notificationBonusContainsUid(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['battleObject'] = packet.readLong()
        data['uid'] = packet.readString()
        data['bonusRegionData'] = BonusRegionData().read(packet, optional)
        return data

class GoldBoxPackageCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['count'] = packet.readInt()
        return data

class GoogleEntranceModelBase(Codec):
    pass

class GoogleEntranceModelServer_login(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['idToken'] = packet.readString()
        return data

class GoogleExternalLoginModelBase(Codec):
    pass

class GpuReportModelBase(Codec):
    pass

class GpuReportModelServer_logGpuReport(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['report'] = packet.readString()
        return data

class GroupInviteWindowModelBase(Codec):
    pass

class GroupInviteWindowModelBase_show(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(packet.readLong())
        data['allowedFromFriends'] = items
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(packet.readLong())
        data['allowedFromClan'] = items
        return data

class GroupInviteWindowModelServer_prepareToShow(Codec):
    pass

class GroupedCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['group'] = packet.readInt()
        data['grouped'] = bool(packet.readByte())
        return data

class HasBatteriesNotifyCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['hasBatteries'] = bool(packet.readByte())
        return data

class HasBatteriesNotifyModelBase_setHasBatteries(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['hasBatteries'] = bool(packet.readByte())
        return data

class HopperUltimateCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['activationSound'] = packet.readLong()
        data['jumpVelocity'] = packet.readFloat()
        data['maxValidAngleZ'] = packet.readFloat()
        data['radius'] = packet.readFloat()
        data['wave'] = packet.readLong()
        data['waveSize'] = packet.readDouble()
        return data

class HopperUltimateModelBase_showUltimateUsed(Codec):
    pass

class HornetUltimateCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['effectEnabled'] = bool(packet.readByte())
        data['effectStartSound'] = packet.readLong()
        data['ring'] = packet.readLong()
        data['sonarSound'] = packet.readLong()
        return data

class HornetUltimateModelBase_showUltimateRadarIsTurnedOff(Codec):
    pass

class HornetUltimateModelBase_showUltimateRadarIsTurnedOn(Codec):
    pass

class HoverChassisCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['acceleration'] = packet.readFloat()
        data['deceleration'] = packet.readFloat()
        data['engineDifferentialFactor'] = packet.readFloat()
        data['engineIntegralFactor'] = packet.readFloat()
        data['enginePosition'] = packet.readFloat()
        data['engineProportionalFactor'] = packet.readFloat()
        data['maxControllableAngle'] = packet.readFloat()
        data['maxSpeed'] = packet.readFloat()
        data['moveCameraRelative'] = bool(packet.readByte())
        data['optimalSurfaceDistance'] = packet.readFloat()
        data['reverseAcceleration'] = packet.readFloat()
        data['tiltMoveMaxAngle'] = packet.readFloat()
        data['tiltMoveScale'] = packet.readFloat()
        data['tiltStabilityMaxAngle'] = packet.readFloat()
        data['tiltStabilityScale'] = packet.readFloat()
        data['turnAcceleration'] = packet.readFloat()
        data['turnDeceleration'] = packet.readFloat()
        data['turnMaxSpeed'] = packet.readFloat()
        data['turnReverseAcceleration'] = packet.readFloat()
        return data

class HoverChassisModelBase_control(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['forwardSpeed'] = packet.readByte()
        data['rightSpeed'] = packet.readByte()
        data['turnLeft'] = packet.readByte()
        return data

class HoverChassisModelServer_controlCommand(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['clientTime'] = packet.readInt()
        data['forwardSpeed'] = packet.readByte()
        data['rightSpeed'] = packet.readByte()
        data['turnLeft'] = packet.readByte()
        return data

class HullCommonCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['deadColoring'] = packet.readLong()
        data['deathSound'] = packet.readLong()
        data['lightingSFXEntity'] = LightingSFXEntity().read(packet, optional)
        data['mass'] = packet.readFloat()
        data['stunEffectTexture'] = packet.readLong()
        data['stunSound'] = packet.readLong()
        data['ultimateHudIndicator'] = packet.readLong()
        data['ultimateIconIndex'] = packet.readInt()
        return data

class HullSmokeCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['alpha'] = packet.readFloat()
        data['density'] = packet.readFloat()
        data['enabled'] = bool(packet.readByte())
        data['fadeTime'] = packet.readInt()
        data['farDistance'] = packet.readFloat()
        data['nearDistance'] = packet.readFloat()
        data['particle'] = None if optional.next() else packet.readLong()
        data['size'] = packet.readFloat()
        return data

class HunterUltimateCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['chargingTimeMillis'] = packet.readInt()
        data['effectStartSound'] = packet.readLong()
        data['energy'] = packet.readLong()
        data['failSound'] = packet.readLong()
        data['hitSound'] = packet.readLong()
        data['lightning'] = packet.readLong()
        data['originPointZOffset'] = packet.readFloat()
        data['preparing'] = bool(packet.readByte())
        return data

class HunterUltimateModelBase_cancel(Codec):
    pass

class HunterUltimateModelBase_dispel(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(Vector3d().read(packet, optional))
        data['lightingPoints'] = items
        return data

class HunterUltimateModelBase_startCharging(Codec):
    pass

class HunterUltimateModelBase_stopCharging(Codec):
    pass

class IdNetLoginModelBase(Codec):
    pass

class IfengModelBase(Codec):
    pass

class IndemnityCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['indemnitySize'] = packet.readInt()
        return data

class InventoryCooldownModelBase(Codec):
    pass

class InventoryCooldownModelBase_activateCooldown(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['duration'] = packet.readInt()
        return data

class DependedCooldownItem(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['duration'] = packet.readInt()
        data['id'] = packet.readLong()
        return data

class InventoryCooldownModelBase_activateDependentCooldown(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(DependedCooldownItem().read(packet, optional))
        data['dependedItems'] = items
        return data

class InventoryCooldownModelBase_configureCooldown(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['cooldownDuration'] = packet.readInt()
        return data

class InventoryCooldownModelBase_ready(Codec):
    pass

class InventoryCooldownModelBase_setCooldownDuration(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['duration'] = packet.readInt()
        return data

class InventoryItemCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['alternativeSlotItem'] = bool(packet.readByte())
        data['count'] = packet.readInt()
        data['itemIndex'] = packet.readInt()
        return data

class InventoryItemModelBase_updateCount(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['count'] = packet.readInt()
        return data

class InventoryItemModelServer_activate(Codec):
    pass

class InventoryCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['ultimateEnabled'] = bool(packet.readByte())
        return data

class InventorySfxCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['daOffSound'] = packet.readLong()
        data['daOnSound'] = packet.readLong()
        data['ddOffSound'] = packet.readLong()
        data['ddOnSound'] = packet.readLong()
        data['healingSound'] = packet.readLong()
        data['nitroOffSound'] = packet.readLong()
        data['nitroOnSound'] = packet.readLong()
        data['notReadySound'] = packet.readLong()
        data['readySound'] = packet.readLong()
        return data

class InviteEntranceCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['enabled'] = bool(packet.readByte())
        return data

class InviteEntranceModelBase_inviteAlreadyActivated(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['uid'] = packet.readString()
        return data

class InviteEntranceModelBase_inviteFree(Codec):
    pass

class InviteEntranceModelBase_inviteNotFound(Codec):
    pass

class InviteEntranceModelServer_activateInvite(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['invite'] = packet.readString()
        return data

class IsisCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['capacity'] = packet.readFloat()
        data['chargeRate'] = packet.readFloat()
        data['checkPeriodMsec'] = packet.readInt()
        data['coneAngle'] = packet.readFloat()
        data['dischargeDamageRate'] = packet.readFloat()
        data['dischargeHealingRate'] = packet.readFloat()
        data['dischargeIdleRate'] = packet.readFloat()
        data['radius'] = packet.readFloat()
        data['vampiricMode'] = bool(packet.readByte())
        return data

class IsisModelBase_addEnergy(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['energyDelta'] = packet.readInt()
        return data

class IsisModelBase_reconfigureWeapon(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['dischargeDamageSpeed'] = packet.readFloat()
        data['dischargeHealingSpeed'] = packet.readFloat()
        data['dischargeIdleSpeed'] = packet.readFloat()
        data['radius'] = packet.readFloat()
        return data

class IsisModelBase_resetTarget(Codec):
    pass

class IsisModelBase_setTarget(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['state'] = packet.readInt()
        data['hit'] = TargetHit().read(packet, optional)
        return data

class IsisModelBase_stopWeapon(Codec):
    pass

class IsisModelServer_resetTarget(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['time'] = packet.readInt()
        return data

class IsisModelServer_setTarget(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['time'] = packet.readInt()
        data['target'] = packet.readLong()
        data['targetIncarnation'] = packet.readShort()
        data['localHitPoint'] = Vector3d().read(packet, optional)
        return data

class IsisModelServer_stopWeaponCommand(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['time'] = packet.readInt()
        return data

class IsisModelServer_tickCommand(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['time'] = packet.readInt()
        data['targetIncarnation'] = packet.readShort()
        data['targetPosition'] = Vector3d().read(packet, optional)
        data['localHitPoint'] = Vector3d().read(packet, optional)
        return data

class IsisSFXCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['damagingBall'] = packet.readLong()
        data['damagingRay'] = packet.readLong()
        data['damagingSound'] = packet.readLong()
        data['healingBall'] = packet.readLong()
        data['healingRay'] = packet.readLong()
        data['healingSound'] = packet.readLong()
        data['idleSound'] = packet.readLong()
        data['lightingSFXEntity'] = LightingSFXEntity().read(packet, optional)
        return data

class Item3DCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['mounted'] = bool(packet.readByte())
        return data

class ItemCategoryCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['category'] = packet.readInt()
        return data

class ItemDevicesCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['devicesAvailable'] = bool(packet.readByte())
        data['preview'] = None if optional.next() else packet.readLong()
        data['sale'] = bool(packet.readByte())
        return data

class ItemDevicesGarageModelServer_buyDevice(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['device'] = packet.readLong()
        data['currency'] = packet.readInt()
        return data

class ItemDevicesGarageModelServer_insertDevice(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['device'] = packet.readLong()
        return data

class ItemDevicesGarageModelServer_removeDevice(Codec):
    pass

class ItemEnabledForPartnerCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['availableForNonPartnerUsers'] = bool(packet.readByte())
        data['partnerId'] = packet.readString()
        return data

class ItemFittingModelBase(Codec):
    pass

class ItemFittingModelServer_fit(Codec):
    pass

class ItemModelCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['maxRank'] = packet.readInt()
        data['minRank'] = packet.readInt()
        data['position'] = packet.readInt()
        data['preview'] = packet.readLong()
        return data

class ItemGaragePropertyData(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['property'] = packet.readInt()
        data['value'] = packet.readString()
        return data

class ItemPropertiesCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(ItemGaragePropertyData().read(packet, optional))
        data['properties'] = items
        return data

class ItemRarityCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['rarity'] = packet.readInt()
        return data

class ItemViewCategoryCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['category'] = packet.readInt()
        return data

class JuggernautCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['bossHudMarker'] = None if optional.next() else packet.readLong()
        data['bossKilledSound'] = packet.readLong()
        data['bossSpawnedSound'] = packet.readLong()
        data['currentBoss'] = None if optional.next() else packet.readLong()
        return data

class JuggernautModelBase_bossChanged(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['newBoss'] = None if optional.next() else packet.readLong()
        return data

class JuggernautModelBase_bossKilled(Codec):
    pass

class JuggernautUltimateCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['activateSound'] = packet.readLong()
        data['negativeColorTransform'] = None if optional.next() else packet.readString()
        data['positiveColorTransform'] = None if optional.next() else packet.readString()
        data['sparkImage'] = packet.readLong()
        return data

class JuggernautUltimateModelBase_showUltimateUsed(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(packet.readLong())
        data['tanksPushed'] = items
        return data

class KillStreakItem(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['count'] = packet.readInt()
        data['messageToBoss'] = None if optional.next() else packet.readString()
        data['messageToVictims'] = packet.readString()
        data['sound'] = None if optional.next() else packet.readLong()
        return data

class KillStreakCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(KillStreakItem().read(packet, optional))
        data['items'] = items
        return data

class KillStreakModelBase_killStreakAchived(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['index'] = packet.readInt()
        return data

class CCBundleText(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['color'] = packet.readInt()
        data['fontPercentSize'] = None if optional.next() else packet.readInt()
        data['positionPercentX'] = packet.readInt()
        data['positionPercentY'] = packet.readInt()
        data['text'] = packet.readString()
        return data

class BundleImage(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['height'] = None if optional.next() else packet.readInt()
        data['image'] = packet.readLong()
        data['positionPercentX'] = packet.readInt()
        data['positionPercentY'] = packet.readInt()
        return data

class KitBundleViewCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['button'] = None if optional.next() else packet.readLong()
        data['buttonOver'] = None if optional.next() else packet.readLong()
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(BundleImage().read(packet, optional))
        data['imageBlocks'] = items
        data['priceLabelColor'] = packet.readInt()
        data['priceLabelFontPercentSize'] = packet.readInt()
        data['priceLabelPositionPercentX'] = packet.readInt()
        data['priceLabelPositionPercentY'] = packet.readInt()
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(CCBundleText().read(packet, optional))
        data['textBlocks'] = items
        return data

class KitOfferModelBase(Codec):
    pass

class KitOfferInfo(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['currencyName'] = packet.readString()
        data['currencyRoundPrecision'] = packet.readInt()
        data['image'] = packet.readLong()
        data['price'] = packet.readDouble()
        data['shopItem'] = packet.readLong()
        return data

class KitOfferModelBase_showOffer(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['info'] = KitOfferInfo().read(packet, optional)
        return data

class KitOfferModelServer_logAction(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['shopItem'] = packet.readLong()
        data['action'] = packet.readInt()
        return data

class KitPackageItemInfo(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['count'] = packet.readInt()
        data['crystalPrice'] = packet.readInt()
        data['itemName'] = packet.readString()
        return data

class KitPackageCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(KitPackageItemInfo().read(packet, optional))
        data['itemInfos'] = items
        data['name'] = packet.readString()
        data['showDetails'] = bool(packet.readByte())
        return data

class KitPackageViewModelBase(Codec):
    pass

class KitViewButtonWithPriceModelBase(Codec):
    pass

class KitViewResourceLocalizedCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['buttonKit'] = packet.readLong()
        data['buttonKitOver'] = packet.readLong()
        return data

class KitViewResourceCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['buttonKit'] = packet.readLong()
        data['buttonKitOver'] = packet.readLong()
        return data

class KongregateLoginModelBase(Codec):
    pass

class KongregatePaymentModelBase(Codec):
    pass

class KongregatePaymentModelBase_receivePaymentTransaction(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['transactionId'] = packet.readString()
        return data

class KongregatePaymentModelServer_getPaymentTransaction(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['shopItemId'] = packet.readLong()
        return data

class KuaiwanModelBase(Codec):
    pass

class LaserPointerCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['fadeInTimeMs'] = packet.readInt()
        data['laserPointerBlueColor'] = None if optional.next() else packet.readString()
        data['laserPointerGreenColor'] = None if optional.next() else packet.readString()
        data['laserPointerRedColor'] = packet.readString()
        data['locallyVisible'] = bool(packet.readByte())
        return data

class LaserPointerModelBase_aimRemoteAtTank(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['targetTank'] = packet.readLong()
        data['localSpotPosition'] = Vector3d().read(packet, optional)
        return data

class LaserPointerModelBase_hideRemote(Codec):
    pass

class LaserPointerModelBase_updateRemoteDirection(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['projectionOnVerticalAxis'] = packet.readFloat()
        return data

class LaserPointerModelServer_aimAtTank(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['targetTank'] = packet.readLong()
        data['localSpotPosition'] = Vector3d().read(packet, optional)
        return data

class LaserPointerModelServer_hide(Codec):
    pass

class LaserPointerModelServer_updateDirection(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['projectionOnVerticalAxis'] = packet.readFloat()
        return data

class LatencyModelBase(Codec):
    pass

class LatencyModelBase_ping(Codec):
    pass

class LatencyModelServer_pong(Codec):
    pass

class LeogamingPaymentMobileModelBase(Codec):
    pass

class LeogamingPaymentMobileModelBase_error(Codec):
    pass

class LeogamingPaymentMobileModelBase_proceed(Codec):
    pass

class LeogamingPaymentMobileModelServer_confirmOrder(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['code'] = packet.readString()
        return data

class LeogamingPaymentMobileModelServer_createOrder(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['shopItem'] = packet.readLong()
        data['phone'] = packet.readString()
        return data

class LicenseClanShopItemModelBase(DescriptionModelCC):
    pass

class LicenseClanUserCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['clanLicense'] = bool(packet.readByte())
        data['licenseGarageObject'] = None if optional.next() else packet.readLong()
        data['licenseShopObject'] = None if optional.next() else packet.readLong()
        return data

class LicenseClanUserModelBase_addClanLicense(Codec):
    pass

class LicenseClanUserModelBase_removeClanLicense(Codec):
    pass

class LinkActivatorModelBase(Codec):
    pass

class LinkActivatorModelBase_alive(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['battleId'] = packet.readLong()
        return data

class LinkActivatorModelBase_battleNotFound(Codec):
    pass

class LinkActivatorModelBase_dead(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['battleId'] = packet.readLong()
        return data

class LinkActivatorModelServer_activateBattle(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['battleId'] = packet.readLong()
        return data

class LinkActivatorModelServer_isAlive(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['battleId'] = packet.readLong()
        return data

class LobbyLayoutModelBase(Codec):
    pass

class LobbyLayoutModelServer_exitFromBattle(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['destinationState'] = packet.readInt()
        return data

class LobbyLayoutModelServer_exitFromBattleToBattleLobby(Codec):
    pass

class LobbyLayoutModelServer_returnToBattle(Codec):
    pass

class LobbyLayoutModelServer_setBattleLobbyLayout(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['showBattleSelect'] = bool(packet.readByte())
        return data

class LobbyLayoutModelServer_showBattleSelect(Codec):
    pass

class LobbyLayoutModelServer_showClan(Codec):
    pass

class LobbyLayoutModelServer_showGarage(Codec):
    pass

class LobbyLayoutModelServer_showMatchmaking(Codec):
    pass

class LobbyLayoutNotifyModelBase(Codec):
    pass

class LobbyLayoutNotifyModelBase_beginLayoutSwitch(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['state'] = packet.readInt()
        return data

class LobbyLayoutNotifyModelBase_cancelPredictedLayoutSwitch(Codec):
    pass

class LobbyLayoutNotifyModelBase_endLayoutSwitch(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['origin'] = packet.readInt()
        data['state'] = packet.readInt()
        return data

class LoginByHashModelBase(Codec):
    pass

class LoginByHashModelBase_loginByHashFailed(Codec):
    pass

class LoginByHashModelBase_loginBySingleUseHashFailed(Codec):
    pass

class LoginByHashModelBase_remember2FaHash(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['hash'] = packet.readString()
        return data

class LoginByHashModelBase_rememberAccount(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['hash'] = packet.readString()
        return data

class LoginByHashModelBase_rememberUsersHash(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['hash'] = packet.readString()
        return data

class LoginByHashModelServer_loginByHash(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['hash'] = packet.readString()
        return data

class LoginByHashModelServer_loginByHashUsSpecial(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['hash'] = packet.readString()
        return data

class LoginByHashModelServer_loginBySingleUseHash(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['hash'] = packet.readString()
        return data

class LoginByHashModelServer_loginBySingleUseHashForFlashMigrant(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['hash'] = packet.readString()
        return data

class LoginModelBase(Codec):
    pass

class LoginModelBase_request2FaCode(Codec):
    pass

class LoginModelBase_wrong2FaCode(Codec):
    pass

class LoginModelBase_wrongPassword(Codec):
    pass

class LoginModelServer_login(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['uidOrEmail'] = packet.readString()
        data['password'] = packet.readString()
        data['remember'] = bool(packet.readByte())
        return data

class LoginModelServer_login2FA(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['code'] = packet.readString()
        return data

class LoginWithoutRegistrationModelBase(Codec):
    pass

class LoginWithoutRegistrationModelServer_loginWithoutRegistration(Codec):
    pass

class LootBoxModelBase(Codec):
    pass

class ContainerGivenItem(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['category'] = packet.readInt()
        data['count'] = packet.readInt()
        data['garageItemCategory'] = None if optional.next() else packet.readInt()
        data['garageItemId'] = packet.readLong()
        data['image'] = packet.readLong()
        data['name'] = packet.readString()
        return data

class LootBoxModelBase_openSuccessful(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(ContainerGivenItem().read(packet, optional))
        data['rewards'] = items
        return data

class LootBoxModelBase_updateCount(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['count'] = packet.readInt()
        return data

class LootBoxModelServer_open(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['amount'] = packet.readInt()
        return data

class LootBoxPackageCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['count'] = packet.readInt()
        data['name'] = packet.readString()
        return data

class LootboxAndPaintCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['button'] = packet.readLong()
        data['buttonOver'] = packet.readLong()
        data['crystalCount'] = packet.readInt()
        data['lootBoxPreview'] = packet.readLong()
        data['lootboxCount'] = packet.readInt()
        data['paintPreview'] = None if optional.next() else packet.readLong()
        return data

class MachineGunCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['maxRicochetAngle'] = packet.readFloat()
        data['maxRicochetCount'] = packet.readInt()
        data['shellRadius'] = packet.readFloat()
        data['shellSpeed'] = packet.readFloat()
        data['shotRange'] = packet.readFloat()
        data['spinDownTime'] = packet.readInt()
        data['spinUpTime'] = packet.readInt()
        data['started'] = bool(packet.readByte())
        data['state'] = packet.readFloat()
        data['temperatureHittingTime'] = packet.readInt()
        data['weaponTurnDecelerationCoeff'] = packet.readFloat()
        return data

class MachineGunModelBase_fire(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['shooter'] = packet.readLong()
        data['shotDirectionX'] = packet.readShort()
        data['shotDirectionY'] = packet.readShort()
        data['shotDirectionZ'] = packet.readShort()
        return data

class MachineGunModelBase_fireDummy(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['shooter'] = packet.readLong()
        return data

class MachineGunModelBase_reconfigureWeapon(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['spinUpTime'] = packet.readInt()
        data['spinDownTime'] = packet.readInt()
        return data

class MachineGunModelBase_setSpunState(Codec):
    pass

class MachineGunModelBase_startFire(Codec):
    pass

class MachineGunModelBase_stopFire(Codec):
    pass

class MachineGunModelServer_fireCommand(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['clientTime'] = packet.readInt()
        data['shotId'] = packet.readInt()
        data['shotDirectionX'] = packet.readShort()
        data['shotDirectionY'] = packet.readShort()
        data['shotDirectionZ'] = packet.readShort()
        return data

class MachineGunModelServer_fireDummyCommand(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['clientTime'] = packet.readInt()
        return data

class MachineGunModelServer_hitStaticCommand(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['clientTime'] = packet.readInt()
        data['shotId'] = packet.readInt()
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(Vector3d().read(packet, optional))
        data['impactPoints'] = items
        return data

class MachineGunModelServer_hitTargetCommand(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['clientTime'] = packet.readInt()
        data['target'] = packet.readLong()
        data['shotId'] = packet.readInt()
        data['targetPosition'] = Vector3d().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(Vector3d().read(packet, optional))
        data['impactPoints'] = items
        return data

class MachineGunModelServer_startFire(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['clientTime'] = packet.readInt()
        return data

class MachineGunModelServer_stopFire(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['clientTime'] = packet.readInt()
        return data

class MachineGunSFXCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['chainStartSound'] = packet.readLong()
        data['crumbsTexture'] = None if optional.next() else packet.readLong()
        data['dustTexture'] = None if optional.next() else packet.readLong()
        data['fireAcrossTexture'] = packet.readLong()
        data['fireAlongTexture'] = packet.readLong()
        data['lightingSFXEntity'] = LightingSFXEntity().read(packet, optional)
        data['longFailSound'] = packet.readLong()
        data['particleSFXEntity'] = None if optional.next() else ParticleEffectsEntity().read(packet, optional)
        data['ricochetSound1'] = packet.readLong()
        data['ricochetSound2'] = packet.readLong()
        data['ricochetSound3'] = packet.readLong()
        data['ricochetSound4'] = packet.readLong()
        data['ricochetSound5'] = packet.readLong()
        data['ricochetTexture'] = None if optional.next() else packet.readLong()
        data['shellFlightSound1'] = packet.readLong()
        data['shellFlightSound2'] = packet.readLong()
        data['shellFlightSound3'] = packet.readLong()
        data['shellFlightSound4'] = packet.readLong()
        data['shellFlightSound5'] = packet.readLong()
        data['shootEndSound'] = packet.readLong()
        data['shootSound1'] = packet.readLong()
        data['shootSound2'] = packet.readLong()
        data['shootSound3'] = packet.readLong()
        data['shootSound4'] = packet.readLong()
        data['shootSound5'] = packet.readLong()
        data['smokeTexture'] = packet.readLong()
        data['sparklesTexture'] = None if optional.next() else packet.readLong()
        data['staticHitSound1'] = packet.readLong()
        data['staticHitSound2'] = packet.readLong()
        data['staticHitSound3'] = packet.readLong()
        data['staticHitSound4'] = packet.readLong()
        data['staticHitSound5'] = packet.readLong()
        data['tankHitSound1'] = packet.readLong()
        data['tankHitSound2'] = packet.readLong()
        data['tankHitSound3'] = packet.readLong()
        data['tankHitSound4'] = packet.readLong()
        data['tankHitSound5'] = packet.readLong()
        data['tankSparklesTexture'] = None if optional.next() else packet.readLong()
        data['tracerTexture'] = None if optional.next() else packet.readLong()
        return data

class MailruGamesLoginModelBase(Codec):
    pass

class MailruGamesPaymentModelBase(Codec):
    pass

class MailruGamesPaymentModelBase_receivePaymentTransaction(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['orderId'] = packet.readString()
        data['price'] = packet.readDouble()
        data['description'] = packet.readString()
        return data

class MailruGamesPaymentModelServer_getPaymentTransaction(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['shopItemId'] = packet.readLong()
        return data

class MammothUltimateCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['active'] = bool(packet.readByte())
        data['effectLoopSound'] = packet.readLong()
        data['effectRadius'] = packet.readFloat()
        data['effectSparks1Sound'] = packet.readLong()
        data['effectSparks2Sound'] = packet.readLong()
        data['effectSparks3Sound'] = packet.readLong()
        data['effectSparks4Sound'] = packet.readLong()
        data['effectStartSound'] = packet.readLong()
        data['effectStopSound'] = packet.readLong()
        data['heart'] = packet.readLong()
        data['shine'] = packet.readLong()
        data['sparkles'] = packet.readLong()
        return data

class MammothUltimateModelBase_activateField(Codec):
    pass

class MammothUltimateModelBase_damageByField(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['enemyId'] = packet.readLong()
        return data

class MammothUltimateModelBase_deactivateField(Codec):
    pass

class MapBonusLightCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['bonusLightIntensity'] = packet.readFloat()
        data['hwColorAdjust'] = ColorAdjustParams().read(packet, optional)
        data['softColorAdjust'] = ColorAdjustParams().read(packet, optional)
        return data

class MapInfoCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['defaultTheme'] = packet.readInt()
        data['enabled'] = bool(packet.readByte())
        data['mapId'] = packet.readLong()
        data['mapName'] = packet.readString()
        data['matchmakingMark'] = bool(packet.readByte())
        data['maxPeople'] = packet.readShort()
        data['preview'] = packet.readLong()
        data['rankLimit'] = Range().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(packet.readInt())
        data['supportedModes'] = items
        data['theme'] = packet.readInt()
        return data

class MatchmakingContinueBattleModelBase(Codec):
    pass

class MatchmakingContinueBattleModelServer_continueBattle(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['mode'] = packet.readInt()
        return data

class MatchmakingGroupInfoCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(packet.readLong())
        data['groupUserIds'] = items
        data['hasGroups'] = bool(packet.readByte())
        return data

class MatchmakingGroupInviteModelBase(Codec):
    pass

class MatchmakingGroupInviteModelBase_accepted(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['user'] = packet.readLong()
        return data

class MatchmakingGroupInviteModelBase_rejectInvitationToGroupDisabled(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['user'] = packet.readLong()
        return data

class MatchmakingGroupInviteModelBase_rejectUserAlreadyInGroup(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['user'] = packet.readLong()
        return data

class MatchmakingGroupInviteModelBase_rejectUserOffline(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['user'] = packet.readLong()
        return data

class MatchmakingGroupInviteModelBase_rejected(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['user'] = packet.readLong()
        return data

class MatchmakingGroupInviteModelBase_sendInvite(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['leader'] = packet.readLong()
        return data

class MatchmakingGroupInviteModelServer_accept(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['senderId'] = packet.readLong()
        return data

class MatchmakingGroupInviteModelServer_reject(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['senderId'] = packet.readLong()
        return data

class MatchmakingGroupInviteModelServer_sendInvite(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['receiver'] = packet.readLong()
        return data

class MatchmakingGroupLifecycleModelBase(Codec):
    pass

class MatchmakingGroupLifecycleModelServer_createGroup(Codec):
    pass

class MatchmakingGroupLifecycleModelServer_leaveGroup(Codec):
    pass

class MatchmakingGroupLifecycleModelServer_removeUser(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['user'] = packet.readLong()
        return data

class MatchmakingUserData(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['armorModification'] = packet.readInt()
        data['armorName'] = packet.readString()
        data['armorUpgradeLevel'] = packet.readInt()
        data['id'] = packet.readLong()
        data['leader'] = bool(packet.readByte())
        data['local'] = bool(packet.readByte())
        data['rank'] = packet.readInt()
        data['uid'] = packet.readString()
        data['userIsReady'] = bool(packet.readByte())
        data['weaponModification'] = packet.readInt()
        data['weaponName'] = packet.readString()
        data['weaponUpgradeLevel'] = packet.readInt()
        return data

class MatchmakingGroupCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(MatchmakingUserData().read(packet, optional))
        data['users'] = items
        return data

class MatchmakingGroupNotifyModelBase_addUser(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['userData'] = MatchmakingUserData().read(packet, optional)
        return data

class MatchmakingGroupNotifyModelBase_removeUser(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['userId'] = packet.readLong()
        return data

class MountItemsUserData(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['id'] = packet.readLong()
        data['itemCategory'] = packet.readInt()
        data['modification'] = packet.readInt()
        data['name'] = packet.readString()
        data['upgradeLevel'] = packet.readInt()
        return data

class MatchmakingGroupNotifyModelBase_userMountedItem(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['userData'] = MountItemsUserData().read(packet, optional)
        return data

class MatchmakingGroupNotifyModelBase_userNotReady(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['userId'] = packet.readLong()
        return data

class MatchmakingGroupNotifyModelBase_userReady(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['userId'] = packet.readLong()
        return data

class WarInfo(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['description'] = packet.readString()
        data['icon'] = packet.readLong()
        data['minRank'] = packet.readInt()
        data['title'] = packet.readString()
        data['url'] = packet.readString()
        return data

class MatchmakingModeRank(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['matchmakingMode'] = packet.readInt()
        data['rank'] = packet.readInt()
        return data

class MatchmakingLayoutCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(packet.readInt())
        data['disabledModes'] = items
        data['groupsInEventMode'] = bool(packet.readByte())
        data['holidayDescription'] = None if optional.next() else packet.readString()
        data['holidayEnabled'] = bool(packet.readByte())
        data['holidayIcon'] = None if optional.next() else packet.readLong()
        data['holidayTitle'] = None if optional.next() else packet.readString()
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(MatchmakingModeRank().read(packet, optional))
        data['matchmakingModeRanks'] = items
        data['maxUsersInGroup'] = packet.readInt()
        data['minRankForProBattle'] = packet.readInt()
        data['warInfo'] = None if optional.next() else WarInfo().read(packet, optional)
        return data

class MatchmakingLayoutModelBase_hideMatchmakingView(Codec):
    pass

class MatchmakingLayoutModelBase_showMatchmakingView(Codec):
    pass

class MatchmakingNotifyModelBase(Codec):
    pass

class MatchmakingNotifyModelBase_registrationCancelled(Codec):
    pass

class MatchmakingNotifyModelBase_registrationTimeout(Codec):
    pass

class MatchmakingNotifyModelBase_userRegistrationSuccessful(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['avgWaitTimeInSeconds'] = packet.readInt()
        data['mode'] = packet.readInt()
        return data

class MatchmakingQueueModelBase(Codec):
    pass

class MatchmakingQueueModelServer_register(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['mode'] = packet.readInt()
        return data

class MatchmakingQueueModelServer_unregister(Codec):
    pass

class MatchmakingSpectatorEntranceModelBase(Codec):
    pass

class MatchmakingSpectatorEntranceModelBase_enterFailedNoSuitableBattles(Codec):
    pass

class MatchmakingSpectatorEntranceModelServer_enter(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['mode'] = packet.readInt()
        return data

class MediumTimeOfferCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['paintPreview'] = packet.readLong()
        return data

class MemoryStatisticsModelBase(Codec):
    pass

class MemoryStatisticsModelServer_collect(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['gpuEnabled'] = bool(packet.readByte())
        data['totalMemoryKB'] = packet.readInt()
        return data

class MeteorDescriptor(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['groundPosition'] = Vector3d().read(packet, optional)
        data['lifeTimeMs'] = packet.readInt()
        data['timeToFlyMs'] = packet.readInt()
        data['upperPosition'] = Vector3d().read(packet, optional)
        return data

class MeteorStormCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['bigSplashRadius'] = packet.readFloat()
        data['craterDecal'] = None if optional.next() else packet.readLong()
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(MeteorDescriptor().read(packet, optional))
        data['currentMeteors'] = items
        data['flameOffset'] = packet.readFloat()
        data['impactSoundTimelabel'] = packet.readInt()
        data['meteorArrivingSound'] = None if optional.next() else packet.readLong()
        data['meteorDistantSound'] = None if optional.next() else packet.readLong()
        data['meteorFlyDistance'] = packet.readFloat()
        data['meteorModel'] = None if optional.next() else packet.readLong()
        data['meteorSpeed'] = packet.readFloat()
        data['nuclearBangFlame'] = None if optional.next() else packet.readLong()
        data['nuclearBangLight'] = None if optional.next() else packet.readLong()
        data['nuclearBangSmoke'] = None if optional.next() else packet.readLong()
        data['nuclearBangSound'] = None if optional.next() else packet.readLong()
        data['nuclearBangWave'] = None if optional.next() else packet.readLong()
        data['preferredFallAngle'] = packet.readFloat()
        data['rotationSpeed'] = packet.readFloat()
        data['smallSplashRadius'] = packet.readFloat()
        data['splashDamageImpact'] = packet.readFloat()
        data['splashDamageMinPercent'] = packet.readFloat()
        data['tailFlame'] = None if optional.next() else packet.readLong()
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(LightEffectItem().read(packet, optional))
        data['tailLight'] = items
        data['tailSmoke'] = None if optional.next() else packet.readLong()
        return data

class MeteorStormModelBase_meteorNotification(Codec):
    pass

class MeteorStormModelBase_spawnMeteor(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['upperPoint'] = Vector3d().read(packet, optional)
        data['spawnPosition'] = Vector3d().read(packet, optional)
        data['timeToFlyMs'] = packet.readInt()
        return data

class MigrationInModelBase(Codec):
    pass

class MigrationInModelBase_requestForPassword(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['oldUid'] = packet.readString()
        return data

class MigrationInModelBase_requestForUidAndPassword(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['oldUid'] = packet.readString()
        return data

class MigrationInModelBase_useCommonEntrance(Codec):
    pass

class MigrationInModelServer_completeMigration(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['password'] = packet.readString()
        return data

class MigrationInModelServer_completeMigrationWithUid(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['uid'] = packet.readString()
        data['password'] = packet.readString()
        return data

class MigrationInModelServer_validateMigrationHash(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['migrationHash'] = packet.readString()
        return data

class MigrationOutModelBase(Codec):
    pass

class MigrationOutModelBase_navigateUserTo(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['url'] = packet.readString()
        return data

class MigrationOutModelBase_showError(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['errorText'] = packet.readString()
        return data

class MigrationOutModelBase_showMigrationAlert(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['uid'] = packet.readString()
        return data

class MigrationOutModelServer_confirmMigrate(Codec):
    pass

class MiniclipLoginModelBase(Codec):
    pass

class MiniplayLoginModelBase(Codec):
    pass

class MiniplayPaymentModelBase(Codec):
    pass

class MiniplayPaymentModelBase_receivePaymentData(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['price'] = packet.readInt()
        data['description'] = packet.readString()
        data['orderId'] = packet.readString()
        data['sign'] = packet.readString()
        return data

class MiniplayPaymentModelServer_getPaymentData(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['shopItemId'] = packet.readLong()
        return data

class MobileQuestReward(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['count'] = packet.readInt()
        data['hint'] = packet.readString()
        data['name'] = packet.readString()
        data['preview'] = packet.readLong()
        data['step'] = packet.readInt()
        return data

class MobileQuestCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['countSteps'] = packet.readInt()
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(MobileQuestReward().read(packet, optional))
        data['rewards'] = items
        data['skipStepShopItemId'] = packet.readLong()
        return data

class MobileQuestProfileCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['currentStep'] = packet.readInt()
        data['eventMember'] = bool(packet.readByte())
        data['remainingTimeInSec'] = packet.readLong()
        return data

class MobileQuestProfileModelBase_changeProgress(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['currentStep'] = packet.readInt()
        return data

class ModificationCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['baseItemId'] = packet.readLong()
        data['modificationIndex'] = packet.readByte()
        return data

class MountedSkinCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['item'] = packet.readLong()
        return data

class MountShotSkinModelBase(MountedSkinCC):
    pass

class MountShotSkinModelServer_mountSkin(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['skin'] = packet.readLong()
        return data

class MountSkinItemModelBase(MountedSkinCC):
    pass

class MountSkinItemModelServer_mountSkin(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['skin'] = packet.readLong()
        return data

class MountedResistancesCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(None if optional.next() else packet.readLong())
        data['resistances'] = items
        return data

class MountedResistancesModelServer_buyResistance(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['resistance'] = packet.readLong()
        data['index'] = packet.readInt()
        data['currency'] = packet.readInt()
        return data

class MountedResistancesModelServer_mount(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['index'] = packet.readInt()
        data['resistance'] = packet.readLong()
        return data

class MountedResistancesModelServer_unmount(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['resistance'] = packet.readLong()
        return data

class MoveUserToServerModelBase(Codec):
    pass

class MoveUserToServerModelBase_move(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['serverNumber'] = packet.readInt()
        return data

class NewPresentsShowingModelBase(Codec):
    pass

class NewPresentsShowingModelBase_showAlert(Codec):
    pass

class NewPresentsShowingModelServer_showPresents(Codec):
    pass

class NewReferralsNotifierModelBase(Codec):
    pass

class NewReferralsNotifierModelBase_notifyNewReferralsCountUpdated(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['count'] = packet.readInt()
        return data

class NewReferralsNotifierModelBase_notifyReferralAdded(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['newReferralsCount'] = packet.readInt()
        return data

class NewReferralsNotifierModelServer_requestNewReferralsCount(Codec):
    pass

class NewReferralsNotifierModelServer_resetNewReferralsCount(Codec):
    pass

class NewbieKitViewModelBase(Codec):
    pass

class NewbieRegistrationModelBase(Codec):
    pass

class NewbieRegistrationModelServer_markUserAsNewbie(Codec):
    pass

class NewsItemData(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['dateInSeconds'] = packet.readInt()
        data['description'] = packet.readString()
        data['endDate'] = packet.readInt()
        data['header'] = packet.readString()
        data['id'] = packet.readLong()
        data['imageUrl'] = packet.readString()
        return data

class NewsShowingCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(NewsItemData().read(packet, optional))
        data['newsItems'] = items
        return data

class NewsShowingModelBase_removeNewsItem(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['id'] = packet.readLong()
        return data

class NewsShowingModelBase_sendNewsItem(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['newsItemData'] = NewsItemData().read(packet, optional)
        return data

class NotificationEnabledCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['receiveBattleInvite'] = bool(packet.readByte())
        return data

class NotificationEnabledModelServer_enable(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['receive'] = bool(packet.readByte())
        return data

class NotificationTokenModelBase(Codec):
    pass

class NotificationTokenModelServer_storeToken(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['platform'] = packet.readInt()
        data['token'] = packet.readString()
        return data

class NuclearRechargeCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['activationDelayMs'] = packet.readInt()
        data['maximumChargePercent'] = packet.readInt()
        data['rechargeSound'] = packet.readLong()
        return data

class NuclearRechargeModelBase_onFailed(Codec):
    pass

class NuclearRechargeModelBase_onRecharged(Codec):
    pass

class NuclearRechargeModelServer_recharge(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['clientTime'] = packet.readInt()
        return data

class LodLevelCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['lodType'] = packet.readInt()
        data['resourceId'] = packet.readLong()
        return data

class Object3DSCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(LodLevelCC().read(packet, optional))
        data['resource'] = items
        return data

class OdnoklassnikiInternalLoginModelBase(Codec):
    pass

class OdnoklassnikiPaymentModelBase(Codec):
    pass

class OdnoklassnikiPaymentModelBase_receivePaymentTransaction(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['shopOrderId'] = packet.readString()
        data['description'] = packet.readString()
        data['price'] = packet.readString()
        return data

class OdnoklassnikiPaymentModelServer_getPaymentTransaction(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['shopItemId'] = packet.readLong()
        return data

class OnceADayActionCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['todayRestartTime'] = packet.readInt()
        return data

class OnlineNotifierModelBase(Codec):
    pass

class OnlineNotifierData(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['online'] = bool(packet.readByte())
        data['serverNumber'] = packet.readInt()
        data['timeSinceLastVisitInSec'] = packet.readLong()
        data['userId'] = packet.readLong()
        return data

class OnlineNotifierModelBase_setOnline(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(OnlineNotifierData().read(packet, optional))
        data['users'] = items
        return data

class OnlyUrlPaymentModelBase(Codec):
    pass

class OnlyUrlPaymentModelBase_receiveUrl(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['url'] = PaymentRequestUrl().read(packet, optional)
        return data

class OnlyUrlPaymentModelServer_getPaymentUrl(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['shopItemId'] = packet.readLong()
        return data

class PaintPackageCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['description'] = None if optional.next() else packet.readString()
        data['group'] = packet.readInt()
        data['name'] = packet.readString()
        return data

class PaladinAuraVisualCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['auraLoopSound'] = packet.readLong()
        data['auraOffSound'] = packet.readLong()
        data['auraOnSound'] = packet.readLong()
        data['blueRay'] = packet.readLong()
        data['blueRayTip'] = packet.readLong()
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(packet.readLong())
        data['covered'] = items
        data['heart'] = packet.readLong()
        data['redRay'] = packet.readLong()
        data['redRayTip'] = packet.readLong()
        data['shine'] = packet.readLong()
        return data

class PaladinAuraVisualModelBase_coverTank(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['tankId'] = packet.readLong()
        return data

class PaladinAuraVisualModelBase_turnAuraOff(Codec):
    pass

class PaladinAuraVisualModelBase_turnAuraOn(Codec):
    pass

class PaladinAuraVisualModelBase_uncoverTank(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['tankId'] = packet.readLong()
        return data

class PanelModelBase(Codec):
    pass

class Partner2144ModelBase(Codec):
    pass

class Partner360PlatformModelBase(Codec):
    pass

class Partner4399ModelBase(Codec):
    pass

class Partner7k7kModelBase(Codec):
    pass

class PassToShopCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['passToShopEnabled'] = bool(packet.readByte())
        return data

class PasswordChangeModelBase(Codec):
    pass

class PasswordChangeModelBase_emailNotFound(Codec):
    pass

class PasswordChangeModelBase_emailWithRestoreLinkSuccessfullySent(Codec):
    pass

class PasswordChangeModelBase_passwordRecoveryHashCorrect(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['currentEmail'] = packet.readString()
        return data

class PasswordChangeModelBase_passwordRecoveryHashWrong(Codec):
    pass

class PasswordChangeModelBase_setPasswordChangeResult(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['success'] = bool(packet.readByte())
        data['error'] = packet.readString()
        return data

class PasswordChangeModelServer_changePasswordAndEmail(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['changePasswordHash'] = packet.readString()
        data['newPassword'] = packet.readString()
        data['newEmail'] = packet.readString()
        return data

class PasswordChangeModelServer_checkPasswordChangeHash(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['changePasswordHash'] = packet.readString()
        return data

class PasswordChangeModelServer_resetChangePasswordHashAndEntranceHash(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['changePasswordHash'] = packet.readString()
        return data

class PasswordChangeModelServer_sendUsersRestorePasswordLink(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['email'] = packet.readString()
        return data

class PayGardenPaymentCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['productType'] = None if optional.next() else packet.readInt()
        return data

class PayGardenPaymentModelBase_receiveUrl(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['url'] = PaymentRequestUrl().read(packet, optional)
        return data

class PayGardenPaymentModelServer_getPaymentUrl(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['shopItemId'] = packet.readLong()
        return data

class PayPalPaymentModelBase(Codec):
    pass

class PayPalPaymentModelBase_receiveErrorUrl(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['url'] = PaymentRequestUrl().read(packet, optional)
        return data

class PayPalPaymentModelBase_receivePaymentUrl(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['url'] = PaymentRequestUrl().read(packet, optional)
        return data

class PayPalPaymentModelServer_getPaymentUrl(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['shopItemId'] = packet.readLong()
        return data

class PaymentButtonCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['enabledFullPayment'] = bool(packet.readByte())
        data['paymentUrl'] = None if optional.next() else PaymentRequestUrl().read(packet, optional)
        return data

class PaymentLoaderCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['coinPaymentProviderUrl'] = packet.readString()
        data['enableCoinPaymentProvider'] = bool(packet.readByte())
        return data

class PaymentLoaderModelServer_loadPayment(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['shopCategory'] = packet.readInt()
        return data

class PaymentLoaderModelServer_loadPaymentWithGarageItem(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['item'] = packet.readLong()
        return data

class PaymentLoaderModelServer_loadPaymentWithShopItem(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['shopItem'] = packet.readLong()
        return data

class PaymentLoaderModelServer_loadPaymentWithShopItemId(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['shopItemId'] = packet.readLong()
        return data

class PayModeCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['customManualDescription'] = None if optional.next() else packet.readString()
        data['description'] = packet.readString()
        data['image'] = None if optional.next() else packet.readLong()
        data['name'] = packet.readString()
        data['order'] = packet.readInt()
        return data

class PaymentCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['currentCategoryType'] = packet.readInt()
        data['hideLinks'] = bool(packet.readByte())
        data['manualDescription'] = packet.readString()
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(packet.readLong())
        data['payModes'] = items
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(packet.readLong())
        data['shopCategories'] = items
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(packet.readLong())
        data['shopItems'] = items
        return data

class PaymentModelBase_removeItemsFromStore(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(packet.readLong())
        data['items'] = items
        return data

class PerformanceCollectorModelBase(Codec):
    pass

class PerformanceData(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['bestFps'] = packet.readInt()
        data['gpu'] = packet.readString()
        data['medianFps'] = packet.readInt()
        data['samples'] = packet.readInt()
        data['settings'] = packet.readString()
        data['worstFps'] = packet.readInt()
        return data

class PerformanceCollectorModelServer_collect(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['data'] = PerformanceData().read(packet, optional)
        return data

class PerformanceCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['alertFPSRatioThreshold'] = packet.readFloat()
        data['alertFPSThreshold'] = packet.readFloat()
        data['alertMinTestTime'] = packet.readFloat()
        data['alertPingRatioThreshold'] = packet.readFloat()
        data['alertPingThreshold'] = packet.readFloat()
        data['indicatorHighFPS'] = packet.readInt()
        data['indicatorHighFPSColor'] = None if optional.next() else packet.readString()
        data['indicatorHighPing'] = packet.readInt()
        data['indicatorHighPingColor'] = None if optional.next() else packet.readString()
        data['indicatorLowFPS'] = packet.readInt()
        data['indicatorLowFPSColor'] = None if optional.next() else packet.readString()
        data['indicatorLowPing'] = packet.readInt()
        data['indicatorLowPingColor'] = None if optional.next() else packet.readString()
        data['indicatorVeryHighPing'] = packet.readInt()
        data['indicatorVeryHighPingColor'] = None if optional.next() else packet.readString()
        data['indicatorVeryLowFPS'] = packet.readInt()
        data['indicatorVeryLowFPSColor'] = None if optional.next() else packet.readString()
        data['qualityFPSThreshold'] = packet.readFloat()
        data['qualityIdleTime'] = packet.readFloat()
        data['qualityMaxAttempts'] = packet.readInt()
        data['qualityRatioThreshold'] = packet.readFloat()
        data['qualityTestTime'] = packet.readFloat()
        data['qualityVisualizationSpeed'] = packet.readFloat()
        return data

class PlatBoxPaymentModelBase(Codec):
    pass

class PlatBoxPaymentModelBase_paymentError(Codec):
    pass

class PlatBoxPaymentModelBase_paymentInited(Codec):
    pass

class PlatBoxPaymentModelBase_phoneIsInvalid(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['phone'] = packet.readString()
        return data

class PlatBoxPaymentModelBase_phoneIsValid(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['phone'] = packet.readString()
        return data

class PlatBoxPaymentModelServer_checkNumber(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['phone'] = packet.readString()
        return data

class PlatBoxPaymentModelServer_initPayment(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['phone'] = packet.readString()
        data['shopItemId'] = packet.readLong()
        return data

class ClientTeamPoint(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['flagBasePosition'] = Vector3d().read(packet, optional)
        data['id'] = packet.readInt()
        data['teamType'] = packet.readInt()
        return data

class FlagFlyPoint(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['mode'] = packet.readInt()
        data['position'] = Vector3d().read(packet, optional)
        data['rotation_w'] = packet.readDouble()
        data['rotation_x'] = packet.readDouble()
        data['rotation_y'] = packet.readDouble()
        data['rotation_z'] = packet.readDouble()
        data['time'] = packet.readInt()
        return data

class ClientFlagFlyingData(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['currentTime'] = packet.readInt()
        data['falling'] = bool(packet.readByte())
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(FlagFlyPoint().read(packet, optional))
        data['points'] = items
        return data

class ClientFlag(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['fallingData'] = ClientFlagFlyingData().read(packet, optional)
        data['flagCarrierId'] = None if optional.next() else packet.readLong()
        data['flagId'] = packet.readInt()
        data['flagPosition'] = None if optional.next() else Vector3d().read(packet, optional)
        data['state'] = packet.readInt()
        return data

class PointBasedBattleCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(ClientFlag().read(packet, optional))
        data['flags'] = items
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(ClientTeamPoint().read(packet, optional))
        data['teamPoints'] = items
        return data

class PointBasedBattleModelBase_dropFlag(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['flagId'] = packet.readInt()
        data['position'] = Vector3d().read(packet, optional)
        return data

class PointBasedBattleModelBase_dropFlyingFlag(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['id'] = packet.readInt()
        data['pointId'] = packet.readInt()
        data['fallingData'] = ClientFlagFlyingData().read(packet, optional)
        return data

class PointBasedBattleModelBase_exileFlag(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['id'] = packet.readInt()
        return data

class PointBasedBattleModelBase_flagDelivered(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['flagId'] = packet.readInt()
        data['baseId'] = packet.readInt()
        data['delivererTankId'] = packet.readLong()
        return data

class PointBasedBattleModelBase_flagTaken(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['flagId'] = packet.readInt()
        data['tankId'] = packet.readLong()
        return data

class PointBasedBattleModelBase_returnFlagToBase(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['flagId'] = packet.readInt()
        data['tank'] = None if optional.next() else packet.readLong()
        return data

class PointBasedBattleModelBase_throwFlyingFlag(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['id'] = packet.readInt()
        data['clientFlagFlyingData'] = ClientFlagFlyingData().read(packet, optional)
        return data

class PointBasedBattleModelServer_ballTouched(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['flagId'] = packet.readInt()
        return data

class PointBasedBattleModelServer_dropFlagCommand(Codec):
    pass

class PossibleRewardsModelBase(Codec):
    pass

class DescriptionRewards(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['category'] = None if optional.next() else packet.readInt()
        data['count'] = packet.readInt()
        data['description'] = None if optional.next() else packet.readString()
        data['name'] = packet.readString()
        data['preview'] = packet.readLong()
        return data

class PossibleRewardsModelBase_setPossibleRewards(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(DescriptionRewards().read(packet, optional))
        data['rewards'] = items
        return data

class PossibleRewardsModelServer_getPossibleRewards(Codec):
    pass

class PremiumAccountAlertCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['localRuntimeUser'] = bool(packet.readByte())
        data['needShowNotificationCompletionPremium'] = bool(packet.readByte())
        data['needShowWelcomeAlert'] = bool(packet.readByte())
        data['reminderCompletionPremiumTime'] = packet.readFloat()
        data['wasShowAlertForFirstPurchasePremium'] = bool(packet.readByte())
        data['wasShowReminderCompletionPremium'] = bool(packet.readByte())
        return data

class PremiumAccountAlertModelBase_showWelcomeAlert(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['wasShowAlertForFirstPurchasePremium'] = bool(packet.readByte())
        return data

class PremiumAccountAlertModelServer_confirmShowNotificationCompletionPremium(Codec):
    pass

class PremiumAccountAlertModelServer_confirmShowReminderCompletionPremium(Codec):
    pass

class PremiumAccountAlertModelServer_confirmShowWelcomeAlert(Codec):
    pass

class PremiumInDepotModelBase(Codec):
    pass

class PremiumItemCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['premiumItem'] = bool(packet.readByte())
        return data

class PremiumNotifierCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['lifeTimeInSeconds'] = packet.readInt()
        return data

class PremiumNotifierData(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['hasPremium'] = bool(packet.readByte())
        data['userId'] = packet.readLong()
        return data

class PremiumNotifierModelBase_sendData(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(PremiumNotifierData().read(packet, optional))
        data['users'] = items
        return data

class PremiumNotifierModelBase_updateTimeLeft(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['leftTimeInSeconds'] = packet.readInt()
        return data

class PremiumNotifierModelServer_premiumEnded(Codec):
    pass

class PremiumPackageCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['durationInDays'] = packet.readInt()
        return data

class PresentGivenModelBase(Codec):
    pass

class PresentGivenModelServer_removePresent(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['presentId'] = packet.readLong()
        return data

class PresentItemCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['image'] = packet.readLong()
        return data

class PresentItem(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['banned'] = bool(packet.readByte())
        data['id'] = packet.readLong()
        data['present'] = packet.readLong()
        data['presenter'] = packet.readLong()
        data['text'] = packet.readString()
        return data

class PresentsCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(PresentItem().read(packet, optional))
        data['presents'] = items
        return data

class PresentPurchaseModelBase(Codec):
    pass

class PresentPurchaseModelBase_setUidAvailable(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['available'] = bool(packet.readByte())
        return data

class PresentPurchaseModelServer_checkUid(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['uid'] = packet.readString()
        return data

class PresentPurchaseModelServer_purchasePresent(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['recipientUid'] = packet.readString()
        data['presentItem'] = packet.readLong()
        data['text'] = packet.readString()
        data['expectedPrice'] = packet.readInt()
        return data

class PresentsSettingsCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['receivePresentsEnabled'] = bool(packet.readByte())
        return data

class PresentsSettingsModelServer_setReceivePresents(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['enabled'] = bool(packet.readByte())
        return data

class PriceRangeCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['enabled'] = bool(packet.readByte())
        data['minimum'] = packet.readDouble()
        return data

class ProAbonementRankDiscountCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['percentDiscountPerRank'] = packet.readDouble()
        return data

class ProAbonementNotifierCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['abonementRemainingTimeInSec'] = packet.readInt()
        return data

class ProBattleNotifierModelBase_setRemainingAbonementTimeSec(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['remainingTime'] = packet.readInt()
        return data

class ProductPurchaseModelBase(Codec):
    pass

class ProductPurchaseModelBase_goodsPurchased(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['itemId'] = None if optional.next() else packet.readLong()
        data['data'] = DonationData().read(packet, optional)
        data['showAlert'] = bool(packet.readByte())
        return data

class ProductPurchaseModelBase_hideItem(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['id'] = packet.readLong()
        return data

class ProductPurchaseModelBase_notEnoughCash(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['itemId'] = None if optional.next() else packet.readLong()
        data['currency'] = packet.readInt()
        return data

class ProductPurchaseModelBase_purchaseFailed(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['itemId'] = None if optional.next() else packet.readLong()
        return data

class ProductPurchaseModelServer_buyForCoinById(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['itemId'] = packet.readLong()
        data['amount'] = packet.readInt()
        data['sourceCategory'] = packet.readInt()
        return data

class ProductPurchaseModelServer_buyForCrystalById(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['itemId'] = packet.readLong()
        data['amount'] = packet.readInt()
        data['sourceCategory'] = packet.readInt()
        return data

class ProductPurchaseModelServer_buyForShardById(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['itemId'] = packet.readLong()
        data['amount'] = packet.readInt()
        data['sourceCategory'] = packet.readInt()
        return data

class CountryPhoneInfo(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['code'] = packet.readInt()
        data['name'] = packet.readString()
        data['phoneLength'] = packet.readInt()
        return data

class QiwiPaymentCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(CountryPhoneInfo().read(packet, optional))
        data['countryPhoneCodes'] = items
        return data

class QiwiPaymentModelBase_error(Codec):
    pass

class QiwiPaymentModelBase_receiveUrl(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['url'] = PaymentRequestUrl().read(packet, optional)
        return data

class QiwiPaymentModelServer_getPaymentUrl(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['shopItemId'] = packet.readLong()
        data['phone'] = packet.readString()
        return data

class QuantityRestrictionModelBase(Codec):
    pass

class QuantityRestrictionModelBase_reservationAbort(Codec):
    pass

class QuestNotifierCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['hasCompletedDailyQuests'] = bool(packet.readByte())
        data['hasCompletedWeeklyQuests'] = bool(packet.readByte())
        data['hasMainQuestChanges'] = bool(packet.readByte())
        data['hasNewDailyQuests'] = bool(packet.readByte())
        data['hasNewWeeklyQuests'] = bool(packet.readByte())
        data['hasNotCompletedQuests'] = bool(packet.readByte())
        return data

class QuestNotifierModelBase_completedDailyQuest(Codec):
    pass

class QuestNotifierModelBase_completedWeeklyQuests(Codec):
    pass

class QuestNotifierModelBase_hasMainQuestChanges(Codec):
    pass

class QuestNotifierModelBase_newInDailyQuests(Codec):
    pass

class QuestNotifierModelBase_newInWeeklyQuests(Codec):
    pass

class QuestNotifierModelServer_completedDailyQuestViewed(Codec):
    pass

class QuestNotifierModelServer_completedWeeklyQuestViewed(Codec):
    pass

class QuestNotifierModelServer_mainQuestViewed(Codec):
    pass

class QuestNotifierModelServer_newDailyQuestViewed(Codec):
    pass

class QuestNotifierModelServer_newWeeklyQuestViewed(Codec):
    pass

class RailgunCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['chargingTimeMsec'] = packet.readInt()
        data['weakeningCoeff'] = packet.readFloat()
        return data

class RailgunModelBase_fire(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['shooter'] = packet.readLong()
        data['staticHitPoint'] = None if optional.next() else Vector3d().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(packet.readLong())
        data['targets'] = items
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(Vector3d().read(packet, optional))
        data['targetHitPoints'] = items
        return data

class RailgunModelBase_fireDummy(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['shooter'] = packet.readLong()
        return data

class RailgunModelBase_immediateReload(Codec):
    pass

class RailgunModelBase_reconfigureWeapon(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['chargingTime'] = packet.readInt()
        return data

class RailgunModelBase_startCharging(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['shooter'] = packet.readLong()
        return data

class RailgunModelServer_fireCommand(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['clientTime'] = packet.readInt()
        data['staticHitPoint'] = None if optional.next() else Vector3d().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(packet.readLong())
        data['targets'] = items
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(Vector3d().read(packet, optional))
        data['targetHitPoints'] = items
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(packet.readShort())
        data['targetIncarnations'] = items
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(Vector3d().read(packet, optional))
        data['targetPositions'] = items
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(Vector3d().read(packet, optional))
        data['hitPointsWorld'] = items
        return data

class RailgunModelServer_fireDummyCommand(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['clientTime'] = packet.readInt()
        return data

class RailgunModelServer_startChargingCommand(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['time'] = packet.readInt()
        return data

class RailgunShootSFXCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['chargingPart1'] = packet.readLong()
        data['chargingPart2'] = packet.readLong()
        data['chargingPart3'] = packet.readLong()
        data['hitMarkTexture'] = packet.readLong()
        data['lightingSFXEntity'] = LightingSFXEntity().read(packet, optional)
        data['powTexture'] = packet.readLong()
        data['ringsTexture'] = packet.readLong()
        data['shotSound'] = packet.readLong()
        data['smokeImage'] = packet.readLong()
        data['sphereTexture'] = packet.readLong()
        data['trailImage'] = packet.readLong()
        return data

class RamblerLoginModelBase(Codec):
    pass

class RamblerPaymentModelBase(Codec):
    pass

class RamblerPaymentModelBase_receivePaymentTransaction(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['transactionId'] = packet.readString()
        return data

class RamblerPaymentModelServer_getPaymentTransaction(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['shopItemId'] = packet.readLong()
        return data

class RandomGoldBonusTakeModelBase(Codec):
    pass

class RandomGoldBonusTakeModelBase_showBonusNotification(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['uid'] = packet.readString()
        data['tank'] = packet.readLong()
        data['battleTopMessage'] = packet.readString()
        data['battleLogMessage'] = packet.readString()
        return data

class RankInfo(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['index'] = packet.readInt()
        data['name'] = packet.readString()
        return data

class RankLoaderCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(RankInfo().read(packet, optional))
        data['ranks'] = items
        return data

class RankNotifierData(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['rank'] = packet.readInt()
        data['userId'] = packet.readLong()
        return data

class RankNotifierModelBase_setRank(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(RankNotifierData().read(packet, optional))
        data['users'] = items
        return data

class RankUpReferrerAwardModelBase(Codec):
    pass

class ReconnectCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['configUrlTemplate'] = packet.readString()
        data['serverNumber'] = packet.readInt()
        return data

class RemoteEndpointData(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['host'] = packet.readString()
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(packet.readInt())
        data['ports'] = items
        return data

class ReconnectModelBase_reconnectFast(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['remoteEndpointData'] = RemoteEndpointData().read(packet, optional)
        return data

class ReconnectModelBase_serverReadyToReconnect(Codec):
    pass

class ReconnectModelBase_setSingleEntranceHash(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['hash'] = packet.readString()
        return data

class ReconnectModelServer_wantToReconnect(Codec):
    pass

class ReferralNotifierData(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['referral'] = bool(packet.readByte())
        data['userId'] = packet.readLong()
        return data

class ReferralNotifierModelBase_setIsReferral(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(ReferralNotifierData().read(packet, optional))
        data['users'] = items
        return data

class ReferralsModelCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['inviteLink'] = packet.readString()
        return data

class ReferralIncomeData(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['income'] = packet.readInt()
        data['user'] = packet.readLong()
        return data

class ReferralsModelBase_updateData(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(ReferralIncomeData().read(packet, optional))
        data['data'] = items
        return data

class ReferralsModelServer_updateReferralsData(Codec):
    pass

class RegistrationModelCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['bgResource'] = packet.readLong()
        data['enableRequiredEmail'] = bool(packet.readByte())
        data['maxPasswordLength'] = packet.readInt()
        data['minPasswordLength'] = packet.readInt()
        return data

class RegistrationModelBase_anchorRegistration(Codec):
    pass

class RegistrationModelBase_enteredUidIsBusy(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(packet.readString())
        data['advisedUids'] = items
        return data

class RegistrationModelBase_enteredUidIsFree(Codec):
    pass

class RegistrationModelBase_enteredUidIsIncorrect(Codec):
    pass

class RegistrationModelBase_passwordIsIncorrect(Codec):
    pass

class RegistrationModelBase_registrationFailed(Codec):
    pass

class RegistrationModelServer_checkUid(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['uid'] = packet.readString()
        return data

class RegistrationModelServer_register(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['userUid'] = packet.readString()
        data['password'] = packet.readString()
        data['registeredUrl'] = packet.readString()
        data['rememberMe'] = bool(packet.readByte())
        data['referralHash'] = None if optional.next() else packet.readString()
        data['realName'] = packet.readString()
        data['idNumber'] = packet.readString()
        return data

class RegistrationModelServer_setFormerUserId(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['formerUserId'] = packet.readLong()
        return data

class RegistrationUXLoggerModelBase(Codec):
    pass

class RegistrationUXLoggerModelServer_initLogger(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['applicationStartTime'] = packet.readString()
        data['fromTutorial'] = bool(packet.readByte())
        data['fromStandaloneTutorial'] = bool(packet.readByte())
        return data

class RegistrationUXLoggerModelServer_logFormAction(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['action'] = packet.readInt()
        data['additionalCount'] = packet.readInt()
        return data

class RegistrationUXLoggerModelServer_logNavigationFinish(Codec):
    pass

class RegistrationUXLoggerModelServer_logNavigationStart(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['destination'] = packet.readInt()
        return data

class RelativeProperty(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['property'] = packet.readInt()
        data['value'] = packet.readInt()
        return data

class RelativePropertiesCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(RelativeProperty().read(packet, optional))
        data['properties'] = items
        return data

class RenameModelBase(Codec):
    pass

class RenameModelBase_renameFail(Codec):
    pass

class RenameModelBase_renameSuccessfull(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['oldName'] = packet.readString()
        data['newName'] = packet.readString()
        return data

class RenameModelServer_rename(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['newNickName'] = packet.readString()
        return data

class RenameShopItemCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['name'] = packet.readString()
        return data

class ResistanceModuleModelBase(Codec):
    pass

class ResistancesCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(packet.readInt())
        data['resistances'] = items
        return data

class RestrictionByPayModeCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['payMode'] = packet.readLong()
        return data

class RicochetCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['energyCapacity'] = packet.readFloat()
        data['energyPerShot'] = packet.readFloat()
        data['energyRechargeSpeed'] = packet.readFloat()
        data['maxRicochetCount'] = packet.readInt()
        data['shellRadius'] = packet.readFloat()
        data['shellSpeed'] = packet.readFloat()
        data['shotDistance'] = packet.readFloat()
        return data

class RicochetModelBase_addEnergy(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['energyDelta'] = packet.readInt()
        return data

class RicochetModelBase_fire(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['shooter'] = packet.readLong()
        data['shotDirectionX'] = packet.readShort()
        data['shotDirectionY'] = packet.readShort()
        data['shotDirectionZ'] = packet.readShort()
        return data

class RicochetModelBase_fireDummy(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['shooter'] = packet.readLong()
        return data

class RicochetModelBase_reconfigureWeapon(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['maxDistance'] = packet.readFloat()
        data['energyPerShoot'] = packet.readFloat()
        return data

class RicochetModelServer_fireCommand(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['clientTime'] = packet.readInt()
        data['shotId'] = packet.readInt()
        data['shotDirectionX'] = packet.readShort()
        data['shotDirectionY'] = packet.readShort()
        data['shotDirectionZ'] = packet.readShort()
        return data

class RicochetModelServer_fireDummyCommand(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['clientTime'] = packet.readInt()
        return data

class RicochetModelServer_hitStaticCommand(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['clientTime'] = packet.readInt()
        data['shotId'] = packet.readInt()
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(Vector3d().read(packet, optional))
        data['impactPoints'] = items
        return data

class RicochetModelServer_hitTargetCommand(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['clientTime'] = packet.readInt()
        data['target'] = packet.readLong()
        data['shotId'] = packet.readInt()
        data['targetPosition'] = Vector3d().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(Vector3d().read(packet, optional))
        data['impactPoints'] = items
        return data

class RicochetSFXCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['bumpFlashTexture'] = packet.readLong()
        data['explosionTexture'] = packet.readLong()
        data['explostinSound'] = packet.readLong()
        data['lightingSFXEntity'] = LightingSFXEntity().read(packet, optional)
        data['ricochetSound'] = packet.readLong()
        data['shotFlashTexture'] = packet.readLong()
        data['shotSound'] = packet.readLong()
        data['shotTexture'] = packet.readLong()
        data['tailTrailTexutre'] = packet.readLong()
        return data

class RocketLauncherCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['angularVelocity'] = packet.readFloat()
        data['boostPhaseDuration'] = packet.readInt()
        data['maxSpeed'] = packet.readFloat()
        data['minSpeed'] = packet.readFloat()
        data['salvoAimingGracePeriod'] = packet.readInt()
        data['salvoAimingTime'] = packet.readInt()
        data['salvoReloadTime'] = packet.readInt()
        data['salvoSize'] = packet.readInt()
        data['shellRadius'] = packet.readFloat()
        data['shotRange'] = packet.readFloat()
        data['timeBetweenShotsOfSalvo'] = packet.readInt()
        return data

class RocketLauncherRadioExplosionModelBase(Codec):
    pass

class RocketLauncherRadioExplosionModelBase_shellDestroyed(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['shellId'] = packet.readInt()
        return data

class RocketLauncherSfxCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['aimingCompleteSound'] = packet.readLong()
        data['aimingSound'] = packet.readLong()
        data['explosionMarkTexture'] = packet.readLong()
        data['explosionTexture'] = packet.readLong()
        data['leftHitSounds'] = packet.readLong()
        data['leftShotSounds'] = packet.readLong()
        data['lightingSFXEntity'] = LightingSFXEntity().read(packet, optional)
        data['rightHitSounds'] = packet.readLong()
        data['rightShotSounds'] = packet.readLong()
        data['rocketFlameTexture'] = packet.readLong()
        data['rocketFlightSound'] = packet.readLong()
        data['rocketSmokeTexture'] = packet.readLong()
        data['targetLostSound'] = packet.readLong()
        return data

class TurretStateCommand(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['controlInput'] = packet.readFloat()
        data['controlType'] = packet.readInt()
        data['direction'] = packet.readFloat()
        data['rotationSpeedNumber'] = packet.readByte()
        return data

class RotatingTurretCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['turretState'] = TurretStateCommand().read(packet, optional)
        return data

class RotatingTurretModelBase_update(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['turretStateCommand'] = TurretStateCommand().read(packet, optional)
        return data

class RotatingTurretModelServer_update(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['clientTime'] = packet.readInt()
        data['incarnationId'] = packet.readShort()
        data['turretStateCommand'] = TurretStateCommand().read(packet, optional)
        return data

class RugbySoundFX(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['ballDropNegativeSound'] = packet.readLong()
        data['ballDropPositiveSound'] = packet.readLong()
        data['ballFaceOffSound'] = packet.readLong()
        data['ballTakeNegativeSound'] = packet.readLong()
        data['ballTakePositiveSound'] = packet.readLong()
        data['goalNegativeSound'] = packet.readLong()
        data['goalPositiveSound'] = packet.readLong()
        return data

class RugbyCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['ballFallSpeeed'] = packet.readFloat()
        data['ballModel'] = packet.readLong()
        data['ballRadius'] = packet.readFloat()
        data['ballSpawnZone'] = packet.readLong()
        data['bigBlueBallMarker'] = None if optional.next() else packet.readLong()
        data['bigGreenBallMarker'] = None if optional.next() else packet.readLong()
        data['bigRedBallMarker'] = None if optional.next() else packet.readLong()
        data['blueBallMarker'] = None if optional.next() else packet.readLong()
        data['blueGoalModel'] = None if optional.next() else packet.readLong()
        data['cordResource'] = packet.readLong()
        data['greenBallMarker'] = None if optional.next() else packet.readLong()
        data['greenGoalModel'] = None if optional.next() else packet.readLong()
        data['parachuteInnerResource'] = packet.readLong()
        data['parachuteResource'] = packet.readLong()
        data['redBallMarker'] = None if optional.next() else packet.readLong()
        data['redGoalModel'] = packet.readLong()
        data['sounds'] = RugbySoundFX().read(packet, optional)
        return data

class RulesUpdateShowingCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['showAcceptRulesAlert'] = bool(packet.readByte())
        data['text'] = None if optional.next() else packet.readString()
        return data

class RulesUpdateShowingModelServer_userAcceptedRules(Codec):
    pass

class SNGroupReminderModelBase(Codec):
    pass

class SNGroupReminderModelBase_checkIsInGroup(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['uid'] = packet.readString()
        data['snId'] = packet.readString()
        return data

class SNGroupReminderModelBase_showCongratulationsWindow(Codec):
    pass

class SNGroupReminderModelServer_giveBonus(Codec):
    pass

class SNUidNotifierData(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['snUid'] = packet.readString()
        data['userId'] = packet.readLong()
        return data

class SNUidNotifierModelBase_setSNUid(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(SNUidNotifierData().read(packet, optional))
        data['users'] = items
        return data

class ScoreCollectOnMapDailyQuestModelBase(Codec):
    pass

class ServerHaltEntranceCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['serverHalt'] = bool(packet.readByte())
        return data

class ServerHaltEntranceModelBase_serverHalt(Codec):
    pass

class ServerHaltModelBase(Codec):
    pass

class ServerHaltModelBase_haltServer(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['timeLeftInSec'] = packet.readInt()
        return data

class SettingsModelBase(Codec):
    pass

class SettingsModelBase_openAntiAddictionSettings(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['mode'] = packet.readInt()
        data['realName'] = None if optional.next() else packet.readString()
        data['idNumber'] = None if optional.next() else packet.readString()
        return data

class SettingsModelBase_openSettings(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['mode'] = packet.readInt()
        return data

class SettingsModelServer_setReceivePersonalMessages(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['mode'] = packet.readInt()
        return data

class SettingsModelServer_showSettings(Codec):
    pass

class ClientStoredSettings(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['showDamageEnabled'] = bool(packet.readByte())
        return data

class SettingsModelServer_uploadClientSettings(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['settings'] = ClientStoredSettings().read(packet, optional)
        return data

class ShaftCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['afterShotPause'] = packet.readInt()
        data['aimingImpact'] = packet.readFloat()
        data['chargeRate'] = packet.readFloat()
        data['dischargeRate'] = packet.readFloat()
        data['fastShotEnergy'] = packet.readFloat()
        data['healingMode'] = bool(packet.readByte())
        data['horizontalTargetingSpeed'] = packet.readFloat()
        data['initialFOV'] = packet.readFloat()
        data['maxEnergy'] = packet.readFloat()
        data['minAimedShotEnergy'] = packet.readFloat()
        data['minimumFOV'] = packet.readFloat()
        data['reticleImage'] = packet.readLong()
        data['rotationCoeffKmin'] = packet.readFloat()
        data['rotationCoeffT1'] = packet.readFloat()
        data['rotationCoeffT2'] = packet.readFloat()
        data['shrubsHidingRadiusMax'] = packet.readFloat()
        data['shrubsHidingRadiusMin'] = packet.readFloat()
        data['targetingAcceleration'] = packet.readFloat()
        data['targetingTransitionTime'] = packet.readInt()
        data['verticalTargetingSpeed'] = packet.readFloat()
        return data

class ShaftModelBase_activateManualTargeting(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['shooter'] = packet.readLong()
        return data

class ShaftModelBase_fire(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['shooter'] = packet.readLong()
        data['staticHitPoint'] = None if optional.next() else Vector3d().read(packet, optional)
        data['target'] = None if optional.next() else packet.readLong()
        data['targetHitPoint'] = None if optional.next() else Vector3d().read(packet, optional)
        data['impactForce'] = packet.readFloat()
        return data

class ShaftModelBase_reconfigureWeapon(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['dischargeRate'] = packet.readFloat()
        data['fastShotEnergy'] = packet.readFloat()
        data['sniperModeLocked'] = bool(packet.readByte())
        return data

class ShaftModelBase_stopManulaTargeting(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['shooter'] = packet.readLong()
        return data

class ShaftModelServer_activateManualTargetingCommand(Codec):
    pass

class ShaftModelServer_aimedShotCommand(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['time'] = packet.readInt()
        data['staticHitPoint'] = None if optional.next() else Vector3d().read(packet, optional)
        data['target'] = None if optional.next() else packet.readLong()
        data['targetHitPoint'] = None if optional.next() else Vector3d().read(packet, optional)
        data['targetIncarnation'] = packet.readShort()
        data['targetPosition'] = None if optional.next() else Vector3d().read(packet, optional)
        data['hitPointWorld'] = None if optional.next() else Vector3d().read(packet, optional)
        return data

class ShaftModelServer_beginEnergyDrainCommand(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['time'] = packet.readInt()
        return data

class ShaftModelServer_quickShotCommand(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['time'] = packet.readInt()
        data['staticHitPoint'] = None if optional.next() else Vector3d().read(packet, optional)
        data['target'] = None if optional.next() else packet.readLong()
        data['targetHitPoint'] = None if optional.next() else Vector3d().read(packet, optional)
        data['targetIncarnation'] = packet.readShort()
        data['targetPosition'] = None if optional.next() else Vector3d().read(packet, optional)
        data['hitPointWorld'] = None if optional.next() else Vector3d().read(packet, optional)
        return data

class ShaftModelServer_stopManualTargetingCommand(Codec):
    pass

class ShaftShootSFXCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['explosionSound'] = packet.readLong()
        data['explosionTexture'] = packet.readLong()
        data['hitMarkTexture'] = packet.readLong()
        data['lightingSFXEntity'] = LightingSFXEntity().read(packet, optional)
        data['muzzleFlashTexture'] = packet.readLong()
        data['shotSound'] = packet.readLong()
        data['targetingSound'] = packet.readLong()
        data['trailTexture'] = packet.readLong()
        data['zoomModeSound'] = packet.readLong()
        return data

class ShellWeaponCommunicationModelBase(Codec):
    pass

class ShellWeaponCommunicationModelBase_shoot(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['barrelIndex'] = packet.readByte()
        data['shotId'] = packet.readInt()
        data['direction'] = Vector3d().read(packet, optional)
        return data

class ShellWeaponCommunicationModelBase_shootDummy(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['barrelIndex'] = packet.readByte()
        return data

class ShellWeaponCommunicationModelBase_shootWithTarget(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['barrelIndex'] = packet.readByte()
        data['shotId'] = packet.readInt()
        data['direction'] = Vector3d().read(packet, optional)
        data['target'] = TargetPosition().read(packet, optional)
        data['localTargetPoint'] = Vector3d().read(packet, optional)
        return data

class ShellWeaponCommunicationModelServer_tryToDummyShoot(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['clientTime'] = packet.readInt()
        data['barrelIndex'] = packet.readByte()
        return data

class ShellState(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['clientTime'] = packet.readInt()
        data['direction'] = Vector3d().read(packet, optional)
        data['position'] = Vector3d().read(packet, optional)
        return data

class ShellHit(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['shotId'] = packet.readInt()
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(ShellState().read(packet, optional))
        data['states'] = items
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(TargetPosition().read(packet, optional))
        data['targets'] = items
        return data

class ShellWeaponCommunicationModelServer_tryToHit(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['clientTime'] = packet.readInt()
        data['shellHit'] = ShellHit().read(packet, optional)
        return data

class ShellWeaponCommunicationModelServer_tryToShoot(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['clientTime'] = packet.readInt()
        data['barrelIndex'] = packet.readByte()
        data['shotId'] = packet.readInt()
        data['direction'] = Vector3d().read(packet, optional)
        return data

class ShellWeaponCommunicationModelServer_tryToShootWithTarget(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['clientTime'] = packet.readInt()
        data['barrelIndex'] = packet.readByte()
        data['shotId'] = packet.readInt()
        data['direction'] = Vector3d().read(packet, optional)
        data['target'] = TargetPosition().read(packet, optional)
        data['localTargetPoint'] = Vector3d().read(packet, optional)
        return data

class ShopAbonementCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['shopCategory'] = packet.readInt()
        return data

class ShopCategoryCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['orderIndex'] = packet.readInt()
        data['type'] = packet.readInt()
        data['withJumpButton'] = bool(packet.readByte())
        return data

class ShopDiscountCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['discountInPercent'] = packet.readInt()
        data['enabled'] = bool(packet.readByte())
        return data

class ShopItemAdditionalDescriptionCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['additionalDescription'] = None if optional.next() else packet.readString()
        return data

class ShopItemCategoryCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['category'] = packet.readLong()
        return data

class ShopItemFeaturingCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['hiddenInOriginalCategory'] = bool(packet.readByte())
        data['locatedInFeaturingCategory'] = bool(packet.readByte())
        data['position'] = packet.readInt()
        return data

class ShopItemLoaderForAndroidModelBase(Codec):
    pass

class ShopItemLoaderForAndroidModelBase_specialOfferLoaded(Codec):
    pass

class ShopItemCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['currencyId'] = packet.readString()
        data['currencyName'] = packet.readString()
        data['preview'] = None if optional.next() else packet.readLong()
        data['price'] = packet.readDouble()
        data['roundingPrecision'] = packet.readInt()
        return data

class ShopItemOneTimePurchaseModelBase(ShopItemOneTimePurchaseCC):
    pass

class ShopNotifierModelBase(Codec):
    pass

class ShopNotifierModelBase_notifyDiscountsInShop(Codec):
    pass

class ShopNotifierModelBase_notifyNewItemsInShop(Codec):
    pass

class ShopPromoCodeModelBase(Codec):
    pass

class ShopPromoCodeModelBase_codeActivated(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(GoodsInfoData().read(packet, optional))
        data['reward'] = items
        return data

class ShopPromoCodeModelBase_codeActivationBlocked(Codec):
    pass

class ShopPromoCodeModelBase_codeIsInvalid(Codec):
    pass

class ShopPromoCodeModelServer_activatePromoCode(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['promoCode'] = packet.readString()
        return data

class ShotGunAimingCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['coneHorizontalAngle'] = packet.readFloat()
        data['coneVerticalAngle'] = packet.readFloat()
        data['pelletCount'] = packet.readInt()
        return data

class ShotgunSFXCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(packet.readLong())
        data['explosionMarkTextures'] = items
        data['lightingSFXEntity'] = LightingSFXEntity().read(packet, optional)
        data['magazineReloadSound'] = packet.readLong()
        data['pelletTrailTexture'] = packet.readLong()
        data['reloadSound'] = packet.readLong()
        data['shotAcrossTexture'] = packet.readLong()
        data['shotAlongTexture'] = packet.readLong()
        data['shotSound'] = packet.readLong()
        data['smokeTexture'] = packet.readLong()
        data['sparkleTexture'] = packet.readLong()
        return data

class ShotgunShotCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['magazineReloadTime'] = packet.readInt()
        data['magazineSize'] = packet.readInt()
        return data

class ShotgunShotModelBase_setRemainingShots(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['shots'] = packet.readInt()
        return data

class SiegeModelBase(Codec):
    pass

class SimpleArmorCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['maxHealth'] = packet.readInt()
        return data

class SingleItemKitViewCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['brandIcon'] = None if optional.next() else packet.readLong()
        data['button'] = packet.readLong()
        data['buttonOver'] = packet.readLong()
        data['preview'] = None if optional.next() else packet.readLong()
        return data

class SmokyCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['maxRicochetAngle'] = packet.readFloat()
        data['maxRicochetCount'] = packet.readInt()
        data['shellRadius'] = packet.readFloat()
        data['shotRange'] = packet.readFloat()
        data['speed'] = packet.readFloat()
        return data

class SmokyModelBase_fire(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['shooter'] = packet.readLong()
        data['shotId'] = packet.readInt()
        data['shotDirection'] = Vector3d().read(packet, optional)
        return data

class SmokyModelBase_fireDummy(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['shooter'] = packet.readLong()
        return data

class SmokyModelServer_fireCommand(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['clientTime'] = packet.readInt()
        data['shotId'] = packet.readInt()
        data['shotDirection'] = Vector3d().read(packet, optional)
        return data

class SmokyModelServer_fireDummyCommand(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['clientTime'] = packet.readInt()
        return data

class SmokyModelServer_hitStaticCommand(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['clientTime'] = packet.readInt()
        data['shotId'] = packet.readInt()
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(Vector3d().read(packet, optional))
        data['impactPoints'] = items
        return data

class SmokyModelServer_hitTargetCommand(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['clientTime'] = packet.readInt()
        data['shotId'] = packet.readInt()
        data['target'] = packet.readLong()
        data['targetPosition'] = Vector3d().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(Vector3d().read(packet, optional))
        data['impactPoints'] = items
        return data

class SmokyShootSFXCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['barrelAnimatedSmokeTexture'] = packet.readLong()
        data['barrelFireTexture'] = packet.readLong()
        data['barrelFlameTexture'] = packet.readLong()
        data['barrelStaticSmokeTexture'] = packet.readLong()
        data['crumbsTexture'] = None if optional.next() else packet.readLong()
        data['dustTexture'] = None if optional.next() else packet.readLong()
        data['explosionMarkTexture'] = packet.readLong()
        data['explosionSize'] = packet.readShort()
        data['explosionSound'] = packet.readLong()
        data['explosionTexture'] = packet.readLong()
        data['lightingSFXEntity'] = LightingSFXEntity().read(packet, optional)
        data['particleSFXEntity'] = None if optional.next() else ParticleEffectsEntity().read(packet, optional)
        data['ricochetSound1'] = packet.readLong()
        data['ricochetSound2'] = packet.readLong()
        data['ricochetSound3'] = packet.readLong()
        data['ricochetSound4'] = packet.readLong()
        data['ricochetSound5'] = packet.readLong()
        data['ricochetTexture'] = None if optional.next() else packet.readLong()
        data['shell'] = packet.readLong()
        data['shellFlightSound'] = packet.readLong()
        data['shellTexture'] = packet.readLong()
        data['shellTracerTexture'] = packet.readLong()
        data['shotSound'] = packet.readLong()
        return data

class SocialNetworkPanelParams(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['authorizationUrl'] = None if optional.next() else packet.readString()
        data['enabled'] = None if optional.next() else bool(packet.readByte())
        data['linkExists'] = bool(packet.readByte())
        data['snId'] = packet.readString()
        return data

class SocialNetworkPanelCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['passwordCreated'] = bool(packet.readByte())
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(SocialNetworkPanelParams().read(packet, optional))
        data['socialNetworkParams'] = items
        return data

class SocialNetworkPanelModelBase_linkAlreadyExists(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['socialNetworkId'] = packet.readString()
        return data

class SocialNetworkPanelModelBase_linkCreated(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['socialNetworkId'] = packet.readString()
        return data

class SocialNetworkPanelModelBase_unlinkSuccess(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['socialNetworkId'] = packet.readString()
        return data

class SocialNetworkPanelModelBase_validationFailed(Codec):
    pass

class SocialNetworkPanelModelServer_removeLink(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['socialNetworkId'] = packet.readString()
        return data

class SocialNetworkParametersCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['canOpenExternalLinks'] = bool(packet.readByte())
        data['failedRedirectUrl'] = packet.readString()
        data['hasAccountBinding'] = bool(packet.readByte())
        data['hasClientPaymentAction'] = bool(packet.readByte())
        data['hasOwnPaymentSystem'] = bool(packet.readByte())
        data['hasSocialFunction'] = bool(packet.readByte())
        return data

class SpawnProtectionModelBase(Codec):
    pass

class SpawnProtectionModelBase_activate(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['tank'] = packet.readLong()
        data['durationMs'] = packet.readInt()
        return data

class ShopKitText(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['color'] = packet.readInt()
        data['size'] = packet.readInt()
        data['text'] = packet.readString()
        data['x'] = packet.readInt()
        data['y'] = packet.readInt()
        return data

class SpecialKitPackageCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['crystalsAmount'] = packet.readInt()
        data['everySupplyAmount'] = packet.readInt()
        data['goldAmount'] = packet.readInt()
        data['itemsCount'] = packet.readInt()
        data['premiumDurationInDays'] = packet.readInt()
        data['showPremiumIcon'] = bool(packet.readByte())
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(ShopKitText().read(packet, optional))
        data['texts'] = items
        data['withAdditionalItem'] = bool(packet.readByte())
        return data

class SpectatorInfo(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['id'] = packet.readLong()
        data['inPunishersGroup'] = bool(packet.readByte())
        data['inSupportGroup'] = bool(packet.readByte())
        data['uid'] = packet.readString()
        return data

class SpectatorsModelCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(SpectatorInfo().read(packet, optional))
        data['spectators'] = items
        return data

class SpectatorsModelBase_spectatorJoined(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['spectatorInfo'] = SpectatorInfo().read(packet, optional)
        return data

class SpectatorsModelBase_spectatorLeaved(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['spectatorUserId'] = packet.readLong()
        return data

class SpectatorsModelBase_tankPreparingToSpawn(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['tank'] = packet.readLong()
        data['spawnPositionX'] = packet.readDouble()
        data['spawnPositionY'] = packet.readDouble()
        data['spawnPositionZ'] = packet.readDouble()
        data['spawnRotationX'] = packet.readDouble()
        data['spawnRotationY'] = packet.readDouble()
        data['spawnRotationZ'] = packet.readDouble()
        return data

class SpeedCharacteristicsCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['baseAcceleration'] = packet.readFloat()
        data['baseSpeed'] = packet.readFloat()
        data['baseTurnSpeed'] = packet.readFloat()
        data['baseTurretRotationSpeed'] = packet.readFloat()
        data['currentAcceleration'] = packet.readFloat()
        data['currentSpeed'] = packet.readFloat()
        data['currentTurnSpeed'] = packet.readFloat()
        data['currentTurretRotationSpeed'] = packet.readFloat()
        data['deceleration'] = packet.readFloat()
        data['reverseAcceleration'] = packet.readFloat()
        data['turnAcceleration'] = packet.readFloat()
        data['turnDeceleration'] = packet.readFloat()
        data['turnReverseAcceleration'] = packet.readFloat()
        return data

class SpeedCharacteristicsModelBase_setSpecification(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['maxSpeed'] = packet.readFloat()
        data['maxTurnSpeed'] = packet.readFloat()
        data['maxTurretRotationSpeed'] = packet.readFloat()
        data['acceleration'] = packet.readFloat()
        data['specificationId'] = packet.readShort()
        data['immediately'] = bool(packet.readByte())
        return data

class StarsInfoCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['stars'] = packet.readInt()
        return data

class StarsInfoModelBase_setStars(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['stars'] = packet.readInt()
        return data

class StarsPackageCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['starsAmount'] = packet.readInt()
        return data

class StatisticsDMCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(UserInfo().read(packet, optional))
        data['usersInfo'] = items
        return data

class UserStat(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['deaths'] = packet.readShort()
        data['killScore'] = packet.readShort()
        data['kills'] = packet.readShort()
        data['score'] = packet.readInt()
        data['user'] = packet.readLong()
        return data

class StatisticsDMModelBase_changeUserStat(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['userStat'] = UserStat().read(packet, optional)
        return data

class StatisticsDMModelBase_refreshUsersStat(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(UserStat().read(packet, optional))
        data['usersStat'] = items
        return data

class StatisticsDMModelBase_userConnect(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['userId'] = packet.readLong()
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(UserInfo().read(packet, optional))
        data['usersInfo'] = items
        return data

class StatisticsDMModelBase_userDisconnect(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['userId'] = packet.readLong()
        return data

class StatisticsModelCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['battleName'] = None if optional.next() else packet.readString()
        data['equipmentConstraintsMode'] = None if optional.next() else packet.readString()
        data['fund'] = packet.readInt()
        data['limits'] = BattleLimits().read(packet, optional)
        data['mapName'] = packet.readString()
        data['matchBattle'] = bool(packet.readByte())
        data['maxPeopleCount'] = packet.readInt()
        data['modeName'] = packet.readString()
        data['parkourMode'] = bool(packet.readByte())
        data['running'] = bool(packet.readByte())
        data['spectator'] = bool(packet.readByte())
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(packet.readLong())
        data['suspiciousByIpUserIds'] = items
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(packet.readLong())
        data['suspiciousUserIds'] = items
        data['timeLeft'] = packet.readInt()
        data['valuableRound'] = bool(packet.readByte())
        return data

class StatisticsModelBase_fundChange(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['fund'] = packet.readInt()
        return data

class StatisticsModelBase_onRankChanged(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['userId'] = packet.readLong()
        data['newRank'] = packet.readByte()
        data['forceUpRankForNewbies'] = bool(packet.readByte())
        return data

class StatisticsModelBase_resetBattleName(Codec):
    pass

class ExperiencePremiumBonusByAction(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['battleAction'] = packet.readInt()
        data['experience'] = packet.readDouble()
        data['premiumBonus'] = packet.readDouble()
        return data

class UserReward(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(ExperiencePremiumBonusByAction().read(packet, optional))
        data['experiencePremiumBonusByActions'] = items
        data['premiumBonusReward'] = packet.readInt()
        data['reward'] = packet.readInt()
        data['starsReward'] = packet.readInt()
        data['starsRewardForPremium'] = packet.readInt()
        data['userId'] = packet.readLong()
        return data

class StatisticsModelBase_roundFinish(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['showResultTable'] = bool(packet.readByte())
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(UserReward().read(packet, optional))
        data['reward'] = items
        data['timeToRestart'] = packet.readInt()
        return data

class StatisticsModelBase_roundStart(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['timeLimitInSec'] = packet.readInt()
        data['valuableRound'] = bool(packet.readByte())
        return data

class StatisticsModelBase_roundStop(Codec):
    pass

class StatisticsModelBase_setBattleName(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['name'] = packet.readString()
        return data

class StatisticsModelBase_statusProbablyCheaterChanged(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['userId'] = packet.readLong()
        data['suspicious'] = bool(packet.readByte())
        data['suspiciousByIp'] = bool(packet.readByte())
        return data

class StatisticsTeamCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['scoreTeamA'] = packet.readInt()
        data['scoreTeamB'] = packet.readInt()
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(UserInfo().read(packet, optional))
        data['usersInfoTeamA'] = items
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(UserInfo().read(packet, optional))
        data['usersInfoTeamB'] = items
        return data

class StatisticsTeamModelBase_changeTeamScore(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['team'] = packet.readInt()
        data['score'] = packet.readInt()
        return data

class StatisticsTeamModelBase_changeUserStat(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['usersStat'] = UserStat().read(packet, optional)
        data['team'] = packet.readInt()
        return data

class StatisticsTeamModelBase_refreshUsersStat(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(UserStat().read(packet, optional))
        data['userStat'] = items
        data['team'] = packet.readInt()
        return data

class StatisticsTeamModelBase_swapTeam(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(UserStat().read(packet, optional))
        data['usersTeamA'] = items
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(UserStat().read(packet, optional))
        data['usersTeamB'] = items
        return data

class StatisticsTeamModelBase_userConnect(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['userId'] = packet.readLong()
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(UserInfo().read(packet, optional))
        data['usersInfo'] = items
        data['team'] = packet.readInt()
        return data

class StatisticsTeamModelBase_userDisconnect(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['userId'] = packet.readLong()
        return data

class StatusEffectDescription(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['id'] = packet.readLong()
        data['name'] = packet.readString()
        data['positive'] = bool(packet.readByte())
        data['type'] = packet.readInt()
        return data

class StatusEffectBattleCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(StatusEffectDescription().read(packet, optional))
        data['effectDescriptions'] = items
        return data

class StatusEffectData(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['duration'] = packet.readInt()
        data['effectId'] = packet.readLong()
        data['influencePercent'] = packet.readInt()
        return data

class StatusEffectCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(StatusEffectData().read(packet, optional))
        data['effects'] = items
        return data

class StatusEffectUserModelBase_addEffect(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['effectId'] = packet.readLong()
        data['duration'] = packet.readInt()
        data['influencePercent'] = packet.readInt()
        data['initiator'] = packet.readLong()
        return data

class StatusEffectUserModelBase_removeAllEffects(Codec):
    pass

class StatusEffectUserModelBase_removeEffect(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['effectId'] = packet.readLong()
        return data

class SteamLoginModelBase(Codec):
    pass

class SteamPaymentModelBase(Codec):
    pass

class SteamPaymentModelServer_finalizePayment(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['orderId'] = packet.readString()
        return data

class SteamPaymentModelServer_makePaymentRequest(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['shopItemId'] = packet.readLong()
        return data

class StreamWeaponCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['energyCapacity'] = packet.readFloat()
        data['energyDischargeSpeed'] = packet.readFloat()
        data['energyRechargeSpeed'] = packet.readFloat()
        data['weaponTickIntervalMsec'] = packet.readFloat()
        return data

class StreamWeaponModelBase_reconfigureWeapon(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['dischargeSpeed'] = packet.readFloat()
        return data

class SuicideCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['suicideDelayMS'] = packet.readInt()
        return data

class SuicideModelBase_suicide(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['respawnDelay'] = packet.readInt()
        return data

class SuicideModelServer_suicideCommand(Codec):
    pass

class TankConfigurationCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['coloringId'] = packet.readLong()
        data['droneId'] = packet.readLong()
        data['hullId'] = packet.readLong()
        data['weaponId'] = packet.readLong()
        return data

class TankCritCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['criticalHitSize'] = packet.readShort()
        data['criticalHitTexture'] = packet.readLong()
        return data

class TankCritModelBase_crit(Codec):
    pass

class TankDeviceCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['hullDeviceId'] = None if optional.next() else packet.readLong()
        data['weaponDeviceId'] = None if optional.next() else packet.readLong()
        return data

class EffectSFXRecordCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['beam'] = packet.readLong()
        data['effectTag'] = packet.readInt()
        data['star'] = packet.readLong()
        return data

class TankEffectSFXCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(EffectSFXRecordCC().read(packet, optional))
        data['effects'] = items
        return data

class TankEffectSFXModelBase_effectActivated(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['effectTag'] = packet.readInt()
        return data

class TankExplosionCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['explosionTexture'] = packet.readLong()
        data['shockWaveTexture'] = packet.readLong()
        data['smokeTextureId'] = packet.readLong()
        return data

class TankJammingModelBase(Codec):
    pass

class TankJammingModelBase_jammingOff(Codec):
    pass

class TankJammingModelBase_jammingOn(Codec):
    pass

class TankState(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['angularVelocity'] = Vector3d().read(packet, optional)
        data['linearVelocity'] = Vector3d().read(packet, optional)
        data['orientation'] = Vector3d().read(packet, optional)
        data['position'] = Vector3d().read(packet, optional)
        return data

class TankCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['health'] = packet.readShort()
        data['local'] = bool(packet.readByte())
        data['logicState'] = packet.readInt()
        data['movementDistanceBorderUntilTankCorrection'] = packet.readInt()
        data['movementTimeoutUntilTankCorrection'] = packet.readInt()
        data['tankState'] = None if optional.next() else TankState().read(packet, optional)
        data['team'] = packet.readInt()
        return data

class TankModelBase_activateTank(Codec):
    pass

class TankModelBase_deathConfirmed(Codec):
    pass

class TankModelBase_kill(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['killerTankId'] = packet.readLong()
        data['respawnDelay'] = packet.readInt()
        data['damageType'] = packet.readInt()
        data['isCritical'] = bool(packet.readByte())
        return data

class TankModelBase_push(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['hitPoint'] = Vector3d().read(packet, optional)
        data['force'] = Vector3d().read(packet, optional)
        return data

class TankModelBase_resetConfiguration(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['hullId'] = packet.readLong()
        data['weaponId'] = packet.readLong()
        data['droneId'] = packet.readLong()
        data['fullHealthHits'] = packet.readInt()
        return data

class TankModelBase_setHealth(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['newHealth'] = packet.readFloat()
        return data

class TankModelBase_setState(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['command'] = TankState().read(packet, optional)
        return data

class TankModelServer_deathConfirmationCommand(Codec):
    pass

class TankModelServer_handleCollisionWithOtherTank(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['otherTankZVelocity'] = packet.readFloat()
        return data

class TankModelServer_stateCommand(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['clientTime'] = packet.readInt()
        data['specificationId'] = packet.readShort()
        data['tankState'] = TankState().read(packet, optional)
        return data

class TankPauseModelBase(Codec):
    pass

class TankPauseModelServer_disablePause(Codec):
    pass

class TankRankUpEffectCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['rankUpSound'] = packet.readLong()
        return data

class TankReloaderModelBase(Codec):
    pass

class TankReloaderModelBase_die(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['respawnDelay'] = packet.readInt()
        return data

class TankReloaderModelBase_onDeathScheduled(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['suicideDelayMS'] = packet.readInt()
        return data

class TankReloaderModelBase_onReload(Codec):
    pass

class TankResistance(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['resistanceInPercent'] = packet.readByte()
        data['resistanceProperty'] = packet.readInt()
        return data

class TankResistancesCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(TankResistance().read(packet, optional))
        data['resistances'] = items
        return data

class TankSpawnerCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['incarnationId'] = packet.readShort()
        return data

class TankSpawnerModelBase_prepareToSpawn(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['position'] = Vector3d().read(packet, optional)
        data['orientation'] = Vector3d().read(packet, optional)
        return data

class TankSpawnerModelBase_spawn(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['team'] = packet.readInt()
        data['position'] = Vector3d().read(packet, optional)
        data['orientation'] = Vector3d().read(packet, optional)
        data['health'] = packet.readShort()
        data['incarnationId'] = packet.readShort()
        return data

class TankSpawnerModelServer_confirmSpawn(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['incarnationId'] = packet.readShort()
        return data

class TankSpawnerModelServer_readyToSpawnCommand(Codec):
    pass

class TankSpawnerModelServer_setReadyToPlace(Codec):
    pass

class TankStunCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['stunned'] = bool(packet.readByte())
        return data

class TankStunModelBase_calm(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['stunDurationMs'] = packet.readInt()
        return data

class TankStunModelBase_stun(Codec):
    pass

class TankSuperchargeCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['superchargeEnabled'] = bool(packet.readByte())
        return data

class TankSuperchargeModelBase_superchargeActivated(Codec):
    pass

class TankSuperchargeModelBase_superchargeDeactivated(Codec):
    pass

class TankTemperatureModelBase(Codec):
    pass

class TankTemperatureModelBase_setTemperature(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['value'] = packet.readFloat()
        return data

class TurnOverCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['angle'] = packet.readInt()
        data['suicideTimerMs'] = packet.readInt()
        return data

class TargetingStatisticsModelBase(Codec):
    pass

class TargetingStatisticsModelServer_switchTargetingMode(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['targetingMode'] = packet.readInt()
        return data

class TeamBattleInfoCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['scoreTeamA'] = packet.readInt()
        data['scoreTeamB'] = packet.readInt()
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(BattleInfoUser().read(packet, optional))
        data['usersTeamA'] = items
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(BattleInfoUser().read(packet, optional))
        data['usersTeamB'] = items
        return data

class TeamBattleInfoModelBase_addUser(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['userInfo'] = BattleInfoUser().read(packet, optional)
        data['team'] = packet.readInt()
        return data

class TeamBattleInfoModelBase_removeUser(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['userId'] = packet.readLong()
        return data

class TeamBattleInfoModelBase_swapTeams(Codec):
    pass

class TeamBattleInfoModelBase_updateTeamScore(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['team'] = packet.readInt()
        data['score'] = packet.readInt()
        return data

class TeamBattleInfoModelBase_updateUserScore(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['userId'] = packet.readLong()
        data['score'] = packet.readInt()
        return data

class TeamJuggernautCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['blueBossHudMarker'] = None if optional.next() else packet.readLong()
        data['bossKilledSound'] = packet.readLong()
        data['bossSpawnedSound'] = packet.readLong()
        data['currentBossTeamA'] = None if optional.next() else packet.readLong()
        data['currentBossTeamB'] = None if optional.next() else packet.readLong()
        data['redBossHudMarker'] = None if optional.next() else packet.readLong()
        return data

class TeamJuggernautModelBase_bossChanged(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['team'] = packet.readInt()
        data['newBoss'] = None if optional.next() else packet.readLong()
        return data

class TeamJuggernautModelBase_bossKilled(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['team'] = packet.readInt()
        data['killedBossId'] = None if optional.next() else packet.readLong()
        return data

class TeamLightColorParams(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['color'] = packet.readString()
        data['intensity'] = packet.readFloat()
        return data

class TeamLightParams(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['attenuationBegin'] = packet.readFloat()
        data['attenuationEnd'] = packet.readFloat()
        data['battleMode'] = packet.readInt()
        data['blueTeam'] = TeamLightColorParams().read(packet, optional)
        data['greenTeam'] = TeamLightColorParams().read(packet, optional)
        data['neutralTeam'] = TeamLightColorParams().read(packet, optional)
        data['redTeam'] = TeamLightColorParams().read(packet, optional)
        return data

class TeamLightCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(TeamLightParams().read(packet, optional))
        data['lightModes'] = items
        return data

class TelegramEntranceModelCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['botName'] = packet.readString()
        return data

class TelegramEntranceModelServer_login(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['json'] = packet.readString()
        return data

class TelegramSocialLoginModelBase(Codec):
    pass

class TemperatureCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['temperatureAutoDecrement'] = packet.readFloat()
        return data

class TemporaryItemCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['infinityLifetimeItem'] = bool(packet.readByte())
        data['lifeTimeInSec'] = packet.readInt()
        data['remainingTimeInSec'] = packet.readInt()
        return data

class TerminalInstance(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['image'] = packet.readLong()
        data['url'] = packet.readString()
        return data

class TerminalPaymentCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(TerminalInstance().read(packet, optional))
        data['terminals'] = items
        return data

class TerminatorCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['primaryCC'] = RailgunCC().read(packet, optional)
        data['secondaryCC'] = RocketLauncherCC().read(packet, optional)
        data['secondaryKickback'] = packet.readFloat()
        return data

class TerminatorModelBase_primaryRemoteCharge(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['shooter'] = packet.readLong()
        data['barrelIndex'] = packet.readInt()
        return data

class TerminatorModelBase_primaryRemoteDummy(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['shooter'] = packet.readLong()
        data['barrelIndex'] = packet.readInt()
        return data

class TerminatorModelBase_primaryRemoteShot(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['shooter'] = packet.readLong()
        data['staticHitPoint'] = None if optional.next() else Vector3d().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(packet.readLong())
        data['targets'] = items
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(Vector3d().read(packet, optional))
        data['targetHitPoints'] = items
        data['barrelIndex'] = packet.readInt()
        return data

class TerminatorModelBase_secondaryRemoteHide(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['shooters'] = packet.readLong()
        return data

class TerminatorModelBase_secondaryRemoteOpen(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['shooter'] = packet.readLong()
        return data

class TerminatorModelServer_primaryCharge(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['clientTime'] = packet.readInt()
        data['barrelIndex'] = packet.readInt()
        return data

class TerminatorModelServer_primaryDummyShot(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['clientTime'] = packet.readInt()
        data['barrelIndex'] = packet.readInt()
        return data

class TerminatorModelServer_primaryShot(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['clientTime'] = packet.readInt()
        data['staticHitPoint'] = None if optional.next() else Vector3d().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(packet.readLong())
        data['targets'] = items
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(Vector3d().read(packet, optional))
        data['targetHitPoints'] = items
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(packet.readShort())
        data['targetIncarnations'] = items
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(Vector3d().read(packet, optional))
        data['targetPositions'] = items
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(Vector3d().read(packet, optional))
        data['hitPointsWorld'] = items
        data['barrelIndex'] = packet.readInt()
        return data

class TerminatorModelServer_secondaryHide(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['clientTime'] = packet.readInt()
        return data

class TerminatorModelServer_secondaryOpen(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['clientTime'] = packet.readInt()
        return data

class TerminatorSFXCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['closedSound'] = packet.readLong()
        data['openedSound'] = packet.readLong()
        data['servoSound'] = packet.readLong()
        return data

class TeslaCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['cascadeAllyTankRadius'] = packet.readFloat()
        data['cascadeEnemyTankRadius'] = packet.readFloat()
        data['cascadeGlobeRadius'] = packet.readFloat()
        data['damageMultipleTargetCoeff'] = packet.readFloat()
        data['firstTargetLookupAngle'] = packet.readFloat()
        data['firstTargetLookupRadius'] = packet.readFloat()
        data['globeLightningChargeMs'] = packet.readInt()
        data['globeLightningPrepareMs'] = packet.readInt()
        data['globeLightningVerticalAimingDistance'] = packet.readFloat()
        data['lightning'] = None if optional.next() else packet.readLong()
        data['lightningModeActivationDelayMs'] = packet.readInt()
        data['lightningPeriodMs'] = packet.readInt()
        data['noise'] = None if optional.next() else packet.readLong()
        data['particleEffects'] = None if optional.next() else ParticleEffectsEntity().read(packet, optional)
        data['simplifiedLightning'] = None if optional.next() else packet.readLong()
        data['teslaBallCharging'] = packet.readLong()
        data['teslaChainShot1'] = packet.readLong()
        data['teslaChainShot2'] = packet.readLong()
        data['teslaChainShot3'] = packet.readLong()
        data['teslaChainShot4'] = packet.readLong()
        data['teslaIdle1'] = packet.readLong()
        data['teslaIdle2'] = packet.readLong()
        data['teslaIdle3'] = packet.readLong()
        data['teslaIdle4'] = packet.readLong()
        data['teslaSimpleShot1'] = packet.readLong()
        data['teslaSimpleShot2'] = packet.readLong()
        data['teslaSimpleShot3'] = packet.readLong()
        data['teslaSimpleShot4'] = packet.readLong()
        return data

class TeslaModelBase_prepareGlobeLightning(Codec):
    pass

class TeslaModelBase_reconfigureWeapon(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['firstTargetLookupRadius'] = packet.readFloat()
        return data

class TeslaTarget(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['id'] = packet.readLong()
        data['incarnation'] = packet.readInt()
        data['position'] = Vector3d().read(packet, optional)
        data['type'] = packet.readInt()
        return data

class TeslaLightningRecord(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(TeslaTarget().read(packet, optional))
        data['cascade'] = items
        data['origin'] = TeslaTarget().read(packet, optional)
        return data

class TeslaModelBase_spark(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['shooter'] = packet.readLong()
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(TeslaLightningRecord().read(packet, optional))
        data['lightning'] = items
        return data

class TeslaModelBase_startFire(Codec):
    pass

class TeslaModelBase_stopFire(Codec):
    pass

class TeslaModelServer_lightning(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['clientTime'] = packet.readInt()
        data['firstTargetHitPoint'] = Vector3d().read(packet, optional)
        data['firstTargetRotation'] = Vector3d().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(TeslaLightningRecord().read(packet, optional))
        data['lightning'] = items
        return data

class TeslaModelServer_prepareGlobeLightning(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['clientTime'] = packet.readInt()
        return data

class TeslaModelServer_startFire(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['clientTime'] = packet.readInt()
        return data

class TeslaModelServer_stopFire(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['clientTime'] = packet.readInt()
        return data

class TeslaModelServer_throwGlobeLightning(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['clientTime'] = packet.readInt()
        data['direction'] = Vector3d().read(packet, optional)
        return data

class ThunderCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['shellRadius'] = packet.readFloat()
        data['shotRange'] = packet.readFloat()
        data['speed'] = packet.readFloat()
        return data

class ThunderModelBase_fire(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['shooter'] = packet.readLong()
        data['shotId'] = packet.readInt()
        data['shotDirection'] = Vector3d().read(packet, optional)
        return data

class ThunderModelBase_fireDummy(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['shooter'] = packet.readLong()
        return data

class ThunderModelServer_fireCommand(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['clientTime'] = packet.readInt()
        data['shotId'] = packet.readInt()
        data['shotDirection'] = Vector3d().read(packet, optional)
        return data

class ThunderModelServer_fireDummyCommand(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['clientTime'] = packet.readInt()
        return data

class ThunderModelServer_hitStaticCommand(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['clientTime'] = packet.readInt()
        data['shotId'] = packet.readInt()
        data['hitPointWorld'] = Vector3d().read(packet, optional)
        return data

class ThunderModelServer_hitTargetCommand(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['clientTime'] = packet.readInt()
        data['shotId'] = packet.readInt()
        data['target'] = packet.readLong()
        data['targetPosition'] = Vector3d().read(packet, optional)
        data['hitPointWorld'] = Vector3d().read(packet, optional)
        return data

class ThunderShootSFXCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['barrelFireTexture'] = packet.readLong()
        data['barrelFlameTexture'] = packet.readLong()
        data['barrelSmokeTexture'] = packet.readLong()
        data['explosionMarkTexture'] = packet.readLong()
        data['explosionSize'] = packet.readFloat()
        data['explosionSound'] = packet.readLong()
        data['explosionTexture'] = packet.readLong()
        data['lightingSFXEntity'] = LightingSFXEntity().read(packet, optional)
        data['shell'] = packet.readLong()
        data['shellFlightSound'] = packet.readLong()
        data['shellTexture'] = packet.readLong()
        data['shellTracerTexture'] = packet.readLong()
        data['shotSound'] = packet.readLong()
        return data

class TimeCheckerModelBase(Codec):
    pass

class TimeCheckerModelBase_ping(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['serverSessionTime'] = packet.readInt()
        data['clientPing'] = packet.readFloat()
        return data

class TimeCheckerModelServer_pong(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['clientTime'] = packet.readInt()
        data['serverSessionTime'] = packet.readInt()
        return data

class TimePeriodModelCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['isEnabled'] = bool(packet.readByte())
        data['isTimeless'] = bool(packet.readByte())
        data['timeLeftInSeconds'] = packet.readInt()
        data['timeToStartInSeconds'] = packet.readInt()
        return data

class TimeZoneOffsetModelBase(Codec):
    pass

class TimeZoneOffsetModelServer_setZoneOffset(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['zone'] = packet.readString()
        return data

class TitanUltimateGeneratorCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['blueCell'] = None if optional.next() else packet.readLong()
        data['blueRay'] = None if optional.next() else packet.readLong()
        data['blueRayTip'] = None if optional.next() else packet.readLong()
        data['blueSimpleShield'] = None if optional.next() else packet.readLong()
        data['blueSphere'] = None if optional.next() else packet.readLong()
        data['cell'] = None if optional.next() else packet.readLong()
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(packet.readLong())
        data['coveredTanksIds'] = items
        data['generatorActivationSound'] = packet.readLong()
        data['generatorDeactivationSound'] = packet.readLong()
        data['generatorLoopSound'] = packet.readLong()
        data['generatorTeam'] = packet.readInt()
        data['geosphere'] = None if optional.next() else packet.readLong()
        data['greenCell'] = None if optional.next() else packet.readLong()
        data['greenRay'] = None if optional.next() else packet.readLong()
        data['greenRayTip'] = None if optional.next() else packet.readLong()
        data['greenSimpleShield'] = None if optional.next() else packet.readLong()
        data['greenSphere'] = None if optional.next() else packet.readLong()
        data['ray'] = packet.readLong()
        data['rayTip'] = packet.readLong()
        data['redCell'] = None if optional.next() else packet.readLong()
        data['redRay'] = packet.readLong()
        data['redRayTip'] = packet.readLong()
        data['redSimpleShield'] = None if optional.next() else packet.readLong()
        data['redSphere'] = packet.readLong()
        data['shieldOffSound'] = packet.readLong()
        data['shieldOnSound'] = packet.readLong()
        data['simpleShield'] = None if optional.next() else packet.readLong()
        data['sphere'] = packet.readLong()
        data['zoneRadiusFakeReducing'] = packet.readFloat()
        return data

class TitanUltimateGeneratorModelBase_coverTank(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['tankId'] = packet.readLong()
        return data

class TitanUltimateGeneratorModelBase_uncoverTank(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['tankId'] = packet.readLong()
        data['isStillCovered'] = bool(packet.readByte())
        return data

class TmallModelBase(Codec):
    pass

class TrackedChassisCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['acceleration'] = packet.readFloat()
        data['damping'] = packet.readFloat()
        data['deceleration'] = packet.readFloat()
        data['maxSpeed'] = packet.readFloat()
        data['reverseAcceleration'] = packet.readFloat()
        data['sideAcceleration'] = packet.readFloat()
        data['turnAcceleration'] = packet.readFloat()
        data['turnDeceleration'] = packet.readFloat()
        data['turnMaxSpeed'] = packet.readFloat()
        data['turnReverseAcceleration'] = packet.readFloat()
        return data

class TrackedChassisModelBase_control(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['control'] = packet.readByte()
        data['turnSpeedNumber'] = packet.readByte()
        return data

class TrackedChassisModelServer_controlCommand(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['clientTime'] = packet.readInt()
        data['control'] = packet.readByte()
        data['turnSpeedNumber'] = packet.readByte()
        return data

class TrackersLoggerModelBase(Codec):
    pass

class TrackersLoggerModelServer_logTrackers(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['data'] = packet.readString()
        return data

class TrackingPixelShowingModelBase(Codec):
    pass

class TrackingPixelShowingModelBase_loadPixel(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['pixelUrl'] = packet.readString()
        return data

class TrafficPartnersGoalsModelBase(Codec):
    pass

class TwinsCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['shellRadius'] = packet.readFloat()
        data['speed'] = packet.readFloat()
        return data

class TwinsModelBase_fire(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['shooter'] = packet.readLong()
        data['barrel'] = packet.readByte()
        data['shotId'] = packet.readInt()
        data['shotDirection'] = Vector3d().read(packet, optional)
        return data

class TwinsModelBase_fireDummy(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['shooter'] = packet.readLong()
        data['barrel'] = packet.readByte()
        return data

class TwinsModelServer_fireCommand(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['clientTime'] = packet.readInt()
        data['barrel'] = packet.readByte()
        data['shotId'] = packet.readInt()
        data['shotDirection'] = Vector3d().read(packet, optional)
        return data

class TwinsModelServer_fireDummyCommand(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['clientTime'] = packet.readInt()
        data['barrel'] = packet.readByte()
        return data

class TwinsModelServer_hitStaticCommand(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['clientTime'] = packet.readInt()
        data['shotId'] = packet.readInt()
        data['hitPointWorld'] = Vector3d().read(packet, optional)
        return data

class TwinsModelServer_hitTargetCommand(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['clientTime'] = packet.readInt()
        data['shotId'] = packet.readInt()
        data['target'] = packet.readLong()
        data['targetPosition'] = Vector3d().read(packet, optional)
        data['hitPointWorld'] = Vector3d().read(packet, optional)
        return data

class TwinsShootSFXCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['explosionTexture'] = packet.readLong()
        data['hitMarkTexture'] = packet.readLong()
        data['lightingSFXEntity'] = LightingSFXEntity().read(packet, optional)
        data['muzzleFlashTexture'] = packet.readLong()
        data['shotSound'] = packet.readLong()
        data['shotTexture'] = packet.readLong()
        return data

class UidCheckCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['length'] = packet.readInt()
        return data

class UidCheckModelBase_validateResult(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['status'] = packet.readInt()
        return data

class UidCheckModelServer_validateUid(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['uid'] = packet.readString()
        return data

class UidCheckModelServer_validateUidForPaidRename(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['uid'] = packet.readString()
        return data

class UidNotifierData(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['uid'] = packet.readString()
        data['userId'] = packet.readLong()
        return data

class UidNotifierModelBase_setUid(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(UidNotifierData().read(packet, optional))
        data['users'] = items
        return data

class UltimateCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['chargePercentPerSecond'] = packet.readFloat()
        data['charged'] = bool(packet.readByte())
        data['enabled'] = bool(packet.readByte())
        return data

class UltimateModelBase_resetCharge(Codec):
    pass

class UltimateModelBase_showUltimateCharged(Codec):
    pass

class UltimateModelBase_ultimateRejected(Codec):
    pass

class UltimateModelBase_ultimateUsed(Codec):
    pass

class UltimateModelBase_updateCharge(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['chargeInPercent'] = packet.readInt()
        return data

class UltimateModelBase_updateChargeAndRate(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['chargeInPercent'] = packet.readInt()
        data['chargePercentPerSecond'] = packet.readFloat()
        return data

class UltimateModelServer_activateUltimate(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['clientTime'] = packet.readInt()
        return data

class UpgradeGarageItemModelBase(Codec):
    pass

class UpgradeGarageItemModelBase_itemAlreadyUpgraded(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['expectedPrice'] = packet.readInt()
        return data

class UpgradeGarageItemModelServer_instantUpgrade(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['item'] = packet.readLong()
        data['numLevels'] = packet.readInt()
        data['expectedPrice'] = packet.readInt()
        return data

class UpgradeGarageItemModelServer_speedUp(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['item'] = packet.readLong()
        data['expectedPrice'] = packet.readInt()
        return data

class UpgradeGarageItemModelServer_upgradeItem(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['item'] = packet.readLong()
        data['expectedPrice'] = packet.readInt()
        data['expectedTimeInSeconds'] = packet.readInt()
        return data

class PropertyData(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['finalValue'] = packet.readFloat()
        data['initialValue'] = packet.readFloat()
        data['property'] = packet.readInt()
        return data

class GaragePropertyParams(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['precision'] = packet.readInt()
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(PropertyData().read(packet, optional))
        data['properties'] = items
        data['property'] = packet.readInt()
        data['visibleInInfo'] = bool(packet.readByte())
        return data

class UpgradeParamsData(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['finalUpgradePrice'] = packet.readInt()
        data['initialUpgradePrice'] = packet.readInt()
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(GaragePropertyParams().read(packet, optional))
        data['properties'] = items
        data['speedUpCoeff'] = packet.readDouble()
        data['upgradeLevelsCount'] = packet.readInt()
        data['upgradeTimeCoeff'] = packet.readDouble()
        return data

class UpgradeParamsCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['currentLevel'] = packet.readInt()
        data['itemData'] = UpgradeParamsData().read(packet, optional)
        data['remainingTimeInMS'] = packet.readInt()
        data['speedUpDiscount'] = packet.readInt()
        data['timeDiscount'] = packet.readInt()
        data['upgradeDiscount'] = packet.readInt()
        return data

class UpgradingItemsModelBase(Codec):
    pass

class UpgradingItemsModelBase_init(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(GarageItemInfo().read(packet, optional))
        data['upgradedItems'] = items
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(GarageItemInfo().read(packet, optional))
        data['upgradingItems'] = items
        return data

class UpgradingItemsModelServer_itemUpgraded(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['lightItem'] = packet.readLong()
        return data

class UpgradingItemsModelServer_select(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['lightItem'] = packet.readLong()
        return data

class UpgradingNotification(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['category'] = packet.readInt()
        data['upgradeRemainingTime'] = packet.readLong()
        return data

class UpgradingNotificationsCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(UpgradingNotification().read(packet, optional))
        data['upgradingNotifications'] = items
        return data

class UpgradingNotificationsModelBase_updateUpgradingNotifications(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(UpgradingNotification().read(packet, optional))
        data['upgradingNotifications'] = items
        return data

class ShopAbonementData(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['bonusType'] = packet.readInt()
        data['remainingTime'] = packet.readLong()
        data['shopCategory'] = packet.readInt()
        return data

class UserAbonementsCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(ShopAbonementData().read(packet, optional))
        data['abonementDataList'] = items
        return data

class UserAbonementsModelBase_updateAbonement(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['abonement'] = ShopAbonementData().read(packet, optional)
        return data

class UserActionsLoggerCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['loggingEnabled'] = bool(packet.readByte())
        return data

class UserActionsLoggerModelBase_trackPurchase(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['currency'] = packet.readString()
        data['amount'] = packet.readDouble()
        data['productId'] = packet.readLong()
        data['category'] = packet.readString()
        data['transactionId'] = packet.readString()
        return data

class UserActionsLoggerModelBase_trackPurchaseForGameCurrency(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['currency'] = packet.readString()
        data['amount'] = packet.readInt()
        data['productId'] = packet.readLong()
        data['source'] = packet.readString()
        return data

class UserActionsLoggerModelServer_battleSelectAction(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['action'] = packet.readInt()
        data['mode'] = packet.readInt()
        data['additionalInfo'] = packet.readString()
        return data

class UserActionsLoggerModelServer_changeScreenAction(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['previousScreen'] = None if optional.next() else packet.readInt()
        data['previousSubScreen'] = None if optional.next() else packet.readString()
        data['currentScreen'] = None if optional.next() else packet.readInt()
        data['currentSubScreen'] = None if optional.next() else packet.readString()
        return data

class UserActionsLoggerModelServer_flashMigrationAction(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['action'] = packet.readInt()
        return data

class UserActionsLoggerModelServer_garageAction(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['action'] = packet.readInt()
        data['item'] = packet.readLong()
        return data

class UserActionsLoggerModelServer_paymentAction(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['paymentAction'] = packet.readInt()
        data['layoutName'] = None if optional.next() else packet.readString()
        data['countryCode'] = None if optional.next() else packet.readString()
        data['payModeId'] = None if optional.next() else packet.readString()
        data['shopCategory'] = None if optional.next() else packet.readInt()
        data['shopItemId'] = None if optional.next() else packet.readString()
        return data

class UserActionsLoggerModelServer_settingsAction(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['settings'] = packet.readInt()
        return data

class UserCountryCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['countryCode'] = packet.readString()
        data['countryName'] = packet.readString()
        return data

class UserEmailCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['email'] = None if optional.next() else packet.readString()
        data['emailConfirmed'] = bool(packet.readByte())
        data['passwordSet'] = bool(packet.readByte())
        return data

class UserEmailAndPasswordModelBase_activateMessage(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['message'] = packet.readString()
        return data

class UserEmailAndPasswordModelBase_emailAlreadyUsed(Codec):
    pass

class UserEmailAndPasswordModelBase_emailConfirmed(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['email'] = packet.readString()
        return data

class UserEmailAndPasswordModelBase_incorrectEmail(Codec):
    pass

class UserEmailAndPasswordModelBase_notifyCorrectPassword(Codec):
    pass

class UserEmailAndPasswordModelBase_notifyIncorrectPassword(Codec):
    pass

class UserEmailAndPasswordModelBase_notifyPasswordIsNotSet(Codec):
    pass

class UserEmailAndPasswordModelBase_notifyPasswordIsSet(Codec):
    pass

class UserEmailAndPasswordModelBase_passwordChanged(Codec):
    pass

class UserEmailAndPasswordModelBase_updatePasswordError(Codec):
    pass

class UserEmailAndPasswordModelServer_checkPasswordCorrectness(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['password'] = packet.readString()
        return data

class UserEmailAndPasswordModelServer_checkPasswordIsSet(Codec):
    pass

class UserEmailAndPasswordModelServer_sendPasswordAndEmailChangeInstruction(Codec):
    pass

class UserEmailAndPasswordModelServer_setPassword(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['password'] = packet.readString()
        return data

class UserEmailAndPasswordModelServer_updateEmail(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['email'] = packet.readString()
        return data

class UserEmailAndPasswordModelServer_updatePassword(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['oldPassword'] = packet.readString()
        data['password'] = packet.readString()
        return data

class UserNotifierCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['currentUserId'] = packet.readLong()
        return data

class UserNotifierModelServer_subscribe(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['userId'] = packet.readLong()
        return data

class UserNotifierModelServer_unsubscribe(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(packet.readLong())
        data['usersId'] = items
        return data

class RankBounds(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['lowBound'] = packet.readInt()
        data['topBound'] = packet.readInt()
        return data

class UserPropertiesCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['canUseGroup'] = bool(packet.readByte())
        data['crystals'] = packet.readInt()
        data['crystalsRating'] = packet.readInt()
        data['daysFromLastVisit'] = packet.readInt()
        data['daysFromRegistration'] = packet.readInt()
        data['droneGearScore'] = packet.readInt()
        data['gearScore'] = packet.readInt()
        data['goldsTakenRating'] = packet.readInt()
        data['hasSpectatorPermissions'] = bool(packet.readByte())
        data['hullGearScore'] = packet.readInt()
        data['id'] = packet.readLong()
        data['rank'] = packet.readInt()
        data['rankBounds'] = RankBounds().read(packet, optional)
        data['registrationTimestamp'] = packet.readInt()
        data['resistanceGearScore'] = packet.readInt()
        data['score'] = packet.readInt()
        data['scoreRating'] = packet.readInt()
        data['uid'] = packet.readString()
        data['userProfileUrl'] = packet.readString()
        data['userRating'] = packet.readInt()
        data['weaponGearScore'] = packet.readInt()
        return data

class UserPropertiesModelBase_changeCrystal(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['crystals'] = packet.readInt()
        return data

class UserPropertiesModelBase_onJoinClan(Codec):
    pass

class UserPropertiesModelBase_onLeaveClan(Codec):
    pass

class UserPropertiesModelBase_updateGearScore(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['gearScore'] = packet.readInt()
        data['weaponGS'] = packet.readInt()
        data['hullGS'] = packet.readInt()
        data['droneGS'] = packet.readInt()
        data['resistanceGS'] = packet.readInt()
        return data

class UserPropertiesModelBase_updateRank(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['rank'] = packet.readInt()
        data['score'] = packet.readInt()
        data['bounds'] = RankBounds().read(packet, optional)
        data['canCreateGroup'] = bool(packet.readByte())
        data['forceUpRankForNewbies'] = bool(packet.readByte())
        return data

class UserPropertiesModelBase_updateScore(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['score'] = packet.readInt()
        return data

class UserPropertiesModelBase_updateUid(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['uid'] = packet.readString()
        return data

class UserPropertiesModelBase_updateUserRating(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['userRating'] = packet.readInt()
        return data

class UsersCounterPanelModelBase(Codec):
    pass

class UsersCounterPanelModelBase_saveUniqueUserId(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['id'] = packet.readLong()
        return data

class UsersCounterPanelModelServer_hasNotUniqueUserId(Codec):
    pass

class UsersCounterPanelModelServer_receiveUniqueUserId(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['id'] = packet.readLong()
        return data

class VerticalAutoAimingModelBase(Codec):
    pass

class VideoAdsBattleResultModelBase(Codec):
    pass

class VideoAdsBattleResultModelBase_availableIncreasedRewards(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['reward'] = packet.readInt()
        return data

class VideoAdsBattleResultModelBase_availableSimpleRewards(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['reward'] = packet.readInt()
        return data

class VideoAdsBattleResultModelBase_notAvailableRewards(Codec):
    pass

class VideoAdsBattleResultModelServer_showed(Codec):
    pass

class VideoAdsItemUpgradeCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['cooldownTimeInSec'] = packet.readInt()
        data['timeToReduceUpdateInMin'] = packet.readInt()
        return data

class VideoAdsItemUpgradeModelBase_maxAdsShowed(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['cooldwownTimeInSec'] = packet.readInt()
        return data

class VideoAdsItemUpgradeModelServer_showed(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['item'] = packet.readLong()
        return data

class VideoAdsModelCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['enable'] = bool(packet.readByte())
        return data

class VideoAdsModelBase_disable(Codec):
    pass

class VideoAdsModelBase_enable(Codec):
    pass

class VideoAdsModelServer_clickShow(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['placement'] = packet.readString()
        return data

class VikingUltimateCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['effectEnabled'] = bool(packet.readByte())
        data['effectEndSound'] = packet.readLong()
        data['effectSound'] = packet.readLong()
        data['effectStartSound'] = packet.readLong()
        data['flame'] = packet.readLong()
        data['smoke'] = packet.readLong()
        return data

class VikingUltimateModelBase_effectActivated(Codec):
    pass

class VikingUltimateModelBase_effectDeactivated(Codec):
    pass

class VkontakteInternalLoginModelBase(Codec):
    pass

class VkontaktePaymentModelBase(Codec):
    pass

class VkontaktePaymentModelBase_receivePaymentTransaction(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['transactionId'] = packet.readString()
        return data

class VkontaktePaymentModelServer_getPaymentTransaction(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['shopItemId'] = packet.readLong()
        return data

class WarRedirectModelBase(Codec):
    pass

class WarRedirectModelBase_receiveUrl(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['url'] = packet.readString()
        return data

class WaspUltimateBombCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['bombBeepSound'] = packet.readLong()
        data['bombPlacedSound'] = packet.readLong()
        data['countdown'] = packet.readLong()
        data['craterDecal'] = packet.readLong()
        data['farCountdown'] = packet.readLong()
        data['nuclearBangFlame'] = packet.readLong()
        data['nuclearBangLight'] = packet.readLong()
        data['nuclearBangSmoke'] = packet.readLong()
        data['nuclearBangSound'] = packet.readLong()
        data['nuclearBangWave'] = packet.readLong()
        data['timeLeft'] = packet.readInt()
        return data

class WaspUltimateBombModelBase_bang(Codec):
    pass

class WeaponChargingCommunicationModelBase(Codec):
    pass

class WeaponChargingCommunicationModelBase_handleChargingFinish(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['durationMs'] = packet.readInt()
        return data

class WeaponChargingCommunicationModelBase_handleChargingStart(Codec):
    pass

class WeaponChargingCommunicationModelServer_finishCharging(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['clientTime'] = packet.readInt()
        return data

class WeaponChargingCommunicationModelServer_startCharging(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['clientTime'] = packet.readInt()
        return data

class WeaponCommonCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['buffShotCooldownMs'] = packet.readInt()
        data['buffed'] = bool(packet.readByte())
        data['highlightingDistance'] = packet.readFloat()
        data['impactForce'] = packet.readFloat()
        data['kickback'] = packet.readFloat()
        data['turretRotationAcceleration'] = packet.readFloat()
        data['turretRotationSound'] = packet.readLong()
        data['turretRotationSpeed'] = packet.readFloat()
        return data

class WeaponCommonModelBase_setBuffed(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['buffed'] = bool(packet.readByte())
        data['kickback'] = packet.readFloat()
        return data

class WeaponRotationLimitModelBase(Codec):
    pass

class VerticalAnglesCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['angleDown'] = packet.readFloat()
        data['angleUp'] = packet.readFloat()
        return data

class WeaponWeakeningCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['maximumDamageRadius'] = packet.readFloat()
        data['minimumDamagePercent'] = packet.readFloat()
        data['minimumDamageRadius'] = packet.readFloat()
        return data

class WeaponWeakeningModelBase_reconfigureWeapon(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['maxDamageRadius'] = packet.readFloat()
        data['minDamageRadius'] = packet.readFloat()
        return data

class WeeklyContainerModelBase(Codec):
    pass

class WeeklyContainerModelBase_openSuccessful(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(ContainerGivenItem().read(packet, optional))
        data['rewards'] = items
        return data

class WeeklyContainerModelBase_updateCount(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['count'] = packet.readInt()
        return data

class WeeklyContainerModelServer_open(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['amount'] = packet.readInt()
        return data

class WeeklyQuestShowingCC(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['hasNewQuests'] = bool(packet.readByte())
        data['timeToNextQuest'] = packet.readInt()
        return data

class WeeklyQuestInfo(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['description'] = packet.readString()
        data['finishCriteria'] = packet.readInt()
        data['image'] = packet.readLong()
        data['level'] = packet.readInt()
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(QuestPrizeInfo().read(packet, optional))
        data['prizes'] = items
        data['progress'] = packet.readInt()
        data['questId'] = packet.readLong()
        return data

class WeeklyQuestShowingModelBase_openWeeklyQuest(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        items = list()
        for _ in range(protocol.decode_length(packet)):
            items.append(WeeklyQuestInfo().read(packet, optional))
        data['info'] = items
        return data

class WeeklyQuestShowingModelBase_prizeGiven(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['questId'] = packet.readLong()
        return data

class WeeklyQuestShowingModelServer_givePrize(Codec):
    def read(self, packet, optional):
        data = super().read(packet, optional)
        data['questId'] = packet.readLong()
        return data

class WeeklyQuestShowingModelServer_openWindow(Codec):
    pass

CODECS = {
    6547735083931959597: AchievementCC(),
    2680009258432680198: AchievementPanelModelBase_activateAchievement(),
    1687508684412095220: AchievementPanelModelBase_completeAchievement(),
    8166810800706377715: ActiveAfterDeathCC(),
    3717652074185547941: ShopAbonementsCC(),
    5275715475196145069: AdShowModelBase(),
    1509044331452723366: AdShowModelServer_logAdShow(),
    8841505497388123861: AlertModelBase(),
    3816477663354654461: AlertModelBase_show(),
    3887300142182314710: AlipayPaymentModelBase(),
    8670485658284683723: AlipayPaymentModelBase_receiveUrl(),
    8903612219971382184: AlipayPaymentModelServer_getPaymentUrl(),
    4350010463598765092: AndroidAppRatingModelBase(),
    1650582394292876456: AndroidAppRatingModelBase_showDialogAppRating(),
    2621082746916300184: AndroidAppRatingModelServer_goToMarket(),
    8045905061506504555: AndroidAppRatingModelServer_setAppRating(),
    138302228481306525: AndroidBannerModelCC(),
    1545435727127215366: AndroidOffersRankModelBase(),
    6820688895043695030: AndroidPayModelBase(),
    8483290038461952253: AndroidPayModelBase_consume(),
    3503800293858933838: AndroidPayModelServer_checkForConsumeTokens(),
    5131513953216243150: AndroidPayModelServer_consumeSuccess(),
    6493659889367601103: AndroidPayModelServer_makePayment(),
    2811227871157229446: AndroidPurchaseOfUpgradesModelBase(),
    3679616099605124101: AndroidPurchaseOfUpgradesUserModelBase(),
    8870422540813282532: AndroidPurchaseOfUpgradesUserModelBase_changeLevel(),
    8615919048728523513: AndroidPurchaseOfUpgradesUserModelServer_purchaseOfUpgrades(),
    6354428694367113350: AndroidRenameCC(),
    3478937145231606249: AndroidRenameModelBase_renameFail(),
    3544626612976749869: AndroidRenameModelBase_renameSuccessful(),
    4618195956704709407: AndroidRenameModelServer_rename(),
    8197765134463678459: AndroidSpecialOfferModelCC(),
    3456373265416154340: AntiAddictionAlertModelBase(),
    3670017185935709031: AntiAddictionAlertModelBase_realNameAndIDNumberSetError(),
    4363504074145686905: AntiAddictionAlertModelBase_realNameAndIDNumberSetSuccesfully(),
    2354250451678587805: AntiAddictionAlertModelBase_showAntiAddictionAlert(),
    2964303851449906697: AntiAddictionAlertModelServer_setRealNameAndIDNumber(),
    1500120709087433677: AresUltimateCC(),
    5746393814579896427: AresUltimateModelBase_activate(),
    5591830300947957348: AresUltimateModelBase_cancel(),
    8656207098078662791: AresUltimateModelServer_shotCommand(),
    7899544742191273818: AresUltimateProjectileCC(),
    5536793758712801336: AresUltimateProjectileModelBase_damageDischarge(),
    977242693633208314: AresUltimateProjectileModelBase_explode(),
    3421230400639853343: AresUltimateProjectileModelBase_healDischarge(),
    2763115404716449924: AresUltimateProjectileModelBase_shoot(),
    2774951535666171023: ArmorGamesLoginModelBase(),
    7970528904804811572: ArmsRaceCC(),
    3177300757642975034: ArmsRaceModelBase_levelUpUserPrepare(),
    3177300755041195751: ArmsRaceModelBase_levelUpUserSpawned(),
    8013008932473060482: ArmsRaceModelBase_setUserLevelSilently(),
    8754295211549969729: ArtilleryElevatingBarrelCC(),
    435864882753350819: ArtilleryElevatingBarrelModelBase_update(),
    6450045357005946651: ArtilleryElevatingBarrelModelServer_update(),
    6642061974307112160: ArtilleryCC(),
    5328791774593696530: ArtilleryRotatingTurretModelBase(),
    4499337062875496540: ArtillerySfxCC(),
    889088554226598993: AsiasoftLoginCC(),
    1467615158978952180: AsiasoftLoginModelBase_gotoInitialUrl(),
    5246598514778389798: AsiasoftLoginModelBase_gotoUrl(),
    9172683337083990650: AsiasoftLoginModelServer_initAuth(),
    5954511439249480596: AsiasoftPaymentModelBase(),
    3824640264557354342: AsiasoftPaymentModelBase_proceedToPayment(),
    3051414228463582581: AsiasoftPaymentModelBase_showAccountBalance(),
    5565120184921745371: AsiasoftPaymentModelServer_checkBalance(),
    3239853014157967448: AsiasoftPaymentModelServer_requestPayment(),
    6169263949965533624: AssaultCC(),
    4137943056451534814: AsyncUrlModelBase(),
    1427615333413857597: AsyncUrlModelBase_receiveUrl(),
    8164325377073720540: AsyncUrlModelBase_showErrorUrlReceived(),
    4655104222383612536: AsyncUrlModelServer_getUrl(),
    1475210252818583689: AutoSupplyRestrictionCC(),
    6666434572901825074: AutoSupplyRestrictionModelBase_setAllowed(),
    448165915400495481: AvailableDevicesModelBase(),
    7615142300796401818: AvailableDevicesModelBase_devicesLoaded(),
    7806260029063678398: AvailableDevicesModelServer_loadAvailableDevices(),
    5170995807812084033: AvailableItemsModelBase(),
    8422868402505316202: AvailableItemsModelBase_showAvailableItems(),
    9025760020650156058: AvailableItemsModelServer_select(),
    1164458258646872337: AvailableShotSkinsCC(),
    5207857306014573244: AvailableSkinsCC(),
    2269636304551395302: BallExplosionCC(),
    3389547588708956209: BattleARModelBase(),
    5385894712778438726: BattleChatModelBase(),
    5446292333752834689: BattleChatModelBase_addMessage(),
    5628810758806816321: BattleChatModelBase_addSpectatorTeamMessage(),
    909632825295029806: BattleChatModelBase_addSystemMessage(),
    2321967673566621796: BattleChatModelBase_addTeamMessage(),
    684534556503643918: BattleChatModelBase_updateTeamHeader(),
    1943137779427586084: BattleChatModelServer_sendMessage(),
    2646290402680436382: BattleChatModelServer_spectatorTeamMessage(),
    8618289906968528240: BattleCreateCC(),
    849912474669372210: BattleCreateModelBase_createFailedBattleCreateDisabled(),
    7542085633816094294: BattleCreateModelBase_createFailedServerIsHalting(),
    3748490273709739281: BattleCreateModelBase_createFailedTooManyBattlesFromYou(),
    4735121264368139887: BattleCreateModelBase_createFailedYouAreBanned(),
    5425510324539583895: BattleCreateModelBase_setFilteredBattleName(),
    8492555063055567877: BattleCreateModelServer_checkBattleNameForForbiddenWords(),
    9127975309708990143: BattleCreateModelServer_createBattle(),
    994751080759166914: BattleDMInfoCC(),
    5500506947295869799: BattleDMInfoModelBase_addUser(),
    3174409532068648254: BattleDMInfoModelBase_removeUser(),
    6635862338174306891: BattleDMInfoModelBase_updateUserScore(),
    3262996856113624369: BattleDMModelBase(),
    3347201351051872955: BattleDebugModelBase(),
    4143829819791620454: BattleDebugModelBase_addFrame(),
    4143829819792299891: BattleDebugModelBase_addGizmo(),
    668484102241418399: BattleDebugModelBase_addMarker(),
    1564870803401900147: BattleDebugModelBase_clear(),
    532750833650130316: BattleEntranceModelBase(),
    6130398608824800551: BattleEntranceModelBase_enterToBattleFailed(),
    8466121840412813207: BattleEntranceModelBase_equipmentNotMatchConstraints(),
    6292253993629897880: BattleEntranceModelBase_fightFailedServerIsHalting(),
    7272171964896889145: BattleEntranceModelServer_fight(),
    4347865518183058614: BattleEntranceModelServer_joinAsSpectator(),
    5840277576929932799: BattleFacilitiesModelBase(),
    4875657231924274329: BattleGearScoreCC(),
    4570603277638068285: BattleGearScoreModelBase_setGearScore(),
    510571369984788727: BattleGoldBonusCC(),
    9132611606180179497: BattleGoldBonusesModelBase_goldTaken(),
    2913056477936031270: BattleInfoCC(),
    7403247229773089923: BattleInfoModelBase_resetBattleName(),
    8930926847959017775: BattleInfoModelBase_roundFinished(),
    6852580722697364034: BattleInfoModelBase_roundStarted(),
    8399333088188950506: BattleInfoModelBase_setBattleName(),
    7708461874480136055: BattleInfoModelBase_updateSuspicion(),
    2454305702329641583: BattleInfoModelBase_updateUserSuspiciousState(),
    7588919819099098108: BattleInviteCC(),
    4588303805980941192: BattleInviteModelBase_accepted(),
    1713161837666313126: BattleInviteModelBase_notify(),
    4588303336291477169: BattleInviteModelBase_rejected(),
    4893933961532699766: BattleInviteModelBase_rejectedBattleNotFound(),
    5182609804280043241: BattleInviteModelBase_rejectedInvitationToBattleDisabled(),
    3913319265649138109: BattleInviteModelBase_rejectedPanelNotLoaded(),
    6111037286496381339: BattleInviteModelBase_rejectedUserAlreadyInBattle(),
    831808067593820962: BattleInviteModelBase_rejectedUserInMatchBattle(),
    1439753158253520585: BattleInviteModelBase_rejectedUserOffline(),
    7727342312302680159: BattleInviteModelServer_accept(),
    7727342312062918238: BattleInviteModelServer_invite(),
    7727342311813929416: BattleInviteModelServer_reject(),
    5107088767315826541: BattleJGRModelBase(),
    4693095212037357021: BattleMapCC(),
    2057320715890332864: BattleMineCC(),
    4684924965644046597: BattleMinesModelBase_activateMine(),
    6692915066613838049: BattleMinesModelBase_explodeMine(),
    4854122610453716941: BattleMinesModelBase_putMine(),
    8981778623033134120: BattleMinesModelBase_removeAllMines(),
    6682764721619581273: BattleMinesModelBase_removeMines(),
    4885574251230758729: ModerationToolInteropCC(),
    886347819034723364: BattleModerationModelBase_battleInfo(),
    28608551882350617: BattleModerationModelBase_userFound(),
    3727141956503643256: BattleModerationModelBase_userNotFound(),
    7295619479267689162: BattleModerationModelServer_findUser(),
    3885077615914307071: BattleNotifierModelBase(),
    8490788377017654021: BattleNotifierModelBase_leaveBattle(),
    2654121441022489124: BattleNotifierModelBase_leaveGroup(),
    2294614206699594086: BattleNotifierModelBase_setBattle(),
    6282101613166902704: BattleParamInfoCC(),
    1535852183188388854: BattlePassPackageCC(),
    2855626038259597130: BattlePassPurchaseNotifierCC(),
    1834399130506966481: BattlePassPurchaseNotifierModelBase_battlePassPurchased(),
    2581043314307992376: BattleSelectModelBase(),
    7185655480741610982: BattleSelectModelBase_battleItemsPacketJoinSuccess(),
    5286660700932747815: BattleSelectModelBase_select(),
    5023889959032261856: BattleSelectModelServer_onSelect(),
    7145902898523892749: BattleSelectModelServer_search(),
    3504404725408555587: BattleTDMModelBase(),
    7735533627899934139: BattleTJRModelBase(),
    920233600808088339: BattleUltimateRadarCC(),
    676665252684358508: BattleUltimateRadarModelBase_updateDiscoveredTanksList(),
    2145315487377727727: BattlefieldBonusesCC(),
    4768403502339907548: BattlefieldBonusesModelBase_attemptToTakeBonusFailedTankNotActive(),
    4067512365209236558: BattlefieldBonusesModelBase_bonusTaken(),
    7500147818756926013: BattlefieldBonusesModelBase_removeBonuses(),
    1397939087262834696: BattlefieldBonusesModelBase_spawnBonuses(),
    2222252323682008158: BattlefieldBonusesModelBase_spawnBonusesOnGround(),
    7169914520594665858: BattlefieldBonusesModelServer_attemptToTakeBonus(),
    7401419333842694749: BattlefieldCC(),
    5523262832935222243: BattlefieldModelBase_battleFinish(),
    5200451168146380991: BattlefieldModelBase_battleRestart(),
    773226029258926866: BattlefieldModelBase_battleStart(),
    3057042862073659526: BattlefieldModelBase_traceHit(),
    1342713417991483261: BattlefieldModelServer_dg(),
    1342713417991483047: BattlefieldModelServer_kd(),
    7686916658208568653: BattlefieldModelServer_sendTimeStatisticsCommand(),
    1342713417991482645: BattlefieldModelServer_xc(),
    7267982595724632282: BillboardImageCC(),
    2101100305743734614: BillboardCC(),
    3989435919503695016: BlockValidatorModelBase(),
    1797622064455841562: BlockValidatorModelBase_youAreBlocked(),
    1798193036336198760: BlockValidatorModelBase_youWereKicked(),
    7235761383767133268: BonkWeaponCC(),
    1613454127258727634: BonkWeaponModelBase_preCharge(),
    1613451515706630596: BonkWeaponModelBase_staticHit(),
    8773959930134829056: BonkWeaponModelBase_tankHit(),
    7389082549950176165: BonkWeaponModelServer_charge(),
    1088137836668471684: BonkWeaponModelServer_dummyHit(),
    3161225354533687462: BonkWeaponModelServer_preCharge(),
    3161227966085784500: BonkWeaponModelServer_staticHit(),
    7700630178839767928: BonkWeaponModelServer_tankHit(),
    734046428686709949: BonusCatchDailyQuestModelBase(),
    8966480724474352542: BonusCommonCC(),
    2755102901816752332: BonusImageCC(),
    3581200692998080835: BonusInfoCC(),
    871830487713326786: BonusItemCC(),
    4852733273940711508: BonusItemsShowingCC(),
    7484749077586587376: BonusLightCC(),
    3305376498517733218: NotificationBonusCC(),
    5215232257096838692: BonusRegionsCC(),
    5055746953759097716: BossStateCC(),
    5226450868398444185: BossStateModelBase_changeRole(),
    6144768774251946863: BottomDescriptionCC(),
    7650892929241629391: BuyProAbonementModelBase(),
    2359493501051379828: BuyProAbonementModelServer_selectProBattlePass(),
    2769268442698022653: BuyableCC(),
    2108103923322474513: CaptchaCC(),
    4998460206979194964: CaptchaModelBase_captchaCorrect(),
    756296912352966419: CaptchaModelBase_captchaFailed(),
    6032454100111503495: CaptchaModelBase_showCaptcha(),
    3312562673813486434: CaptchaModelServer_checkCaptcha(),
    7369561336714029596: CaptchaModelServer_getNewCaptcha(),
    3588672565564881648: CaptureGoalDailyQuestModelBase(),
    4044512837800124088: CaptureGoalWithEquipDailyQuestModelBase(),
    2648029304025111838: CaptureTheFlagCC(),
    6435224344315412449: ChallengeShopItemsCC(),
    7545737143583612561: ChallengeShopItemsModelBase_itemsLoaded(),
    6463503594193048941: ChallengeRewardsCC(),
    597363529432877429: ChallengesRewardingModelBase_sendTiersInfo(),
    5882968633998712602: ChallengesRewardingModelServer_requestTiersInfo(),
    611991980643164574: ChallengesRewardingUserModelBase(),
    8501836061189911793: ChallengesRewardingUserModelBase_rewardNotify(),
    8125204403329337154: ChallengesTimeCC(),
    1435989843446835228: ChangeUidModelBase(),
    8373932757409735038: ChangeUidModelBase_parametersIncorrect(),
    7442042802350086833: ChangeUidModelBase_passwordIncorrect(),
    5576473334746857114: ChangeUidModelBase_startChangingUid(),
    3377199473597432596: ChangeUidModelBase_startChangingUidViaPartner(),
    4372072095070326083: ChangeUidModelBase_uidChanged(),
    4296370727430498670: ChangeUidModelBase_uidIncorrect(),
    1063291954443433567: ChangeUidModelServer_changeUid(),
    3390229599622504013: ChangeUidModelServer_changeUidAndPassword(),
    3679148922731132775: ChangeUidModelServer_changeUidViaPartner(),
    4971049914998609087: ChangeUidModelServer_checkChangeUidParams(),
    6071565290933648049: ChatCC(),
    3430453981713932879: ChatModelBase_cleanUsersMessages(),
    4202027557179282961: ChatModelBase_showMessages(),
    2637004439773039233: ChatModelBase_updateTypingSpeedAntifloodParams(),
    6683616035809206555: ChatModelServer_changeChannel(),
    3122753540375943279: ChatModelServer_sendMessage(),
    8875814722787229550: China3rdPlatformLoginModelBase(),
    4517621215152868699: China3rdPlatformPaymentModelBase(),
    1478849214624510330: China3rdPlatformPaymentModelBase_receiveUrl(),
    7156698884510877251: China3rdPlatformPaymentModelServer_getPaymentUrl(),
    4862526161024984254: ChinaSDKEntranceModelBase(),
    8545424887360280089: ChinaSDKEntranceModelBase_expiredToken(),
    4713077589284325330: ChinaSDKEntranceModelServer_login(),
    2325690216370122131: ChinaSDKUserModelBase(),
    871785774630866042: ClanAcceptedModelBase(),
    8505528268518035537: ClanAcceptedModelBase_onAdding(),
    5416959277000689134: ClanAcceptedModelBase_onRemoved(),
    6768558945605412944: ClanAcceptedNotificatorModelBase(),
    4067091950557716357: ClanAcceptedNotificatorModelBase_onAdding(),
    3047358033552964356: ClanAcceptedNotificatorModelBase_onRemoved(),
    5699223247900583025: ClanAcceptedNotificatorModelServer_remove(),
    2258608502530454776: ClanBlockModelBase(),
    529192590824176645: ClanBlockModelBase_clanBaned(),
    891137447706578619: ClanChatCC(),
    6128944648146277068: ClanChatModelBase_receiveMessage(),
    2084673864582722213: ClanChatModelBase_showMessagesHistory(),
    7850830218180555591: ClanChatModelServer_sendMessage(),
    6042266992054445914: ClanCreateCC(),
    965038718622205192: ClanCreateModelBase_alreadyInClan(),
    2841628493531209402: ClanCreateModelBase_correctName(),
    1098447085609281141: ClanCreateModelBase_correctTag(),
    7242085173649581109: ClanCreateModelBase_nameIsIncorrect(),
    9094713730473788268: ClanCreateModelBase_notUniqueName(),
    3863715424926803855: ClanCreateModelBase_notUniqueTag(),
    1098125832007411821: ClanCreateModelBase_otherError(),
    775784824927236828: ClanCreateModelBase_tagIsIncorrect(),
    657333553369412171: ClanCreateModelServer_createClan(),
    4039227443599950780: ClanCreateModelServer_validateName(),
    1915466440797691199: ClanCreateModelServer_validateTag(),
    8115862559097350286: ClanFriendsCC(),
    9173450165804477684: ClanFriendsModelBase_onUserAdd(),
    2259562525324509359: ClanFriendsModelBase_onUserRemove(),
    2102592086285207698: ClanFriendsModelBase_userJoinClan(),
    3413041240691998182: ClanIncmingCC(),
    2116619297575918257: ClanIncomingModelBase_onAdding(),
    8171778085109430386: ClanIncomingModelBase_onRemoved(),
    6220257539261493170: ClanIncomingNotificatorModelBase(),
    203455778751335299: ClanIncomingNotificatorModelBase_onAdding(),
    6307129156416084158: ClanIncomingNotificatorModelBase_onRemoved(),
    7242472008969390097: ClanIncomingNotificatorModelServer_remove(),
    8762499949521628954: ClanInfoCC(),
    8414904802770944911: ClanInfoModelServer_buyAdditionalPlace(),
    3815490292930435163: ClanInfoModelServer_changeMinRankForAddClan(),
    8007488344758565803: ClanInfoModelServer_incomingRequestEnable(),
    2299643224668059251: ClanInfoModelServer_makeUserClanOwner(),
    33814410174015370: ClanInfoModelServer_updateClan(),
    6247612331185889342: ClanLoadingPanelCC(),
    6799031573555454738: ClanLoadingPanelModelServer_showClan(),
    7076997842038370798: ClanMembersCC(),
    1137031257296827847: ClanMembersDataModelBase_sendData(),
    1950513864460929950: ClanModelBase(),
    8270197748066292911: ClanModelBase_alreadyInAccepted(),
    2921439373521956096: ClanModelBase_alreadyInClan(),
    7126678172355112774: ClanModelBase_alreadyInClanIncoming(),
    7126678344122690188: ClanModelBase_alreadyInClanOutgoing(),
    7589877496319635201: ClanModelBase_alreadyInUserOutgoing(),
    2643597252804891336: ClanModelBase_maxMembers(),
    7821016019007652825: ClanModelBase_userExist(),
    8171556272533651970: ClanModelBase_userLowRank(),
    4936172528462495806: ClanModelBase_userNotExist(),
    2595512070454748099: ClanModelServer_accept(),
    8170500606380047302: ClanModelServer_add(),
    7315413066050502536: ClanModelServer_addInClanByUid(),
    3976649815741437475: ClanModelServer_checkUid(),
    2595512070943498842: ClanModelServer_reject(),
    5851051512666306329: ClanModelServer_rejectAll(),
    2308297905007424234: ClanModelServer_removeUserFromClan(),
    2595512070943866177: ClanModelServer_revoke(),
    5153492346890044680: ClanModelServer_userLeavesClan(),
    7949064601138261608: ClanNotifierData(),
    8814983091022938481: ClanNotifierModelBase_sendData(),
    6048708024205731750: ClanOutgoingCC(),
    1461819455835620465: ClanOutgoingModelBase_onAdding(),
    8422914968360441294: ClanOutgoingModelBase_onRemoved(),
    3495778378718578856: ClanPanelModelBase(),
    601616674277853305: ClanPanelModelServer_sendInviteToClan(),
    2606798949852309286: ClanPanelNotificationCC(),
    7964399173020404361: ClanPanelNotificationModelBase_newAcceptedUser(),
    8876484926014055516: ClanPanelNotificationModelBase_newClanInvite(),
    7752107009821952394: ClanPanelNotificationModelBase_newIncomingUser(),
    5681585629533054379: ClanPanelNotificationModelBase_updateRestrictionTimeJoinClan(),
    6882547137659234022: ClanPermissionsCC(),
    3744111642464146587: ClanPermissionsModelBase_updateActions(),
    1923257295373322726: ClanPermissionsModelServer_setPermissionForUser(),
    2023935033691193766: ClanUserAcceptedModelBase(),
    5431051470628560497: ClanUserAcceptedModelBase_onAdding(),
    2341898910974720974: ClanUserAcceptedModelBase_onRemoved(),
    5297988375509642470: ClanUserAcceptedNotificatorModelBase(),
    8283979377870649371: ClanUserAcceptedNotificatorModelBase_onAdding(),
    1451056302818902234: ClanUserAcceptedNotificatorModelBase_onRemoved(),
    7869726454090036498: ClanUserAcceptedNotificatorModelServer_removeNotification(),
    4813819753066546054: ClanUserIncomingModelBase(),
    2540739041638637649: ClanUserIncomingModelBase_onAdding(),
    4975933980834870766: ClanUserIncomingModelBase_onRemoved(),
    649690707811173020: ClanUserIncomingNotificatorModelBase(),
    7036579732984679577: ClanUserIncomingNotificatorModelBase_onAdding(),
    3226957146864862616: ClanUserIncomingNotificatorModelBase_onRemoved(),
    6438787634351406064: ClanUserIncomingNotificatorModelServer_removeNotification(),
    6101288557408637643: ClanUserLoaderModelBase(),
    2197458145772399319: ClanUserLoaderModelBase_showWindow(),
    7617813858556886454: ClanUserLoaderModelServer_hideClan(),
    7617813556474090875: ClanUserLoaderModelServer_showClan(),
    1115275516484037832: ClanUserCC(),
    246375933974875495: ClanUserModelBase_alreadyInAccepted(),
    2654832856752451606: ClanUserModelBase_alreadyInClan(),
    7181081297769655902: ClanUserModelBase_alreadyInClanOutgoing(),
    246376163847464422: ClanUserModelBase_alreadyInIncoming(),
    246376335615041836: ClanUserModelBase_alreadyInOutgoing(),
    1396873965565453319: ClanUserModelBase_clanBlocked(),
    7273589105071129668: ClanUserModelBase_clanExist(),
    4055708865249377998: ClanUserModelBase_clanIncomingRequestDisabled(),
    6409604452180237449: ClanUserModelBase_clanNotExist(),
    5468958804872316273: ClanUserModelBase_creatorLeaveOfClanIfEmptyClan(),
    829688362537212989: ClanUserModelBase_joinClan(),
    829688408607058074: ClanUserModelBase_leftClan(),
    4880074127246447030: ClanUserModelBase_removeClanBonuses(),
    8859088031384930809: ClanUserModelBase_showAlertFullClan(),
    6743859698435304619: ClanUserModelBase_updateStatusBonusesClan(),
    1381932048462271336: ClanUserModelBase_userLowRank(),
    7596195422068077421: ClanUserModelServer_accept(),
    80241701660238756: ClanUserModelServer_add(),
    3824955754884657913: ClanUserModelServer_addInClanByName(),
    471670590929829524: ClanUserModelServer_addInClanByTag(),
    7262595112033129180: ClanUserModelServer_checkClanName(),
    6779896126543161887: ClanUserModelServer_checkClanTag(),
    7596195422556828164: ClanUserModelServer_reject(),
    6398462878311325443: ClanUserModelServer_rejectAll(),
    7596195422557195499: ClanUserModelServer_revoke(),
    6398462867368048458: ClanUserModelServer_revokeAll(),
    881620222948704326: ClanUserOutgoingModelBase(),
    991279107648199953: ClanUserOutgoingModelBase_onAdding(),
    6163835825449594578: ClanUserOutgoingModelBase_onRemoved(),
    1987602940683756146: CoinInfoCC(),
    6761797949292995210: CoinInfoModelBase_changeBy(),
    4186634155763928467: CoinPackageCC(),
    5968651969329902265: ColorAdjustCC(),
    7968893209278436962: ColorTransformCC(),
    4068618447512888231: ColoringCC(),
    5242494537362061802: CommonFacilityCC(),
    7197018345543317788: CommonFacilityModelBase_markAsDispelled(),
    3650502766592528965: CommunicationPanelModelBase(),
    513176302374590130: CompositePartnerCC(),
    5633963799060031149: CompositePartnerModelBase_linkAlreadyExists(),
    1536180556703958719: CompositePartnerModelBase_loginBy2FaHashFailed(),
    8163438958342957025: CompositePartnerModelBase_loginFailed(),
    3817721646456334094: CompositePartnerModelBase_request2FaCode(),
    3817721646456198125: CompositePartnerModelBase_request2FaHash(),
    8258419313269914260: CompositePartnerModelBase_setPartnerObject(),
    5360154047954216322: CompositePartnerModelBase_showTutorial(),
    2351885759278528358: CompositePartnerModelBase_startPartnerRegistration(),
    5469977024335963604: CompositePartnerModelBase_wrong2FaCode(),
    3548591940929833025: CompositePartnerModelBase_wrongPassword(),
    5502663637165183425: CompositePartnerModelServer_bindAccount(),
    639108235158074053: CompositePartnerModelServer_finishRegistration(),
    7235053036679894364: CompositePartnerModelServer_loadPartnerObjectOnClient(),
    2240469640879619955: CompositePartnerModelServer_login2FA(),
    5542522814615990068: CompositePartnerModelServer_loginViaPartner(),
    2045663294076292: CompositePartnerModelServer_socialNetworkAssociations(),
    5063440947220431571: CompositePartnerModelServer_validateHash(),
    2992826548087483649: ContainerOpeningCC(),
    8703491895745032700: ContainerResourceCC(),
    8609159954983209097: ContainerTypeCC(),
    7516939711225433951: ContinueBattleModelBase(),
    6050354202344389443: ContinueBattleModelServer_continueBattle(),
    6410150684589287250: ControlPointsModelBase(),
    120961863156462946: CountableItemCC(),
    6514486185481319524: CreatorTagCC(),
    8474842154466361244: CreatorTagModelServer_resetCreatorTag(),
    2906745836524588681: CreatorTagModelServer_setCreatorTag(),
    965113061940997187: CreatorTagsCC(),
    6993396036508950804: CrisisSoundCC(),
    1500873576045780408: CrisisSoundModelBase_playDamageModeSound(),
    3729620571748936862: CrisisSoundModelBase_playProtectionModeSound(),
    5324413740417241978: CrisisSoundModelBase_playSpeedModeSound(),
    8963009845988972279: CrusaderTankHitModelBase(),
    5079950277195505395: CrusaderTankHitModelServer_hitTargetCommand(),
    238501802775982054: CrusaderUltimateProjectileCC(),
    2777244197349482694: CrusaderUltimateProjectileModelBase_explode(),
    6817243902576697668: CrusaderUltimateProjectileModelBase_shoot(),
    2789386002514731022: CrystalPackageCC(),
    7448308068683993391: DailyQuestShowingCC(),
    116148721672114487: DailyQuestShowingModelBase_openDailyQuest(),
    2548880148000562801: DailyQuestShowingModelBase_prizeGiven(),
    1702949206850066207: DailyQuestShowingModelBase_skipQuest(),
    6477618410146422133: DailyQuestShowingModelServer_givePrize(),
    2107797068586120346: DailyQuestShowingModelServer_openWindow(),
    3200492954591007439: DailyQuestShowingModelServer_skipQuestForCrystals(),
    7815013099669683774: DailyQuestShowingModelServer_skipQuestForFree(),
    6981574586129605154: DailyQuestShowingModelServer_skipQuestForShowedAds(),
    3248199557469599724: DamageIndicatorCC(),
    5668963828502041866: DamageIndicatorModelBase_hit(),
    1597293699677435224: DamageIndicatorModelBase_showDamageForShooter(),
    4985902739565542786: DataOwnerCC(),
    7109632754421804521: DelayMountCategoryCC(),
    3935107155251354407: DescriptionModelBase(),
    7159027330910170009: DetachModelBase(),
    2528403217084400809: DetachModelServer_detach(),
    7640081207058999117: DevicePropertiesCC(),
    6590506277285284269: DictatorUltimateCC(),
    2102265333102715443: DictatorUltimateModelBase_showUltimateUsed(),
    8143863462021990978: DiscountCollectorModelBase(),
    3127254869076158060: DiscountForUpgradeModelBase(),
    2951667042968033849: DiscountCC(),
    7700337090161867199: ShotCC(),
    1263966930259359161: DiscreteShotModelBase_reconfigureWeapon(),
    2088311509237784241: DiscreteWeaponCommunicationModelBase(),
    7158157536363117957: DiscreteWeaponCommunicationModelBase_shoot(),
    3668076747003781473: DiscreteWeaponCommunicationModelServer_tryToDummyShoot(),
    9084617415930553131: DiscreteWeaponCommunicationModelServer_tryToShoot(),
    821863604528384663: DispatcherModelBase(),
    3216143066888387731: DispatcherModelBase_loadDependencies(),
    7640916300855664666: DispatcherModelBase_loadObjectsData(),
    9038756763225879447: DispatcherModelBase_unloadObjects(),
    1816792453857564692: DispatcherModelServer_dependeciesLoaded(),
    8237913720896985151: DominationCC(),
    1168222193764656966: DominationModelBase_onPointActiveStateChanged(),
    8981442771495912329: DominationModelBase_pointCaptureStarted(),
    8981442771483046461: DominationModelBase_pointCaptureStopped(),
    5685137488048743855: DominationModelBase_setPointProgress(),
    4554683101226393521: DominationModelBase_setPointState(),
    4003302248435715730: DominationModelBase_stopBattle(),
    114702575520501699: DominationModelBase_tankEnteredPointZone(),
    1063883522906918839: DominationModelBase_tankLeftPointZone(),
    308262612840671480: DominationModelServer_forceUpdatePoint(),
    3395764563215792356: DonationAlertCC(),
    7555838499720932524: DonationAlertModelBase_showDonationAlert(),
    1153688745215560661: DonationAlertModelBase_showDonationAlertWithEmailBlock(),
    5943456002943068649: DonationAlertModelBase_showEmailIsBusy(),
    6826457443736700407: DonationAlertModelBase_showEmailIsForbidden(),
    5943456002943184476: DonationAlertModelBase_showEmailIsFree(),
    4030016703772274015: DonationAlertModelServer_confirm(),
    5207918600154661847: DonationAlertModelServer_confirmWithEmail(),
    6874610597349462917: DonationAlertModelServer_validateEmail(),
    5409893094384821200: DonationProfileCC(),
    1407571171344351015: DroneExplosionCC(),
    4700246848265296979: DroneExplosionModelBase_addExplosionEffect(),
    8316165996190533130: DroneIndicatorCC(),
    7194412814882163035: DroneIndicatorModelBase_notReady(),
    8274817676081330504: DroneIndicatorModelBase_ready(),
    1735069073412814628: DroneIndicatorModelBase_reload(),
    5360168034082400276: DroneIndicatorModelBase_setBatteriesAmount(),
    2693325182624386579: DroneModelBase(),
    10986898808077888: DroneSFXCC(),
    4414220265916449690: DroppableGoldItemCC(),
    6471895382440866771: DroppableGoldItemModelServer_setShowGoldAuthor(),
    8659306545527654916: DurationCC(),
    5779075235189237790: EffectDescriptionCC(),
    5876619771294292986: EffectDescriptionModelBase_activated(),
    2730409051248405081: EffectDescriptionModelBase_deactivated(),
    642932327836248483: EffectDescriptionModelBase_merged(),
    3157947224668485277: EffectLevelCC(),
    1223644484523767160: EmailConfirmModelBase(),
    7275218816784644373: EmailConfirmModelBase_confirmEmailStatus(),
    4579682527325718817: EmailConfirmModelServer_confirmEmail(),
    2899012334549785581: EmailRegistrationModelBase(),
    4435409247351191753: EmailRegistrationModelBase_emailDomainIsForbidden(),
    3086716454112291095: EmailRegistrationModelBase_emailIsBusy(),
    3086716454112406922: EmailRegistrationModelBase_emailIsFree(),
    649322976836510183: EmailRegistrationModelBase_emailIsInvalid(),
    358567823731064492: EmailRegistrationModelBase_emailWithPasswordSuccessfullySent(),
    8385218101231994396: EmailRegistrationModelServer_checkEmail(),
    491783570223521887: EmailRegistrationModelServer_registerUserRequiredEmail(),
    6744857484209767976: EmailRequiredCC(),
    11228392912320539: EmissionColorCC(),
    3966050316678844327: EngineCC(),
    7840560143954508415: EntranceAlertModelBase(),
    7216954482225034551: EntranceAlertModelBase_showAlert(),
    2951079444907754024: EntranceModelCC(),
    5914397647293725298: EntranceObjectDetachModelBase(),
    25167034037176185: EntranceObjectDetachModelBase_objectDetach(),
    4831631290708483464: EquipmentConstraintsCC(),
    6254270636708584876: ErrorsDescriptionModelBase(),
    4894035829359257854: ErrorsDescriptionModelBase_showError(),
    6841476710481576918: EventOneTimePurchaseModelBase(),
    4593246568620992239: ExternalAuthApiModelBase(),
    4471909274534591941: ExternalAuthApiModelServer_authorize(),
    466296741210741928: ExternalEntranceCC(),
    1892188241679946781: ExternalEntranceModelBase_linkAlreadyExists(),
    4269970962008007272: ExternalEntranceModelBase_request2FaCode(),
    7316727561752705683: ExternalEntranceModelBase_validationFailed(),
    5457625541923578989: ExternalEntranceModelBase_validationSuccess(),
    4038740694554744010: ExternalEntranceModelBase_wrong2FaCode(),
    3926246134868871157: ExternalEntranceModelBase_wrongPassword(),
    2514902517359425284: ExternalEntranceModelServer_createLinkForExistingUser(),
    7426911423170140521: ExternalEntranceModelServer_login2FA(),
    2591755794327958333: ExternalEntranceModelServer_registerNewUser(),
    3559444790692169462: ExternalEntranceModelServer_setLoginData(),
    5638088222535192685: FacebookInternalLoginModelBase(),
    3000206000964343740: FacebookPaymentModelBase(),
    45497331805402934: FacebookPaymentModelBase_receivePaymentTransaction(),
    3180887711435997323: FacebookPaymentModelServer_getPaymentTransaction(),
    2464705242400585109: FacilitySphericalZoneCC(),
    3388415382679014725: FakePartnerLoginModelBase(),
    8735777377604216116: FirebasePushNotificationPanelUserProfileModelBase(),
    5466524963488370967: FirebasePushNotificationPanelUserProfileModelServer_storeToken(),
    1477291798294110932: FirstPurchaseBonusCC(),
    5313204844115729083: FirstPurchaseBonusModelBase_rewardGiven(),
    4444006910106229297: FlameThrowerCC(),
    2564327160259532396: FlameThrowerModelBase_startFire(),
    512336029863754236: FlameThrowerModelBase_stopFire(),
    170458228064350823: FlameThrowerModelServer_dryShot(),
    5266354064044052124: FlameThrowerModelServer_hitCommand(),
    155785566110858593: FlameThrowerModelServer_startFireCommand(),
    3198935067667993895: FlameThrowerModelServer_stopFireCommand(),
    1090112775751802907: FlameThrowingSFXCC(),
    9211262430629798056: FlashDeathModelBase(),
    2151754942457452134: FlashDeathModelBase_goToLink(),
    1800851391201859358: FlashDeathModelBase_showDialog(),
    707041713659049649: FlashDeathModelServer_requestHtmlLink(),
    4421481192894899056: ForeignClanCC(),
    8901564444462545914: ForeignClanModelBase_alreadyInClanOutgoing(),
    7825106856388969410: ForeignClanModelBase_alreadyInIncoming(),
    5454291148903918511: ForeignClanModelBase_clanBlocked(),
    8750217381325023396: ForeignClanModelBase_onJoinClan(),
    5169318596431801896: ForeignClanModelBase_showForeignClan(),
    3278251660558768913: ForeignClanModelBase_userSmallRankForAddClan(),
    2565286586354635962: ForeignClanModelServer_acceptRequest(),
    2434646898731381181: ForeignClanModelServer_rejectRequest(),
    2424540552626916996: ForeignClanModelServer_revokeRequest(),
    8233100375334134522: ForeignClanModelServer_sendRequest(),
    5914318137129427559: FpsStatisticsModelBase(),
    5758696633002275415: FpsStatisticsModelServer_collectStatistics(),
    9105939015977236209: FreezeCC(),
    6913197136739750316: FreezeModelBase_startFire(),
    7958737744601211588: FreezeModelBase_stopFire(),
    7292012713347236441: FreezeModelServer_dryShot(),
    7492629254745605284: FreezeModelServer_hitCommand(),
    1849372815459902943: FreezeModelServer_startFireCommand(),
    2686945008316675609: FreezeModelServer_stopFireCommand(),
    844040023906032853: FreezeSFXCC(),
    7286757952195114814: FriendsAcceptedModelBase(),
    6299129055881302643: FriendsAcceptedModelBase_onAdding(),
    7641184063359995954: FriendsAcceptedModelBase_onRemoved(),
    433350986715773690: FriendsAcceptedNotificatorModelBase(),
    874580289058840111: FriendsAcceptedNotificatorModelBase_onAdding(),
    8665244902239181714: FriendsAcceptedNotificatorModelBase_onRemoved(),
    7760048455878703717: FriendsAcceptedNotificatorModelServer_remove(),
    6666386288157781248: FriendsIncomingModelBase(),
    6157413826083170869: FriendsIncomingModelBase_onAdding(),
    6412387886607470668: FriendsIncomingModelBase_onRemoved(),
    6165842138816273510: FriendsIncomingNotificatorModelBase(),
    7420694962019911375: FriendsIncomingNotificatorModelBase_onAdding(),
    8680614953227323122: FriendsIncomingNotificatorModelBase_onRemoved(),
    3645428948649978309: FriendsIncomingNotificatorModelServer_remove(),
    6493584756469019867: FriendsLoaderModelBase(),
    4482129095669631774: FriendsLoaderModelBase_onUsersLoaded(),
    7229870808131465781: FriendsLoaderModelServer_show(),
    7272122855372520854: FriendsCC(),
    2612223562574608892: FriendsModelBase_acceptSuccess(),
    1590697140490653416: FriendsModelBase_acceptedLimitExceeded(),
    1338663800868114384: FriendsModelBase_alreadyInAcceptedFriends(),
    1498719636425541007: FriendsModelBase_alreadyInIncomingFriends(),
    1909871666630534251: FriendsModelBase_alreadyInOutgoingFriends(),
    2934412551480614122: FriendsModelBase_friendRequestSent(),
    3909719079251247927: FriendsModelBase_incomingLimitExceeded(),
    3291064285896039435: FriendsModelBase_yourAcceptedLimitExceeded(),
    2642693535200855439: FriendsModelServer_accept(),
    5615042058136128890: FriendsModelServer_add(),
    6022194843011994849: FriendsModelServer_addByUid(),
    4948433444982491020: FriendsModelServer_breakItOff(),
    2642693535689606182: FriendsModelServer_reject(),
    2220584863308463205: FriendsModelServer_rejectAll(),
    4973822383205755163: GPUDetectorModelBase(),
    3250762871408753730: GPUDetectorModelServer_detectionGPUcompleted(),
    5219530271535770658: GarageKitCC(),
    7381961590546665610: GarageModelCC(),
    3996477900528000389: GarageModelBase_initDepot(),
    5236393599344825589: GarageModelBase_initMarket(),
    3692495084100053385: GarageModelBase_initMounted(),
    4008258395901188095: GarageModelBase_reloadGarage(),
    5056382137818666244: GarageModelBase_removeDepotItem(),
    7185392055235128859: GarageModelBase_select(),
    1936068342294351641: GarageModelBase_selectFirstItemInDepot(),
    4036211072904074490: GarageModelBase_showCategory(),
    4091887481184252855: GarageModelBase_unmountDrone(),
    8615808087035604385: GarageModelBase_updateDepotItem(),
    5304675338465343952: GarageModelBase_updateMountedItems(),
    6828807833188447228: GarageModelBase_updateTemporaryItem(),
    1079642233486876258: GarageModelServer_itemMounted(),
    4518511464607698075: GarageModelServer_itemUnmounted(),
    2185839955975110192: GarageModelServer_readyToReload(),
    5078158170741782879: GarageNotifierModelBase(),
    8992960192854306015: GarageNotifierModelBase_notifyDiscountsInGarage(),
    3730185794267514852: GaragePreviewModelCC(),
    8836555743203700004: GaragePreviewModelBase_initMountedItemsProperties(),
    6954866325945494374: GaragePreviewModelBase_setHasBatteries(),
    1782954502314814229: GaussCC(),
    695245401803053060: GaussModelBase_aimingFailed(),
    69377216150006552: GaussModelBase_dummyShot(),
    7105718786066499086: GaussModelBase_primaryShot(),
    8874740556506734737: GaussModelBase_secondaryHitTargetCommand(),
    7103213692080723627: GaussModelBase_startAiming(),
    2151089498196543113: GaussModelBase_stopAiming(),
    7943424066851175269: GaussModelServer_dummyShotCommand(),
    3961605319254412646: GaussModelServer_primaryHitStaticCommand(),
    3643116574556679657: GaussModelServer_primaryHitTargetCommand(),
    2979288369918481791: GaussModelServer_primaryShotCommand(),
    552571658123179529: GaussModelServer_secondaryHitTargetCommand(),
    6571238030461382861: GaussModelServer_startAiming(),
    2592200844084998161: GaussModelServer_stopAiming(),
    3075844226211230705: GaussSFXCC(),
    5194655544597440038: GlobeLightningCC(),
    8625902891810495866: GlobeLightningModelBase_explode(),
    2582398071874032388: GlobeLightningModelBase_shoot(),
    2847159272345109402: GoToUrlPaymentModelBase(),
    6325461417720690169: GoToUrlPaymentModelBase_receiveUrl(),
    8531767675565589148: GoToUrlPaymentModelServer_getPaymentUrl(),
    3339617300033754420: GoldBonusCC(),
    258885409970069058: GoldBonusesModelBase_hideDropZone(),
    5801225415498662771: GoldBonusesModelBase_notificationBonus(),
    7891521962260218818: GoldBonusesModelBase_notificationBonusContainsUid(),
    806128205466208462: GoldBoxPackageCC(),
    5443730253864521714: GoogleEntranceModelBase(),
    3515105140865425030: GoogleEntranceModelServer_login(),
    568842221895257351: GoogleExternalLoginModelBase(),
    5427664491088584235: GpuReportModelBase(),
    3374349494609106254: GpuReportModelServer_logGpuReport(),
    1903546604199321676: GroupInviteWindowModelBase(),
    5278663298164192098: GroupInviteWindowModelBase_show(),
    7703595945685507318: GroupInviteWindowModelServer_prepareToShow(),
    1865478986390468300: GroupedCC(),
    2420459728740799795: HasBatteriesNotifyCC(),
    6524362605196737425: HasBatteriesNotifyModelBase_setHasBatteries(),
    6668012086939621459: HopperUltimateCC(),
    8452151303656506419: HopperUltimateModelBase_showUltimateUsed(),
    7214131179703676563: HornetUltimateCC(),
    8100670886177672915: HornetUltimateModelBase_showUltimateRadarIsTurnedOff(),
    3309025598583214085: HornetUltimateModelBase_showUltimateRadarIsTurnedOn(),
    3719295044981767592: HoverChassisCC(),
    855141293721335664: HoverChassisModelBase_control(),
    2192980683902767651: HoverChassisModelServer_controlCommand(),
    9175894397021160571: HullCommonCC(),
    6641568549549264883: HullSmokeCC(),
    4406836274649365203: HunterUltimateCC(),
    5434548773925962492: HunterUltimateModelBase_cancel(),
    5434548773962141259: HunterUltimateModelBase_dispel(),
    8998590223518712271: HunterUltimateModelBase_startCharging(),
    7445821415227381653: HunterUltimateModelBase_stopCharging(),
    8075411181503512615: IdNetLoginModelBase(),
    5905857376644601655: IfengModelBase(),
    7935550480449821024: IndemnityCC(),
    728283080869894733: InventoryCooldownModelBase(),
    1936461556433916768: InventoryCooldownModelBase_activateCooldown(),
    4074349979291561461: InventoryCooldownModelBase_activateDependentCooldown(),
    914712138243284367: InventoryCooldownModelBase_configureCooldown(),
    4356969817638185921: InventoryCooldownModelBase_ready(),
    4595308740474789951: InventoryCooldownModelBase_setCooldownDuration(),
    4985274885530276227: InventoryItemCC(),
    7051228255598370612: InventoryItemModelBase_updateCount(),
    9080569286947699251: InventoryItemModelServer_activate(),
    6445399806655453890: InventoryCC(),
    2173939047300893281: InventorySfxCC(),
    9117714962311439886: InviteEntranceCC(),
    3119382294408125449: InviteEntranceModelBase_inviteAlreadyActivated(),
    4369879803010801180: InviteEntranceModelBase_inviteFree(),
    7777574822513948703: InviteEntranceModelBase_inviteNotFound(),
    4331474631538870507: InviteEntranceModelServer_activateInvite(),
    7068168268219022867: IsisCC(),
    1663635222489302521: IsisModelBase_addEnergy(),
    8679688798445210739: IsisModelBase_reconfigureWeapon(),
    6127259399604255678: IsisModelBase_resetTarget(),
    1663619828320147439: IsisModelBase_setTarget(),
    3768030223558212864: IsisModelBase_stopWeapon(),
    1354967048436810550: IsisModelServer_resetTarget(),
    3111059653472267657: IsisModelServer_setTarget(),
    9158089826830690211: IsisModelServer_stopWeaponCommand(),
    1356698539614734948: IsisModelServer_tickCommand(),
    5745114335268581493: IsisSFXCC(),
    7472019549033825785: Item3DCC(),
    2114179554921095892: ItemCategoryCC(),
    7391892068905080676: ItemDevicesCC(),
    3992138268563757275: ItemDevicesGarageModelServer_buyDevice(),
    3804107380183105968: ItemDevicesGarageModelServer_insertDevice(),
    4025257005583233851: ItemDevicesGarageModelServer_removeDevice(),
    213661725715747381: ItemEnabledForPartnerCC(),
    3790673703028559688: ItemFittingModelBase(),
    4428603232159847900: ItemFittingModelServer_fit(),
    3438505192580052999: ItemModelCC(),
    4245000165576407500: ItemPropertiesCC(),
    658797348514407988: ItemRarityCC(),
    6117306895090150422: ItemViewCategoryCC(),
    7874327015886119466: JuggernautCC(),
    4098651217391725572: JuggernautModelBase_bossChanged(),
    7008460570137472565: JuggernautModelBase_bossKilled(),
    887431150717814637: JuggernautUltimateCC(),
    4156122388939760755: JuggernautUltimateModelBase_showUltimateUsed(),
    5123834867188931684: KillStreakCC(),
    4152502158136824099: KillStreakModelBase_killStreakAchived(),
    889485403566576664: KitBundleViewCC(),
    2785109555031989988: KitOfferModelBase(),
    4317471464660666766: KitOfferModelBase_showOffer(),
    9092145160177005633: KitOfferModelServer_logAction(),
    2103303438297476110: KitPackageCC(),
    5569155875491715186: KitPackageViewModelBase(),
    244437888121634761: KitViewButtonWithPriceModelBase(),
    4440355418204561498: KitViewResourceLocalizedCC(),
    3985896237583754666: KitViewResourceCC(),
    5043040354085822991: KongregateLoginModelBase(),
    5222549327263403316: KongregatePaymentModelBase(),
    3805270510146330030: KongregatePaymentModelBase_receivePaymentTransaction(),
    5471423191488421117: KongregatePaymentModelServer_getPaymentTransaction(),
    6317133098926395929: KuaiwanModelBase(),
    7266201540452328992: LaserPointerCC(),
    8964402760194876659: LaserPointerModelBase_aimRemoteAtTank(),
    4538073797885146589: LaserPointerModelBase_hideRemote(),
    7474691314934075141: LaserPointerModelBase_updateRemoteDirection(),
    1624555868970627451: LaserPointerModelServer_aimAtTank(),
    8285800812700182079: LaserPointerModelServer_hide(),
    3608950371274975129: LaserPointerModelServer_updateDirection(),
    522999963549162435: LatencyModelBase(),
    1440680636919679990: LatencyModelBase_ping(),
    1427743525994120680: LatencyModelServer_pong(),
    4092879158789522838: LeogamingPaymentMobileModelBase(),
    2191976827314248489: LeogamingPaymentMobileModelBase_error(),
    3560906655863316879: LeogamingPaymentMobileModelBase_proceed(),
    5438541768033464245: LeogamingPaymentMobileModelServer_confirmOrder(),
    7560223039874521205: LeogamingPaymentMobileModelServer_createOrder(),
    1472449384337994019: LicenseClanShopItemModelBase(),
    8495889215182031654: LicenseClanUserCC(),
    3188647720349732839: LicenseClanUserModelBase_addClanLicense(),
    2240897788941501720: LicenseClanUserModelBase_removeClanLicense(),
    2795796318435010995: LinkActivatorModelBase(),
    60831787661086997: LinkActivatorModelBase_alive(),
    8658974375041748759: LinkActivatorModelBase_battleNotFound(),
    4163431507364784774: LinkActivatorModelBase_dead(),
    3078681601364500661: LinkActivatorModelServer_activateBattle(),
    5091269678647701543: LinkActivatorModelServer_isAlive(),
    5255782026414758079: LobbyLayoutModelBase(),
    5959324075159807966: LobbyLayoutModelServer_exitFromBattle(),
    317093744711721659: LobbyLayoutModelServer_exitFromBattleToBattleLobby(),
    4891344138206681215: LobbyLayoutModelServer_returnToBattle(),
    4349186924909218012: LobbyLayoutModelServer_setBattleLobbyLayout(),
    4837515384098060529: LobbyLayoutModelServer_showBattleSelect(),
    8557174978097640303: LobbyLayoutModelServer_showClan(),
    3802702922732544674: LobbyLayoutModelServer_showGarage(),
    7882764828972695915: LobbyLayoutModelServer_showMatchmaking(),
    6363628754704336051: LobbyLayoutNotifyModelBase(),
    7772769798498565531: LobbyLayoutNotifyModelBase_beginLayoutSwitch(),
    2265286421664457062: LobbyLayoutNotifyModelBase_cancelPredictedLayoutSwitch(),
    9114987333090113769: LobbyLayoutNotifyModelBase_endLayoutSwitch(),
    7138983621201379368: LoginByHashModelBase(),
    8701688322991734706: LoginByHashModelBase_loginByHashFailed(),
    5785879225652927897: LoginByHashModelBase_loginBySingleUseHashFailed(),
    7889047569932192655: LoginByHashModelBase_remember2FaHash(),
    7889047555786364093: LoginByHashModelBase_rememberAccount(),
    237130683810296524: LoginByHashModelBase_rememberUsersHash(),
    7981625407112679465: LoginByHashModelServer_loginByHash(),
    419695105362367982: LoginByHashModelServer_loginByHashUsSpecial(),
    8443757983603200274: LoginByHashModelServer_loginBySingleUseHash(),
    2295124879727506713: LoginByHashModelServer_loginBySingleUseHashForFlashMigrant(),
    7384979261462408242: LoginModelBase(),
    3377380964115009138: LoginModelBase_request2FaCode(),
    6941935892500153516: LoginModelBase_wrong2FaCode(),
    6160917066910786241: LoginModelBase_wrongPassword(),
    108605496059850042: LoginModelServer_login(),
    7286120219821118707: LoginModelServer_login2FA(),
    2974170088669187048: LoginWithoutRegistrationModelBase(),
    3622234764826778179: LoginWithoutRegistrationModelServer_loginWithoutRegistration(),
    8504393824949111382: LootBoxModelBase(),
    3910065122460823613: LootBoxModelBase_openSuccessful(),
    1922181449107937561: LootBoxModelBase_updateCount(),
    759460263762902993: LootBoxModelServer_open(),
    8755539534673619516: LootBoxPackageCC(),
    5004566952388327414: LootboxAndPaintCC(),
    7022952987062772048: MachineGunCC(),
    3264529939218152741: MachineGunModelBase_fire(),
    3423457305918530189: MachineGunModelBase_fireDummy(),
    1968684612692387446: MachineGunModelBase_reconfigureWeapon(),
    3504312496907450914: MachineGunModelBase_setSpunState(),
    3423468681468313651: MachineGunModelBase_startFire(),
    110434473993376637: MachineGunModelBase_stopFire(),
    1649733515180580712: MachineGunModelServer_fireCommand(),
    1731067144312672378: MachineGunModelServer_fireDummyCommand(),
    756937246961756969: MachineGunModelServer_hitStaticCommand(),
    438448502264023980: MachineGunModelServer_hitTargetCommand(),
    8198148163260728747: MachineGunModelServer_startFire(),
    5686106211661562107: MachineGunModelServer_stopFire(),
    8784137528831277530: MachineGunSFXCC(),
    2374257493686035029: MailruGamesLoginModelBase(),
    2525951860593581109: MailruGamesPaymentModelBase(),
    1797346564345873765: MailruGamesPaymentModelBase_receivePaymentTransaction(),
    5935474169219006010: MailruGamesPaymentModelServer_getPaymentTransaction(),
    1997576349992148053: MammothUltimateCC(),
    8201829668071386439: MammothUltimateModelBase_activateField(),
    7938704650169182732: MammothUltimateModelBase_damageByField(),
    3903010729664928358: MammothUltimateModelBase_deactivateField(),
    1688856467034284073: MapBonusLightCC(),
    5412538083071671358: MapInfoCC(),
    1940574184808090627: MatchmakingContinueBattleModelBase(),
    5381259246182927007: MatchmakingContinueBattleModelServer_continueBattle(),
    7630832761925987366: MatchmakingGroupInfoCC(),
    6675582676627481252: MatchmakingGroupInviteModelBase(),
    4819106177481987296: MatchmakingGroupInviteModelBase_accepted(),
    2105112637064188913: MatchmakingGroupInviteModelBase_rejectInvitationToGroupDisabled(),
    2032002041890761467: MatchmakingGroupInviteModelBase_rejectUserAlreadyInGroup(),
    1609791698764183776: MatchmakingGroupInviteModelBase_rejectUserOffline(),
    4819105707792523273: MatchmakingGroupInviteModelBase_rejected(),
    1027796139481680406: MatchmakingGroupInviteModelBase_sendInvite(),
    1853801329801512887: MatchmakingGroupInviteModelServer_accept(),
    1853801329312762144: MatchmakingGroupInviteModelServer_reject(),
    586684793593225358: MatchmakingGroupInviteModelServer_sendInvite(),
    1777275958066775110: MatchmakingGroupLifecycleModelBase(),
    2082889506762397856: MatchmakingGroupLifecycleModelServer_createGroup(),
    4827413290479842837: MatchmakingGroupLifecycleModelServer_leaveGroup(),
    4827254328294494638: MatchmakingGroupLifecycleModelServer_removeUser(),
    104562115846147942: MatchmakingGroupCC(),
    1965570026066462607: MatchmakingGroupNotifyModelBase_addUser(),
    6330505994629167126: MatchmakingGroupNotifyModelBase_removeUser(),
    3422925135801547845: MatchmakingGroupNotifyModelBase_userMountedItem(),
    3896773663152684598: MatchmakingGroupNotifyModelBase_userNotReady(),
    7344882059299080259: MatchmakingGroupNotifyModelBase_userReady(),
    5932347630672640435: MatchmakingLayoutCC(),
    2940206844144431089: MatchmakingLayoutModelBase_hideMatchmakingView(),
    3182939728106937130: MatchmakingLayoutModelBase_showMatchmakingView(),
    7164185146287630122: MatchmakingNotifyModelBase(),
    5550250572696857863: MatchmakingNotifyModelBase_registrationCancelled(),
    3998411033492045559: MatchmakingNotifyModelBase_registrationTimeout(),
    7327528217276507107: MatchmakingNotifyModelBase_userRegistrationSuccessful(),
    3163202902638184096: MatchmakingQueueModelBase(),
    1647333317239099808: MatchmakingQueueModelServer_register(),
    3332585178625250311: MatchmakingQueueModelServer_unregister(),
    9207859197453853002: MatchmakingSpectatorEntranceModelBase(),
    245987130908991811: MatchmakingSpectatorEntranceModelBase_enterFailedNoSuitableBattles(),
    1389350490037720721: MatchmakingSpectatorEntranceModelServer_enter(),
    1772869797558659219: MediumTimeOfferCC(),
    9183266755918367296: MemoryStatisticsModelBase(),
    5066802527695925997: MemoryStatisticsModelServer_collect(),
    9172358609541951983: MeteorStormCC(),
    7512444357462458245: MeteorStormModelBase_meteorNotification(),
    2896391367845925315: MeteorStormModelBase_spawnMeteor(),
    2404946944681207165: MigrationInModelBase(),
    3727106644143374387: MigrationInModelBase_requestForPassword(),
    8726842458026736340: MigrationInModelBase_requestForUidAndPassword(),
    2301046581709976784: MigrationInModelBase_useCommonEntrance(),
    620066356642046539: MigrationInModelServer_completeMigration(),
    1544049288733380043: MigrationInModelServer_completeMigrationWithUid(),
    5956603416792598618: MigrationInModelServer_validateMigrationHash(),
    766378817905541412: MigrationOutModelBase(),
    7482185267318966424: MigrationOutModelBase_navigateUserTo(),
    6664314588124044154: MigrationOutModelBase_showError(),
    3963128011996558084: MigrationOutModelBase_showMigrationAlert(),
    9142728454658294596: MigrationOutModelServer_confirmMigrate(),
    3520739814461270607: MiniclipLoginModelBase(),
    5992984110445106737: MiniplayLoginModelBase(),
    3964217358494692724: MiniplayPaymentModelBase(),
    8475203556724821258: MiniplayPaymentModelBase_receivePaymentData(),
    7279845203540783787: MiniplayPaymentModelServer_getPaymentData(),
    9179226203366355524: MobileQuestCC(),
    5326703067189736692: MobileQuestProfileCC(),
    196457167036662046: MobileQuestProfileModelBase_changeProgress(),
    2494628067134376039: ModificationCC(),
    905970599512839002: MountShotSkinModelBase(),
    7161152658531973997: MountShotSkinModelServer_mountSkin(),
    834829861153964627: MountSkinItemModelBase(),
    5640089407206964628: MountSkinItemModelServer_mountSkin(),
    5724298620794499870: MountedResistancesCC(),
    6593773928575706308: MountedResistancesModelServer_buyResistance(),
    9080886862071747198: MountedResistancesModelServer_mount(),
    1422327593395189317: MountedResistancesModelServer_unmount(),
    6847548337746045159: MoveUserToServerModelBase(),
    6804704577056023949: MoveUserToServerModelBase_move(),
    4346538757972811623: NewPresentsShowingModelBase(),
    6808900680442431069: NewPresentsShowingModelBase_showAlert(),
    3929446428733973255: NewPresentsShowingModelServer_showPresents(),
    4982009282439645731: NewReferralsNotifierModelBase(),
    8982072111657657885: NewReferralsNotifierModelBase_notifyNewReferralsCountUpdated(),
    6985046228947204446: NewReferralsNotifierModelBase_notifyReferralAdded(),
    3606689714478988714: NewReferralsNotifierModelServer_requestNewReferralsCount(),
    1795256207268973290: NewReferralsNotifierModelServer_resetNewReferralsCount(),
    1165875846651374651: NewbieKitViewModelBase(),
    7489104450652593169: NewbieRegistrationModelBase(),
    8137349287692086060: NewbieRegistrationModelServer_markUserAsNewbie(),
    868364325972433765: NewsShowingCC(),
    1565008115349134490: NewsShowingModelBase_removeNewsItem(),
    314983404410424222: NewsShowingModelBase_sendNewsItem(),
    5111180848188020047: NotificationEnabledCC(),
    9000461257959773231: NotificationEnabledModelServer_enable(),
    798527323667603896: NotificationTokenModelBase(),
    8412305763105043715: NotificationTokenModelServer_storeToken(),
    4388979890807820236: NuclearRechargeCC(),
    9119326381010148347: NuclearRechargeModelBase_onFailed(),
    8652232813462564395: NuclearRechargeModelBase_onRecharged(),
    3530877082431251256: NuclearRechargeModelServer_recharge(),
    6430862429652735997: Object3DSCC(),
    6221006752764862616: OdnoklassnikiInternalLoginModelBase(),
    5471205424581776342: OdnoklassnikiPaymentModelBase(),
    3440301667978659856: OdnoklassnikiPaymentModelBase_receivePaymentTransaction(),
    4367148856118005349: OdnoklassnikiPaymentModelServer_getPaymentTransaction(),
    520719205006053564: OnceADayActionCC(),
    2009560714711279199: OnlineNotifierModelBase(),
    7795510382230390111: OnlineNotifierModelBase_setOnline(),
    4165038254183547572: OnlyUrlPaymentModelBase(),
    3001767731778492629: OnlyUrlPaymentModelBase_receiveUrl(),
    5737365954965219058: OnlyUrlPaymentModelServer_getPaymentUrl(),
    7881181052304665842: PaintPackageCC(),
    4658911146867546991: PaladinAuraVisualCC(),
    8395271889925905765: PaladinAuraVisualModelBase_coverTank(),
    6615036895587998551: PaladinAuraVisualModelBase_turnAuraOff(),
    1998557068281182363: PaladinAuraVisualModelBase_turnAuraOn(),
    6614415063929831006: PaladinAuraVisualModelBase_uncoverTank(),
    2015247920571018032: PanelModelBase(),
    6274063906827093821: Partner2144ModelBase(),
    2581985660978331407: Partner360PlatformModelBase(),
    65368515560656253: Partner4399ModelBase(),
    7877155698900791211: Partner7k7kModelBase(),
    9168562037264832365: PassToShopCC(),
    9208992626215411416: PasswordChangeModelBase(),
    4185038917436903502: PasswordChangeModelBase_emailNotFound(),
    8759580599432069566: PasswordChangeModelBase_emailWithRestoreLinkSuccessfullySent(),
    1040166572007354607: PasswordChangeModelBase_passwordRecoveryHashCorrect(),
    9118879918420267890: PasswordChangeModelBase_passwordRecoveryHashWrong(),
    3447514655508557299: PasswordChangeModelBase_setPasswordChangeResult(),
    4711371989925305429: PasswordChangeModelServer_changePasswordAndEmail(),
    8102038578725099300: PasswordChangeModelServer_checkPasswordChangeHash(),
    1816991891280269368: PasswordChangeModelServer_resetChangePasswordHashAndEntranceHash(),
    6526021023155299224: PasswordChangeModelServer_sendUsersRestorePasswordLink(),
    8083057704493864984: PayGardenPaymentCC(),
    3649639865850681609: PayGardenPaymentModelBase_receiveUrl(),
    272920910574306214: PayGardenPaymentModelServer_getPaymentUrl(),
    477448272436013846: PayPalPaymentModelBase(),
    442121090184393813: PayPalPaymentModelBase_receiveErrorUrl(),
    602977444722394643: PayPalPaymentModelBase_receivePaymentUrl(),
    4771484385096522600: PayPalPaymentModelServer_getPaymentUrl(),
    3158124838791669092: PaymentButtonCC(),
    1009501302658881534: PaymentLoaderCC(),
    3470401807971059073: PaymentLoaderModelServer_loadPayment(),
    7186023073392768991: PaymentLoaderModelServer_loadPaymentWithGarageItem(),
    4061939691705167408: PaymentLoaderModelServer_loadPaymentWithShopItem(),
    7185699897759061141: PaymentLoaderModelServer_loadPaymentWithShopItemId(),
    4748522118519647527: PayModeCC(),
    1417398836682569292: PaymentCC(),
    713069413965885764: PaymentModelBase_removeItemsFromStore(),
    6560993437158032601: PerformanceCollectorModelBase(),
    1364305615480649510: PerformanceCollectorModelServer_collect(),
    777963614732509473: PerformanceCC(),
    7464842701391270566: PlatBoxPaymentModelBase(),
    3899810429740434845: PlatBoxPaymentModelBase_paymentError(),
    8233085193902822214: PlatBoxPaymentModelBase_paymentInited(),
    8289118782319462106: PlatBoxPaymentModelBase_phoneIsInvalid(),
    3905284251567653279: PlatBoxPaymentModelBase_phoneIsValid(),
    5847091954520219506: PlatBoxPaymentModelServer_checkNumber(),
    5842011691201729293: PlatBoxPaymentModelServer_initPayment(),
    3031864034871022835: PointBasedBattleCC(),
    3893341111580011837: PointBasedBattleModelBase_dropFlag(),
    8524352143491228494: PointBasedBattleModelBase_dropFlyingFlag(),
    8433635069541185363: PointBasedBattleModelBase_exileFlag(),
    53931578606487632: PointBasedBattleModelBase_flagDelivered(),
    8433635585022781939: PointBasedBattleModelBase_flagTaken(),
    2361916365615485840: PointBasedBattleModelBase_returnFlagToBase(),
    2047288050054426969: PointBasedBattleModelBase_throwFlyingFlag(),
    1827296668015611855: PointBasedBattleModelServer_ballTouched(),
    3664127728912474496: PointBasedBattleModelServer_dropFlagCommand(),
    3631235882365225014: PossibleRewardsModelBase(),
    3466525049073170832: PossibleRewardsModelBase_setPossibleRewards(),
    762226337902412196: PossibleRewardsModelServer_getPossibleRewards(),
    1233136515763279444: PremiumAccountAlertCC(),
    717922965139335112: PremiumAccountAlertModelBase_showWelcomeAlert(),
    2408931733702617692: PremiumAccountAlertModelServer_confirmShowNotificationCompletionPremium(),
    4079867620344924085: PremiumAccountAlertModelServer_confirmShowReminderCompletionPremium(),
    7506920292869541778: PremiumAccountAlertModelServer_confirmShowWelcomeAlert(),
    2090270612349489589: PremiumInDepotModelBase(),
    1139677084511624062: PremiumItemCC(),
    1298753286651761171: PremiumNotifierCC(),
    4567332396287339500: PremiumNotifierModelBase_sendData(),
    5033809779759544417: PremiumNotifierModelBase_updateTimeLeft(),
    4685032941451085293: PremiumNotifierModelServer_premiumEnded(),
    5138794050233567698: PremiumPackageCC(),
    8123853093456340124: PresentGivenModelBase(),
    4525319842983061054: PresentGivenModelServer_removePresent(),
    1090462575616316602: PresentItemCC(),
    2433120830275396692: PresentsCC(),
    3815790909435719096: PresentPurchaseModelBase(),
    3259883917031500114: PresentPurchaseModelBase_setUidAvailable(),
    7073681579250662339: PresentPurchaseModelServer_checkUid(),
    727124728415212347: PresentPurchaseModelServer_purchasePresent(),
    7307951074626252633: PresentsSettingsCC(),
    7969445392385139569: PresentsSettingsModelServer_setReceivePresents(),
    6489269555201793534: PriceRangeCC(),
    4692610703461978415: ProAbonementRankDiscountCC(),
    7019981464353739346: ProAbonementNotifierCC(),
    8285569264978375868: ProBattleNotifierModelBase_setRemainingAbonementTimeSec(),
    8943480752487773242: ProductPurchaseModelBase(),
    3709470436188826328: ProductPurchaseModelBase_goodsPurchased(),
    187310473176435728: ProductPurchaseModelBase_hideItem(),
    2421972948929745979: ProductPurchaseModelBase_notEnoughCash(),
    511376542659915527: ProductPurchaseModelBase_purchaseFailed(),
    5980543527485052265: ProductPurchaseModelServer_buyForCoinById(),
    7718056566748184322: ProductPurchaseModelServer_buyForCrystalById(),
    929422061653698090: ProductPurchaseModelServer_buyForShardById(),
    5987813493265221974: QiwiPaymentCC(),
    652577138744854249: QiwiPaymentModelBase_error(),
    3826037929347450037: QiwiPaymentModelBase_receiveUrl(),
    648915762697512232: QiwiPaymentModelServer_getPaymentUrl(),
    7602924688416976500: QuantityRestrictionModelBase(),
    3796094558760359899: QuantityRestrictionModelBase_reservationAbort(),
    8949522390708145956: QuestNotifierCC(),
    7086524879375773859: QuestNotifierModelBase_completedDailyQuest(),
    3787778520913943436: QuestNotifierModelBase_completedWeeklyQuests(),
    5706064338171478973: QuestNotifierModelBase_hasMainQuestChanges(),
    295157905894224938: QuestNotifierModelBase_newInDailyQuests(),
    8663962443101165402: QuestNotifierModelBase_newInWeeklyQuests(),
    4894390741282824705: QuestNotifierModelServer_completedDailyQuestViewed(),
    1359226745494660147: QuestNotifierModelServer_completedWeeklyQuestViewed(),
    1945532098072718668: QuestNotifierModelServer_mainQuestViewed(),
    6866583636303904620: QuestNotifierModelServer_newDailyQuestViewed(),
    4438520779030162370: QuestNotifierModelServer_newWeeklyQuestViewed(),
    1663344340563853103: RailgunCC(),
    376004548045092294: RailgunModelBase_fire(),
    1244736124634194290: RailgunModelBase_fireDummy(),
    6177248960642588198: RailgunModelBase_immediateReload(),
    2359710046028200821: RailgunModelBase_reconfigureWeapon(),
    2141301983650645649: RailgunModelBase_startCharging(),
    1925343334566600919: RailgunModelServer_fireCommand(),
    7694243472391102363: RailgunModelServer_fireDummyCommand(),
    3209441135223108196: RailgunModelServer_startChargingCommand(),
    2368553937090306741: RailgunShootSFXCC(),
    2766593337098932447: RamblerLoginModelBase(),
    3107606450047808838: RamblerPaymentModelBase(),
    203810578658438540: RamblerPaymentModelBase_receivePaymentTransaction(),
    6942579405634087625: RamblerPaymentModelServer_getPaymentTransaction(),
    2831778065257484757: RandomGoldBonusTakeModelBase(),
    6374265883164580909: RandomGoldBonusTakeModelBase_showBonusNotification(),
    3527205014716342329: RankLoaderCC(),
    258682513334072065: RankNotifierData(),
    5543735653822042458: RankNotifierModelBase_setRank(),
    8828628609170410045: RankUpReferrerAwardModelBase(),
    6492191529573968679: ReconnectCC(),
    4504535536312151081: ReconnectModelBase_reconnectFast(),
    7527028540450286632: ReconnectModelBase_serverReadyToReconnect(),
    6849385989777486034: ReconnectModelBase_setSingleEntranceHash(),
    3513435779451085592: ReconnectModelServer_wantToReconnect(),
    8180405456677283364: ReferralNotifierData(),
    2039609684717744752: ReferralNotifierModelBase_setIsReferral(),
    8143937490587961620: ReferralsModelCC(),
    6958987134145295252: ReferralsModelBase_updateData(),
    2231598023728710670: ReferralsModelServer_updateReferralsData(),
    2474458842977623992: RegistrationModelCC(),
    7546805075905111829: RegistrationModelBase_anchorRegistration(),
    1247179769701109529: RegistrationModelBase_enteredUidIsBusy(),
    1247179769701225356: RegistrationModelBase_enteredUidIsFree(),
    4345588892358775163: RegistrationModelBase_enteredUidIsIncorrect(),
    761463638726320835: RegistrationModelBase_passwordIsIncorrect(),
    2851527043709977805: RegistrationModelBase_registrationFailed(),
    1968867162405923123: RegistrationModelServer_checkUid(),
    1968866752316155064: RegistrationModelServer_register(),
    3048017108161529684: RegistrationModelServer_setFormerUserId(),
    6417671822482579265: RegistrationUXLoggerModelBase(),
    4019794752111221538: RegistrationUXLoggerModelServer_initLogger(),
    4942637664036538272: RegistrationUXLoggerModelServer_logFormAction(),
    1099178484391926477: RegistrationUXLoggerModelServer_logNavigationFinish(),
    1820626151803307752: RegistrationUXLoggerModelServer_logNavigationStart(),
    8153652471440648359: RelativePropertiesCC(),
    3612882919978839327: RenameModelBase(),
    5508878354309971890: RenameModelBase_renameFail(),
    8868521478739168770: RenameModelBase_renameSuccessfull(),
    7163232624323099644: RenameModelServer_rename(),
    653227163505206158: RenameShopItemCC(),
    1814538874607499387: ResistanceModuleModelBase(),
    5801057999588514016: ResistancesCC(),
    8853923292505519798: RestrictionByPayModeCC(),
    2544465990449691855: RicochetCC(),
    6316377166391255195: RicochetModelBase_addEnergy(),
    8503594461052151846: RicochetModelBase_fire(),
    6316372751070128914: RicochetModelBase_fireDummy(),
    2662571655067474667: RicochetModelBase_reconfigureWeapon(),
    5827705880178147959: RicochetModelServer_fireCommand(),
    6154059604912619013: RicochetModelServer_fireDummyCommand(),
    7128189502263534422: RicochetModelServer_hitStaticCommand(),
    7446678246961267411: RicochetModelServer_hitTargetCommand(),
    5257069799854314780: RicochetSFXCC(),
    4045733714401632272: RocketLauncherCC(),
    4268769911641487101: RocketLauncherRadioExplosionModelBase(),
    814964226900844449: RocketLauncherRadioExplosionModelBase_shellDestroyed(),
    6596471917520283782: RocketLauncherSfxCC(),
    2803166101624878775: RotatingTurretCC(),
    6598381021390194005: RotatingTurretModelBase_update(),
    584200547137598173: RotatingTurretModelServer_update(),
    2618111250571302204: RugbyCC(),
    1456475022890566348: RulesUpdateShowingCC(),
    4425856615134828932: RulesUpdateShowingModelServer_userAcceptedRules(),
    2106725000453204792: SNGroupReminderModelBase(),
    1837132814951358587: SNGroupReminderModelBase_checkIsInGroup(),
    823534305887030869: SNGroupReminderModelBase_showCongratulationsWindow(),
    8859188899425504009: SNGroupReminderModelServer_giveBonus(),
    7480853897337546720: SNUidNotifierData(),
    4769228253150636424: SNUidNotifierModelBase_setSNUid(),
    8756621430867036257: ScoreCollectOnMapDailyQuestModelBase(),
    4065909569861626318: ServerHaltEntranceCC(),
    5749736363165481109: ServerHaltEntranceModelBase_serverHalt(),
    7175193612424807833: ServerHaltModelBase(),
    2652688716065651424: ServerHaltModelBase_haltServer(),
    6137464772801974220: SettingsModelBase(),
    3479002759167838619: SettingsModelBase_openAntiAddictionSettings(),
    3551451542640774318: SettingsModelBase_openSettings(),
    7698979133362054614: SettingsModelServer_setReceivePersonalMessages(),
    3279690199657104873: SettingsModelServer_showSettings(),
    6896599104430193688: SettingsModelServer_uploadClientSettings(),
    732152133982227177: ShaftCC(),
    3183698678686537900: ShaftModelBase_activateManualTargeting(),
    8254919680762272734: ShaftModelBase_fire(),
    5171281261583893411: ShaftModelBase_reconfigureWeapon(),
    1061006404063035827: ShaftModelBase_stopManulaTargeting(),
    7949846481892074873: ShaftModelServer_activateManualTargetingCommand(),
    2859239620496928991: ShaftModelServer_aimedShotCommand(),
    1652131745722741616: ShaftModelServer_beginEnergyDrainCommand(),
    4554294982104319432: ShaftModelServer_quickShotCommand(),
    3081553996924412502: ShaftModelServer_stopManualTargetingCommand(),
    9094843804380507187: ShaftShootSFXCC(),
    1240318892254773555: ShellWeaponCommunicationModelBase(),
    1168439784383392489: ShellWeaponCommunicationModelBase_shoot(),
    2637790242235689519: ShellWeaponCommunicationModelBase_shootDummy(),
    8433478043499666834: ShellWeaponCommunicationModelBase_shootWithTarget(),
    6084140936135221501: ShellWeaponCommunicationModelServer_tryToDummyShoot(),
    5780090124727748179: ShellWeaponCommunicationModelServer_tryToHit(),
    2196643676780835911: ShellWeaponCommunicationModelServer_tryToShoot(),
    8425098034993629552: ShellWeaponCommunicationModelServer_tryToShootWithTarget(),
    4402890659742465332: ShopAbonementCC(),
    8048067679617995470: ShopCategoryCC(),
    8458424802385151068: ShopDiscountCC(),
    7810820263988615290: ShopItemAdditionalDescriptionCC(),
    4268132139764766386: ShopItemCategoryCC(),
    6091707767266836975: ShopItemFeaturingCC(),
    8144960540559298261: ShopItemLoaderForAndroidModelBase(),
    5416547104995388366: ShopItemLoaderForAndroidModelBase_specialOfferLoaded(),
    693025797100292228: ShopItemCC(),
    7949842549440362353: ShopItemOneTimePurchaseModelBase(),
    7164701156177284927: ShopNotifierModelBase(),
    1031014680750515534: ShopNotifierModelBase_notifyDiscountsInShop(),
    3711064555338923546: ShopNotifierModelBase_notifyNewItemsInShop(),
    1895761040591908729: ShopPromoCodeModelBase(),
    545824411691976918: ShopPromoCodeModelBase_codeActivated(),
    7087196372278517243: ShopPromoCodeModelBase_codeActivationBlocked(),
    545831637002582130: ShopPromoCodeModelBase_codeIsInvalid(),
    704133540442549971: ShopPromoCodeModelServer_activatePromoCode(),
    6528115483341986769: ShotGunAimingCC(),
    770654516236272028: ShotgunSFXCC(),
    5867914731324680416: ShotgunShotCC(),
    128646616932243632: ShotgunShotModelBase_setRemainingShots(),
    2956409314091969451: SiegeModelBase(),
    7912514999422640843: SimpleArmorCC(),
    6899642532024252493: SingleItemKitViewCC(),
    2172139419072369403: SmokyCC(),
    772901659708598032: SmokyModelBase_fire(),
    3171490882125125496: SmokyModelBase_fireDummy(),
    682326792057158253: SmokyModelServer_fireCommand(),
    1160448646538751035: SmokyModelServer_fireDummyCommand(),
    2134578543889666444: SmokyModelServer_hitStaticCommand(),
    2453067288587399433: SmokyModelServer_hitTargetCommand(),
    1748249573394295263: SmokyShootSFXCC(),
    1888478867087153384: SocialNetworkPanelCC(),
    4142267541700896685: SocialNetworkPanelModelBase_linkAlreadyExists(),
    1955564997468107135: SocialNetworkPanelModelBase_linkCreated(),
    8962459353117481309: SocialNetworkPanelModelBase_unlinkSuccess(),
    8579423285863675139: SocialNetworkPanelModelBase_validationFailed(),
    6762491317618719533: SocialNetworkPanelModelServer_removeLink(),
    6359692933626160397: SocialNetworkParametersCC(),
    1063017971053917991: SpawnProtectionModelBase(),
    4703589152125219089: SpawnProtectionModelBase_activate(),
    6192892501890483066: SpecialKitPackageCC(),
    216902005816818019: SpectatorsModelCC(),
    8000208195328620000: SpectatorsModelBase_spectatorJoined(),
    8000208195376412452: SpectatorsModelBase_spectatorLeaved(),
    3943583499729295778: SpectatorsModelBase_tankPreparingToSpawn(),
    7163171834328288344: SpeedCharacteristicsCC(),
    9148695708149003246: SpeedCharacteristicsModelBase_setSpecification(),
    2235965200289058033: SplashCC(),
    8677996546985988365: StarsInfoCC(),
    4914158023711825639: StarsInfoModelBase_setStars(),
    1036461397335537760: StarsPackageCC(),
    2472262160204144219: StatisticsDMCC(),
    4145605269036784193: StatisticsDMModelBase_changeUserStat(),
    8633711911613390575: StatisticsDMModelBase_refreshUsersStat(),
    3546760210246855825: StatisticsDMModelBase_userConnect(),
    1416652194602611703: StatisticsDMModelBase_userDisconnect(),
    2085529474881905981: StatisticsModelCC(),
    8708619517129991571: StatisticsModelBase_fundChange(),
    3412731366525601521: StatisticsModelBase_onRankChanged(),
    7251316292223001978: StatisticsModelBase_resetBattleName(),
    6743639250009365289: StatisticsModelBase_roundFinish(),
    8708307156621030644: StatisticsModelBase_roundStart(),
    5636419478064741352: StatisticsModelBase_roundStop(),
    6361743146717496013: StatisticsModelBase_setBattleName(),
    3628916506766819105: StatisticsModelBase_statusProbablyCheaterChanged(),
    787936358514072261: StatisticsTeamCC(),
    5871526952594472533: StatisticsTeamModelBase_changeTeamScore(),
    6356214729562880865: StatisticsTeamModelBase_changeUserStat(),
    6792909073115695089: StatisticsTeamModelBase_refreshUsersStat(),
    5780844627196819808: StatisticsTeamModelBase_swapTeam(),
    1661920281800548495: StatisticsTeamModelBase_userConnect(),
    793957265923484969: StatisticsTeamModelBase_userDisconnect(),
    6141842138930446750: StatusEffectBattleCC(),
    8889030940127130747: StatusEffectCC(),
    6299890359477642632: StatusEffectUserModelBase_addEffect(),
    8872197650929809377: StatusEffectUserModelBase_removeAllEffects(),
    2426455325523984241: StatusEffectUserModelBase_removeEffect(),
    837282364443996203: SteamLoginModelBase(),
    7119025230667142680: SteamPaymentModelBase(),
    5135365119308181491: SteamPaymentModelServer_finalizePayment(),
    8997794533407296660: SteamPaymentModelServer_makePaymentRequest(),
    2057487026153364495: StreamWeaponCC(),
    1653780246012371883: StreamWeaponModelBase_reconfigureWeapon(),
    2271787261806799336: SuicideCC(),
    6374471164629053857: SuicideModelBase_suicide(),
    1804405396221295630: SuicideModelServer_suicideCommand(),
    3317051239895575278: TankConfigurationCC(),
    1838248562944554574: TankCritCC(),
    682529720221233539: TankCritModelBase_crit(),
    1520547229031318322: TankDeviceCC(),
    6424605984954645392: TankEffectSFXCC(),
    42520361057728933: TankEffectSFXModelBase_effectActivated(),
    8517963146836182364: TankExplosionCC(),
    5070782446071969512: TankJammingModelBase(),
    2337941071985398401: TankJammingModelBase_jammingOff(),
    5430923797915205261: TankJammingModelBase_jammingOn(),
    2150802556932617880: TankCC(),
    4862541063955121514: TankModelBase_activateTank(),
    6442558957060261112: TankModelBase_deathConfirmed(),
    3503849245765652149: TankModelBase_kill(),
    3503849245765491449: TankModelBase_push(),
    6244553590046625004: TankModelBase_resetConfiguration(),
    2989701651242356625: TankModelBase_setHealth(),
    5854120615662076740: TankModelBase_setState(),
    2895186944952018743: TankModelServer_deathConfirmationCommand(),
    117278145745427103: TankModelServer_handleCollisionWithOtherTank(),
    4966223566960492015: TankModelServer_stateCommand(),
    5998998533998178542: TankPauseModelBase(),
    5333994690148230179: TankPauseModelServer_disablePause(),
    6638615717159906637: TankRankUpEffectCC(),
    5523646268275163342: TankReloaderModelBase(),
    1475734987260316419: TankReloaderModelBase_die(),
    895738991764718853: TankReloaderModelBase_onDeathScheduled(),
    665639539633492485: TankReloaderModelBase_onReload(),
    7127632667958387441: TankResistancesCC(),
    2104999573658810427: TankSpawnerCC(),
    7910078009301382601: TankSpawnerModelBase_prepareToSpawn(),
    4028620761465158251: TankSpawnerModelBase_spawn(),
    6199716760715904819: TankSpawnerModelServer_confirmSpawn(),
    9209552134071208874: TankSpawnerModelServer_readyToSpawnCommand(),
    1601257880117586925: TankSpawnerModelServer_setReadyToPlace(),
    7257138969919985658: TankStunCC(),
    9187558822227119790: TankStunModelBase_calm(),
    9187558822227614985: TankStunModelBase_stun(),
    973781565169577734: TankSuperchargeCC(),
    7647720059052212221: TankSuperchargeModelBase_superchargeActivated(),
    7657330805330041244: TankSuperchargeModelBase_superchargeDeactivated(),
    4487090345989522582: TankTemperatureModelBase(),
    8920209472087903453: TankTemperatureModelBase_setTemperature(),
    4206032257972775630: TurnOverCC(),
    9006672329527855788: TargetingStatisticsModelBase(),
    7222108426304813263: TargetingStatisticsModelServer_switchTargetingMode(),
    6652129902375288094: TeamBattleInfoCC(),
    4649894699348452281: TeamBattleInfoModelBase_addUser(),
    8412189401960347554: TeamBattleInfoModelBase_removeUser(),
    4436756109011327056: TeamBattleInfoModelBase_swapTeams(),
    1480425466344702439: TeamBattleInfoModelBase_updateTeamScore(),
    1480424224583906965: TeamBattleInfoModelBase_updateUserScore(),
    7295738902766942560: TeamJuggernautCC(),
    8779532205378268430: TeamJuggernautModelBase_bossChanged(),
    8018942101821409153: TeamJuggernautModelBase_bossKilled(),
    171896995500198357: TeamLightCC(),
    4847045464927670706: TelegramEntranceModelCC(),
    3472353195103074234: TelegramEntranceModelServer_login(),
    7321454637788834327: TelegramSocialLoginModelBase(),
    3122964582367261689: TemperatureCC(),
    3893855999545616334: TemporaryItemCC(),
    8027606769438621718: TerminalPaymentCC(),
    6855550629220038001: TerminatorCC(),
    5256326385350796760: TerminatorModelBase_primaryRemoteCharge(),
    2805722386553418492: TerminatorModelBase_primaryRemoteDummy(),
    7050167951547569950: TerminatorModelBase_primaryRemoteShot(),
    7539316643018047656: TerminatorModelBase_secondaryRemoteHide(),
    7539316643017832352: TerminatorModelBase_secondaryRemoteOpen(),
    2574198055537303018: TerminatorModelServer_primaryCharge(),
    4819159322266251468: TerminatorModelServer_primaryDummyShot(),
    7291559365196289104: TerminatorModelServer_primaryShot(),
    4602021999239443306: TerminatorModelServer_secondaryHide(),
    4602021999239658610: TerminatorModelServer_secondaryOpen(),
    6210980129845088505: TerminatorSFXCC(),
    573691036321759779: TeslaCC(),
    7335191430366621906: TeslaModelBase_prepareGlobeLightning(),
    7174636465767941533: TeslaModelBase_reconfigureWeapon(),
    6282822726178548587: TeslaModelBase_spark(),
    6058982352227069766: TeslaModelBase_startFire(),
    7540280341731314166: TeslaModelBase_stopFire(),
    7613088507526161968: TeslaModelServer_lightning(),
    8702533580879904182: TeslaModelServer_prepareGlobeLightning(),
    7613082239690066754: TeslaModelServer_startFire(),
    5109923046323298706: TeslaModelServer_stopFire(),
    3908984336328553321: TeslaModelServer_throwGlobeLightning(),
    1092307613749405757: ThunderCC(),
    7304231319779615950: ThunderModelBase_fire(),
    8813105874551881850: ThunderModelBase_fireDummy(),
    2433076740552477163: ThunderModelServer_fireCommand(),
    5052106521703138055: ThunderModelServer_fireDummyCommand(),
    4077976624352222646: ThunderModelServer_hitStaticCommand(),
    3759487879654489657: ThunderModelServer_hitTargetCommand(),
    8191021443726008799: ThunderShootSFXCC(),
    3212313432839858454: TimeCheckerModelBase(),
    3548323294445661361: TimeCheckerModelBase_ping(),
    3561260405371220671: TimeCheckerModelServer_pong(),
    8032192927455575509: TimePeriodModelCC(),
    2642146783969719957: TimeZoneOffsetModelBase(),
    4091278427760769105: TimeZoneOffsetModelServer_setZoneOffset(),
    8738779591519195597: TitanUltimateGeneratorCC(),
    3259573107349950777: TitanUltimateGeneratorModelBase_coverTank(),
    3482025423529525056: TitanUltimateGeneratorModelBase_uncoverTank(),
    2640519651858568955: TmallModelBase(),
    3535248640055401164: TrackedChassisCC(),
    7970316116371156428: TrackedChassisModelBase_control(),
    7517284875465811967: TrackedChassisModelServer_controlCommand(),
    3107451137018937608: TrackersLoggerModelBase(),
    8295410842997943338: TrackersLoggerModelServer_logTrackers(),
    7972367263889240147: TrackingPixelShowingModelBase(),
    8313954790892861672: TrackingPixelShowingModelBase_loadPixel(),
    7524264912308708291: TrafficPartnersGoalsModelBase(),
    8384919755051909877: TwinsCC(),
    3536472446925346048: TwinsModelBase_fire(),
    5536786668492087416: TwinsModelBase_fireDummy(),
    5484756528937666979: TwinsModelServer_fireCommand(),
    1535213430161247701: TwinsModelServer_fireDummyCommand(),
    561083532810332292: TwinsModelServer_hitStaticCommand(),
    242594788112599303: TwinsModelServer_hitTargetCommand(),
    7692437363459179503: TwinsShootSFXCC(),
    6627517808336136295: UidCheckCC(),
    1361803917390532801: UidCheckModelBase_validateResult(),
    2873080777697289636: UidCheckModelServer_validateUid(),
    586300670382369905: UidCheckModelServer_validateUidForPaidRename(),
    4255726087158005051: UidNotifierData(),
    1246109053620123806: UidNotifierModelBase_setUid(),
    6455142242556985012: UltimateCC(),
    1626582508993174306: UltimateModelBase_resetCharge(),
    1518320782248281377: UltimateModelBase_showUltimateCharged(),
    5974420571648764656: UltimateModelBase_ultimateRejected(),
    4834181928072657585: UltimateModelBase_ultimateUsed(),
    4831333077268992386: UltimateModelBase_updateCharge(),
    7078025623569631495: UltimateModelBase_updateChargeAndRate(),
    4071471891349894925: UltimateModelServer_activateUltimate(),
    1259328549938381181: UpgradeGarageItemModelBase(),
    9132918208061119259: UpgradeGarageItemModelBase_itemAlreadyUpgraded(),
    1513113341732956843: UpgradeGarageItemModelServer_instantUpgrade(),
    2968960673159245352: UpgradeGarageItemModelServer_speedUp(),
    8060894096836849355: UpgradeGarageItemModelServer_upgradeItem(),
    4743567393313674375: UpgradeParamsCC(),
    4806049376094380223: UpgradingItemsModelBase(),
    1501395935407616474: UpgradingItemsModelBase_init(),
    1357081488087474329: UpgradingItemsModelServer_itemUpgraded(),
    8437107422360608282: UpgradingItemsModelServer_select(),
    6009636010149779016: UpgradingNotificationsCC(),
    7540511207536530347: UpgradingNotificationsModelBase_updateUpgradingNotifications(),
    56737018356028401: UserAbonementsCC(),
    6857956360442005812: UserAbonementsModelBase_updateAbonement(),
    1850509145998626828: UserActionsLoggerCC(),
    6025940417100022717: UserActionsLoggerModelBase_trackPurchase(),
    5848693330284271305: UserActionsLoggerModelBase_trackPurchaseForGameCurrency(),
    5081115369331919301: UserActionsLoggerModelServer_battleSelectAction(),
    861194913719010141: UserActionsLoggerModelServer_changeScreenAction(),
    9071789322355824539: UserActionsLoggerModelServer_flashMigrationAction(),
    5070685500007473138: UserActionsLoggerModelServer_garageAction(),
    2522279596878141909: UserActionsLoggerModelServer_paymentAction(),
    1908577017995156534: UserActionsLoggerModelServer_settingsAction(),
    2080556892932195426: UserCountryCC(),
    3179861497615625536: UserEmailCC(),
    3190244820038756769: UserEmailAndPasswordModelBase_activateMessage(),
    579242823008667022: UserEmailAndPasswordModelBase_emailAlreadyUsed(),
    2611173935532140280: UserEmailAndPasswordModelBase_emailConfirmed(),
    8891234703158239948: UserEmailAndPasswordModelBase_incorrectEmail(),
    2747789592087152345: UserEmailAndPasswordModelBase_notifyCorrectPassword(),
    176110661876294882: UserEmailAndPasswordModelBase_notifyIncorrectPassword(),
    93011926352432722: UserEmailAndPasswordModelBase_notifyPasswordIsNotSet(),
    3017384138137697921: UserEmailAndPasswordModelBase_notifyPasswordIsSet(),
    6252816260867053980: UserEmailAndPasswordModelBase_passwordChanged(),
    7764478571911377711: UserEmailAndPasswordModelBase_updatePasswordError(),
    2403434114154051813: UserEmailAndPasswordModelServer_checkPasswordCorrectness(),
    5335095270106426446: UserEmailAndPasswordModelServer_checkPasswordIsSet(),
    3447449571984665145: UserEmailAndPasswordModelServer_sendPasswordAndEmailChangeInstruction(),
    6119462266823657248: UserEmailAndPasswordModelServer_setPassword(),
    6117545336529119210: UserEmailAndPasswordModelServer_updateEmail(),
    6038328003893289953: UserEmailAndPasswordModelServer_updatePassword(),
    6403067749608679876: UserNotifierCC(),
    5429494051830592977: UserNotifierModelServer_subscribe(),
    2683320318075486824: UserNotifierModelServer_unsubscribe(),
    1893408944113965505: UserPropertiesCC(),
    276076212290602640: UserPropertiesModelBase_changeCrystal(),
    7864195052961084235: UserPropertiesModelBase_onJoinClan(),
    3982372259754314184: UserPropertiesModelBase_onLeaveClan(),
    5628691596950015452: UserPropertiesModelBase_updateGearScore(),
    7864034006236084309: UserPropertiesModelBase_updateRank(),
    3977381235093458189: UserPropertiesModelBase_updateScore(),
    848734776772436751: UserPropertiesModelBase_updateUid(),
    8468360636859619961: UserPropertiesModelBase_updateUserRating(),
    6987133563177029220: UsersCounterPanelModelBase(),
    9006618999845515525: UsersCounterPanelModelBase_saveUniqueUserId(),
    735819020173389993: UsersCounterPanelModelServer_hasNotUniqueUserId(),
    8477726141190698081: UsersCounterPanelModelServer_receiveUniqueUserId(),
    2167304104613661084: VerticalAutoAimingModelBase(),
    2361496672694617779: VideoAdsBattleResultModelBase(),
    3066724526192771389: VideoAdsBattleResultModelBase_availableIncreasedRewards(),
    518665616061831087: VideoAdsBattleResultModelBase_availableSimpleRewards(),
    4769889465215734406: VideoAdsBattleResultModelBase_notAvailableRewards(),
    2945546626172633748: VideoAdsBattleResultModelServer_showed(),
    7009856650669330978: VideoAdsItemUpgradeCC(),
    5819676690656965535: VideoAdsItemUpgradeModelBase_maxAdsShowed(),
    668049125300217189: VideoAdsItemUpgradeModelServer_showed(),
    7415670147918689340: VideoAdsModelCC(),
    6252272674900979785: VideoAdsModelBase_disable(),
    2581911257055649068: VideoAdsModelBase_enable(),
    8467537921608283348: VideoAdsModelServer_clickShow(),
    7551602984488625261: VikingUltimateCC(),
    8914117039835924034: VikingUltimateModelBase_effectActivated(),
    7174729688535406819: VikingUltimateModelBase_effectDeactivated(),
    8484950448836434696: VkontakteInternalLoginModelBase(),
    4218679919655250898: VkontaktePaymentModelBase(),
    3350741728813458072: VkontaktePaymentModelBase_receivePaymentTransaction(),
    5133664454790295619: VkontaktePaymentModelServer_getPaymentTransaction(),
    6021121731930682870: WarRedirectModelBase(),
    7543847079208470869: WarRedirectModelBase_receiveUrl(),
    3137250957878113145: WaspUltimateBombCC(),
    1725571201046733716: WaspUltimateBombModelBase_bang(),
    5364948468178137841: WeaponChargingCommunicationModelBase(),
    5729258564735115120: WeaponChargingCommunicationModelBase_handleChargingFinish(),
    410241468043754693: WeaponChargingCommunicationModelBase_handleChargingStart(),
    1954691809746631312: WeaponChargingCommunicationModelServer_finishCharging(),
    6089828626317647609: WeaponChargingCommunicationModelServer_startCharging(),
    1237976996871886061: WeaponCommonCC(),
    954003377929350580: WeaponCommonModelBase_setBuffed(),
    5695394888778649883: WeaponRotationLimitModelBase(),
    7883218652624289568: VerticalAnglesCC(),
    6384655869260380731: WeaponWeakeningCC(),
    924318199145214645: WeaponWeakeningModelBase_reconfigureWeapon(),
    3847274559202656925: WeeklyContainerModelBase(),
    1781348408680879222: WeeklyContainerModelBase_openSuccessful(),
    8496138192854210324: WeeklyContainerModelBase_updateCount(),
    1558536430222575548: WeeklyContainerModelServer_open(),
    2649695836925276773: WeeklyQuestShowingCC(),
    6981461950983745981: WeeklyQuestShowingModelBase_openWeeklyQuest(),
    4404441690123181755: WeeklyQuestShowingModelBase_prizeGiven(),
    8458644924849107201: WeeklyQuestShowingModelServer_givePrize(),
    3963358610708739300: WeeklyQuestShowingModelServer_openWindow(),
}
